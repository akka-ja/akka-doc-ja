# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../general/message-delivery-reliability.rst:5
msgid "Message Delivery Reliability"
msgstr ""

#: ../../general/message-delivery-reliability.rst:7
msgid ""
"Akka helps you build reliable applications which make use of multiple "
"processor cores in one machine (“scaling up”) or distributed across a "
"computer network (“scaling out”). The key abstraction to make this work "
"is that all interactions between your code units—actors—happen via "
"message passing, which is why the precise semantics of how messages are "
"passed between actors deserve their own chapter."
msgstr ""

#: ../../general/message-delivery-reliability.rst:14
msgid ""
"In order to give some context to the discussion below, consider an "
"application which spans multiple network hosts. The basic mechanism for "
"communication is the same whether sending to an actor on the local JVM or"
" to a remote actor, but of course there will be observable differences in"
" the latency of delivery (possibly also depending on the bandwidth of the"
" network link and the message size) and the reliability. In case of a "
"remote message send there are obviously more steps involved which means "
"that more can go wrong. Another aspect is that local sending will just "
"pass a reference to the message inside the same JVM, without any "
"restrictions on the underlying object which is sent, whereas a remote "
"transport will place a limit on the message size."
msgstr ""

#: ../../general/message-delivery-reliability.rst:25
msgid ""
"Writing your actors such that every interaction could possibly be remote "
"is the safe, pessimistic bet. It means to only rely on those properties "
"which are always guaranteed and which are discussed in detail below.  "
"This has of course some overhead in the actor’s implementation. If you "
"are willing to sacrifice full location transparency—for example in case "
"of a group of closely collaborating actors—you can place them always on "
"the same JVM and enjoy stricter guarantees on message delivery. The "
"details of this trade-off are discussed further below."
msgstr ""

#: ../../general/message-delivery-reliability.rst:33
msgid ""
"As a supplementary part we give a few pointers at how to build stronger "
"reliability on top of the built-in ones. The chapter closes by discussing"
" the role of the “Dead Letter Office”."
msgstr ""

#: ../../general/message-delivery-reliability.rst:38
msgid "The General Rules"
msgstr ""

#: ../../general/message-delivery-reliability.rst:40
msgid ""
"These are the rules for message sends (i.e. the ``tell`` or ``!`` method,"
" which also underlies the ``ask`` pattern):"
msgstr ""

#: ../../general/message-delivery-reliability.rst:43
msgid "**at-most-once delivery**, i.e. no guaranteed delivery"
msgstr ""

#: ../../general/message-delivery-reliability.rst:44
msgid "**message ordering per sender–receiver pair**"
msgstr ""

#: ../../general/message-delivery-reliability.rst:46
msgid ""
"The first rule is typically found also in other actor implementations "
"while the second is specific to Akka."
msgstr ""

#: ../../general/message-delivery-reliability.rst:50
msgid "Discussion: What does “at-most-once” mean?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:52
msgid ""
"When it comes to describing the semantics of a delivery mechanism, there "
"are three basic categories:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:55
msgid ""
"**at-most-once** delivery means that for each message handed to the "
"mechanism, that message is delivered zero or one times; in more casual "
"terms it means that messages may be lost."
msgstr ""

#: ../../general/message-delivery-reliability.rst:59
msgid ""
"**at-least-once** delivery means that for each message handed to the "
"mechanism potentially multiple attempts are made at delivering it, such "
"that at least one succeeds; again, in more casual terms this means that "
"messages may be duplicated but not lost."
msgstr ""

#: ../../general/message-delivery-reliability.rst:64
msgid ""
"**exactly-once** delivery means that for each message handed to the "
"mechanism exactly one delivery is made to the recipient; the message can "
"neither be lost nor duplicated."
msgstr ""

#: ../../general/message-delivery-reliability.rst:68
msgid ""
"The first one is the cheapest—highest performance, least implementation "
"overhead—because it can be done in a fire-and-forget fashion without "
"keeping state at the sending end or in the transport mechanism. The "
"second one requires retries to counter transport losses, which means "
"keeping state at the sending end and having an acknowledgement mechanism "
"at the receiving end. The third is most expensive—and has consequently "
"worst performance—because in addition to the second it requires state to "
"be kept at the receiving end in order to filter out duplicate deliveries."
msgstr ""

#: ../../general/message-delivery-reliability.rst:78
msgid "Discussion: Why No Guaranteed Delivery?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:80
msgid ""
"At the core of the problem lies the question what exactly this guarantee "
"shall mean:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:83
msgid "The message is sent out on the network?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:84
msgid "The message is received by the other host?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:85
msgid "The message is put into the target actor's mailbox?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:86
msgid "The message is starting to be processed by the target actor?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:87
msgid "The message is processed successfully by the target actor?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:89
msgid ""
"Each one of these have different challenges and costs, and it is obvious "
"that there are conditions under which any message passing library would "
"be unable to comply; think for example about configurable mailbox types "
"and how a bounded mailbox would interact with the third point, or even "
"what it would mean to decide upon the “successfully” part of point five."
msgstr ""

#: ../../general/message-delivery-reliability.rst:95
msgid ""
"Along those same lines goes the reasoning in `Nobody Needs Reliable "
"Messaging`_. The only meaningful way for a sender to know whether an "
"interaction was successful is by receiving a business-level "
"acknowledgement message, which is not something Akka could make up on its"
" own (neither are we writing a “do what I mean” framework nor would you "
"want us to)."
msgstr ""

#: ../../general/message-delivery-reliability.rst:101
msgid ""
"Akka embraces distributed computing and makes the fallibility of "
"communication explicit through message passing, therefore it does not try"
" to lie and emulate a leaky abstraction. This is a model that has been "
"used with great success in Erlang and requires the users to design their "
"applications around it. You can read more about this approach in the "
"`Erlang documentation`_ (section 10.9 and 10.10), Akka follows it "
"closely."
msgstr ""

#: ../../general/message-delivery-reliability.rst:108
msgid ""
"Another angle on this issue is that by providing only basic guarantees "
"those use cases which do not need stronger reliability do not pay the "
"cost of their implementation; it is always possible to add stronger "
"reliability on top of basic ones, but it is not possible to retro-"
"actively remove reliability in order to gain more performance."
msgstr ""

#: ../../general/message-delivery-reliability.rst:117
msgid "Discussion: Message Ordering"
msgstr ""

#: ../../general/message-delivery-reliability.rst:119
msgid ""
"The rule more specifically is that *for a given pair of actors, messages "
"sent directly from the first to the second will not be received out-of-"
"order.* The word *directly* emphasizes that this guarantee only applies "
"when sending with the `tell` operator to the final destination, not when "
"employing mediators or other message dissemination features (unless "
"stated otherwise)."
msgstr ""

#: ../../general/message-delivery-reliability.rst:125
msgid "The guarantee is illustrated in the following:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:127
msgid "Actor ``A1`` sends messages ``M1``, ``M2``, ``M3`` to ``A2``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:129
msgid "Actor ``A3`` sends messages ``M4``, ``M5``, ``M6`` to ``A2``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:137
msgid "This means that:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:132
msgid "If ``M1`` is delivered it must be delivered before ``M2`` and ``M3``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:133
msgid "If ``M2`` is delivered it must be delivered before ``M3``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:134
msgid "If ``M4`` is delivered it must be delivered before ``M5`` and ``M6``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:135
msgid "If ``M5`` is delivered it must be delivered before ``M6``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:136
msgid "``A2`` can see messages from ``A1`` interleaved with messages from ``A3``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:137
msgid ""
"Since there is no guaranteed delivery, any of the messages may be "
"dropped, i.e. not arrive at ``A2``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:141
msgid ""
"It is important to note that Akka’s guarantee applies to the order in "
"which messages are enqueued into the recipient’s mailbox. If the mailbox "
"implementation does not respect FIFO order (e.g. a "
":class:`PriorityMailbox`), then the order of processing by the actor can "
"deviate from the enqueueing order."
msgstr ""

#: ../../general/message-delivery-reliability.rst:147
msgid "Please note that this rule is **not transitive**:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:149
msgid "Actor ``A`` sends message ``M1`` to actor ``C``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:151
msgid "Actor ``A`` then sends message ``M2`` to actor ``B``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:153
msgid "Actor ``B`` forwards message ``M2`` to actor ``C``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:155
#: ../../general/message-delivery-reliability.rst:270
msgid "Actor ``C`` may receive ``M1`` and ``M2`` in any order"
msgstr ""

#: ../../general/message-delivery-reliability.rst:157
msgid ""
"Causal transitive ordering would imply that ``M2`` is never received "
"before ``M1`` at actor ``C`` (though any of them might be lost). This "
"ordering can be violated due to different message delivery latencies when"
" ``A``, ``B`` and ``C`` reside on different network hosts, see more "
"below."
msgstr ""

#: ../../general/message-delivery-reliability.rst:164
msgid ""
"Actor creation is treated as a message sent from the parent to the child,"
" with the same semantics as discussed above. Sending a message to an "
"actor in a way which could be reordered with this initial creation "
"message means that the message might not arrive because the actor does "
"not exist yet. An example where the message might arrive too early would "
"be to create a remote-deployed actor R1, send its reference to another "
"remote actor R2 and have R2 send a message to R1. An example of well-"
"defined ordering is a parent which creates an actor and immediately sends"
" a message to it."
msgstr ""

#: ../../general/message-delivery-reliability.rst:174
msgid "Communication of failure"
msgstr ""

#: ../../general/message-delivery-reliability.rst:176
msgid ""
"Please note, that the ordering guarantees discussed above only hold for "
"user messages between actors. Failure of a child of an actor is "
"communicated by special system messages that are not ordered relative to "
"ordinary user messages. In particular:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:180
msgid "Child actor ``C`` sends message ``M`` to its parent ``P``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:182
msgid "Child actor fails with failure ``F``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:184
msgid ""
"Parent actor ``P`` might receive the two events either in order ``M``, "
"``F`` or ``F``, ``M``"
msgstr ""

#: ../../general/message-delivery-reliability.rst:186
msgid ""
"The reason for this is that internal system messages has their own "
"mailboxes therefore the ordering of enqueue calls of a user and system "
"message cannot guarantee the ordering of their dequeue times."
msgstr ""

#: ../../general/message-delivery-reliability.rst:190
msgid "The Rules for In-JVM (Local) Message Sends"
msgstr ""

#: ../../general/message-delivery-reliability.rst:193
msgid "Be careful what you do with this section!"
msgstr ""

#: ../../general/message-delivery-reliability.rst:195
msgid ""
"Relying on the stronger reliability in this section is not recommended "
"since it will bind your application to local-only deployment: an "
"application may have to be designed differently (as opposed to just "
"employing some message exchange patterns local to some actors) in order "
"to be fit for running on a cluster of machines. Our credo is “design "
"once, deploy any way you wish”, and to achieve this you should only rely "
"on `The General Rules`_."
msgstr ""

#: ../../general/message-delivery-reliability.rst:203
msgid "Reliability of Local Message Sends"
msgstr ""

#: ../../general/message-delivery-reliability.rst:205
msgid ""
"The Akka test suite relies on not losing messages in the local context "
"(and for non-error condition tests also for remote deployment), meaning "
"that we actually do apply the best effort to keep our tests stable. A "
"local ``tell`` operation can however fail for the same reasons as a "
"normal method call can on the JVM:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:211
msgid ":class:`StackOverflowError`"
msgstr ""

#: ../../general/message-delivery-reliability.rst:212
msgid ":class:`OutOfMemoryError`"
msgstr ""

#: ../../general/message-delivery-reliability.rst:213
msgid "other :class:`VirtualMachineError`"
msgstr ""

#: ../../general/message-delivery-reliability.rst:215
msgid "In addition, local sends can fail in Akka-specific ways:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:217
msgid "if the mailbox does not accept the message (e.g. full BoundedMailbox)"
msgstr ""

#: ../../general/message-delivery-reliability.rst:218
msgid ""
"if the receiving actor fails while processing the message or is already "
"terminated"
msgstr ""

#: ../../general/message-delivery-reliability.rst:221
msgid ""
"While the first is clearly a matter of configuration the second deserves "
"some thought: the sender of a message does not get feedback if there was "
"an exception while processing, that notification goes to the supervisor "
"instead. This is in general not distinguishable from a lost message for "
"an outside observer."
msgstr ""

#: ../../general/message-delivery-reliability.rst:228
msgid "Ordering of Local Message Sends"
msgstr ""

#: ../../general/message-delivery-reliability.rst:230
msgid ""
"Assuming strict FIFO mailboxes the aforementioned caveat of non-"
"transitivity of the message ordering guarantee is eliminated under "
"certain conditions. As you will note, these are quite subtle as it "
"stands, and it is even possible that future performance optimizations "
"will invalidate this whole paragraph. The possibly non-exhaustive list of"
" counter-indications is:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:236
msgid ""
"Before receiving the first reply from a top-level actor, there is a lock "
"which protects an internal interim queue, and this lock is not fair; the "
"implication is that enqueue requests from different senders which arrive "
"during the actor’s construction (figuratively, the details are more "
"involved) may be reordered depending on low-level thread scheduling. "
"Since completely fair locks do not exist on the JVM this is unfixable."
msgstr ""

#: ../../general/message-delivery-reliability.rst:243
msgid ""
"The same mechanism is used during the construction of a Router, more "
"precisely the routed ActorRef, hence the same problem exists for actors "
"deployed with Routers."
msgstr ""

#: ../../general/message-delivery-reliability.rst:247
msgid ""
"As mentioned above, the problem occurs anywhere a lock is involved during"
" enqueueing, which may also apply to custom mailboxes."
msgstr ""

#: ../../general/message-delivery-reliability.rst:250
msgid ""
"This list has been compiled carefully, but other problematic scenarios "
"may have escaped our analysis."
msgstr ""

#: ../../general/message-delivery-reliability.rst:254
msgid "How does Local Ordering relate to Network Ordering"
msgstr ""

#: ../../general/message-delivery-reliability.rst:256
msgid ""
"The rule that *for a given pair of actors, messages sent directly from "
"the first to the second will not be received out-of-order* holds for "
"messages sent over the network with the TCP based Akka remote transport "
"protocol."
msgstr ""

#: ../../general/message-delivery-reliability.rst:260
msgid ""
"As explained in the previous section local message sends obey transitive "
"causal ordering under certain conditions. This ordering can be violated "
"due to different message delivery latencies. For example:"
msgstr ""

#: ../../general/message-delivery-reliability.rst:264
msgid "Actor ``A`` on node-1 sends message ``M1`` to actor ``C`` on node-3"
msgstr ""

#: ../../general/message-delivery-reliability.rst:266
msgid "Actor ``A`` on node-1 then sends message ``M2`` to actor ``B`` on node-2"
msgstr ""

#: ../../general/message-delivery-reliability.rst:268
msgid "Actor ``B`` on node-2 forwards message ``M2`` to actor ``C`` on node-3"
msgstr ""

#: ../../general/message-delivery-reliability.rst:272
msgid ""
"It might take longer time for ``M1`` to \"travel\" to node-3 than it "
"takes for ``M2`` to \"travel\" to node-3 via node-2."
msgstr ""

#: ../../general/message-delivery-reliability.rst:276
msgid "Higher-level abstractions"
msgstr ""

#: ../../general/message-delivery-reliability.rst:278
msgid ""
"Based on a small and consistent tool set in Akka's core, Akka also "
"provides powerful, higher-level abstractions on top it."
msgstr ""

#: ../../general/message-delivery-reliability.rst:282
msgid "Messaging Patterns"
msgstr ""

#: ../../general/message-delivery-reliability.rst:284
msgid ""
"As discussed above a straight-forward answer to the requirement of "
"reliable delivery is an explicit ACK–RETRY protocol. In its simplest form"
" this requires"
msgstr ""

#: ../../general/message-delivery-reliability.rst:287
msgid ""
"a way to identify individual messages to correlate message with "
"acknowledgement"
msgstr ""

#: ../../general/message-delivery-reliability.rst:289
msgid "a retry mechanism which will resend messages if not acknowledged in time"
msgstr ""

#: ../../general/message-delivery-reliability.rst:290
msgid "a way for the receiver to detect and discard duplicates"
msgstr ""

#: ../../general/message-delivery-reliability.rst:292
msgid ""
"The third becomes necessary by virtue of the acknowledgements not being "
"guaranteed to arrive either. An ACK-RETRY protocol with business-level "
"acknowledgements is supported by :ref:`at-least-once-delivery-scala` of "
"the Akka Persistence module. Duplicates can be detected by tracking the "
"identifiers of messages sent via :ref:`at-least-once-delivery-scala`. "
"Another way of implementing the third part would be to make processing "
"the messages idempotent on the level of the business logic."
msgstr ""

#: ../../general/message-delivery-reliability.rst:299
msgid ""
"Another example of implementing all three requirements is shown at :ref"
":`reliable-proxy` (which is now superseded by :ref:`at-least-once-"
"delivery-scala`)."
msgstr ""

#: ../../general/message-delivery-reliability.rst:303
msgid "Event Sourcing"
msgstr ""

#: ../../general/message-delivery-reliability.rst:305
msgid ""
"Event sourcing (and sharding) is what makes large websites scale to "
"billions of users, and the idea is quite simple: when a component (think "
"actor) processes a command it will generate a list of events representing"
" the effect of the command. These events are stored in addition to being "
"applied to the component’s state. The nice thing about this scheme is "
"that events only ever are appended to the storage, nothing is ever "
"mutated; this enables perfect replication and scaling of consumers of "
"this event stream (i.e. other components may consume the event stream as "
"a means to replicate the component’s state on a different continent or to"
" react to changes). If the component’s state is lost—due to a machine "
"failure or by being pushed out of a cache—it can easily be reconstructed "
"by replaying the event stream (usually employing snapshots to speed up "
"the process). :ref:`event-sourcing-scala` is supported by Akka "
"Persistence."
msgstr ""

#: ../../general/message-delivery-reliability.rst:320
msgid "Mailbox with Explicit Acknowledgement"
msgstr ""

#: ../../general/message-delivery-reliability.rst:322
msgid ""
"By implementing a custom mailbox type it is possible to retry message "
"processing at the receiving actor’s end in order to handle temporary "
"failures. This pattern is mostly useful in the local communication "
"context where delivery guarantees are otherwise sufficient to fulfill the"
" application’s requirements."
msgstr ""

#: ../../general/message-delivery-reliability.rst:327
msgid ""
"Please note that the caveats for `The Rules for In-JVM (Local) Message "
"Sends`_ do apply."
msgstr ""

#: ../../general/message-delivery-reliability.rst:330
msgid ""
"An example implementation of this pattern is shown at :ref:`mailbox-"
"acking`."
msgstr ""

#: ../../general/message-delivery-reliability.rst:335
msgid "Dead Letters"
msgstr ""

#: ../../general/message-delivery-reliability.rst:337
msgid ""
"Messages which cannot be delivered (and for which this can be "
"ascertained) will be delivered to a synthetic actor called "
"``/deadLetters``. This delivery happens on a best-effort basis; it may "
"fail even within the local JVM (e.g. during actor termination). Messages "
"sent via unreliable network transports will be lost without turning up as"
" dead letters."
msgstr ""

#: ../../general/message-delivery-reliability.rst:344
msgid "What Should I Use Dead Letters For?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:346
msgid ""
"The main use of this facility is for debugging, especially if an actor "
"send does not arrive consistently (where usually inspecting the dead "
"letters will tell you that the sender or recipient was set wrong "
"somewhere along the way). In order to be useful for this purpose it is "
"good practice to avoid sending to deadLetters where possible, i.e. run "
"your application with a suitable dead letter logger (see more below) from"
" time to time and clean up the log output. This exercise—like all "
"else—requires judicious application of common sense: it may well be that "
"avoiding to send to a terminated actor complicates the sender’s code more"
" than is gained in debug output clarity."
msgstr ""

#: ../../general/message-delivery-reliability.rst:356
msgid ""
"The dead letter service follows the same rules with respect to delivery "
"guarantees as all other message sends, hence it cannot be used to "
"implement guaranteed delivery."
msgstr ""

#: ../../general/message-delivery-reliability.rst:361
msgid "How do I Receive Dead Letters?"
msgstr ""

#: ../../general/message-delivery-reliability.rst:363
msgid ""
"An actor can subscribe to class :class:`akka.actor.DeadLetter` on the "
"event stream, see :ref:`event-stream-java` (Java) or :ref:`event-stream-"
"scala` (Scala) for how to do that. The subscribed actor will then receive"
" all dead letters published in the (local) system from that point "
"onwards. Dead letters are not propagated over the network, if you want to"
" collect them in one place you will have to subscribe one actor per "
"network node and forward them manually. Also consider that dead letters "
"are generated at that node which can determine that a send operation is "
"failed, which for a remote send can be the local system (if no network "
"connection can be established) or the remote one (if the actor you are "
"sending to does not exist at that point in time)."
msgstr ""

#: ../../general/message-delivery-reliability.rst:375
msgid "Dead Letters Which are (Usually) not Worrisome"
msgstr ""

#: ../../general/message-delivery-reliability.rst:377
msgid ""
"Every time an actor does not terminate by its own decision, there is a "
"chance that some messages which it sends to itself are lost. There is one"
" which happens quite easily in complex shutdown scenarios that is usually"
" benign: seeing a :class:`akka.dispatch.Terminate` message dropped means "
"that two termination requests were given, but of course only one can "
"succeed. In the same vein, you might see :class:`akka.actor.Terminated` "
"messages from children while stopping a hierarchy of actors turning up in"
" dead letters if the parent is still watching the child when the parent "
"terminates."
msgstr ""

