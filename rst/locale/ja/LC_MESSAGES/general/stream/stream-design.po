# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../general/stream/stream-design.rst:4
msgid "Design Principles behind Akka Streams"
msgstr ""

#: ../../general/stream/stream-design.rst:6
msgid ""
"It took quite a while until we were reasonably happy with the look and feel "
"of the API and the architecture of the implementation, and while being "
"guided by intuition the design phase was very much exploratory research. "
"This section details the findings and codifies them into a set of principles"
" that have emerged during the process."
msgstr ""

#: ../../general/stream/stream-design.rst:10
msgid ""
"As detailed in the introduction keep in mind that the Akka Streams API is "
"completely decoupled from the Reactive Streams interfaces which are just an "
"implementation detail for how to pass stream data between individual "
"processing stages."
msgstr ""

#: ../../general/stream/stream-design.rst:13
msgid "What shall users of Akka Streams expect?"
msgstr ""

#: ../../general/stream/stream-design.rst:15
msgid ""
"Akka is built upon a conscious decision to offer APIs that are minimal and "
"consistent—as opposed to easy or intuitive. The credo is that we favor "
"explicitness over magic, and if we provide a feature then it must work "
"always, no exceptions. Another way to say this is that we minimize the "
"number of rules a user has to learn instead of trying to keep the rules "
"close to what we think users might expect."
msgstr ""

#: ../../general/stream/stream-design.rst:17
msgid "From this follows that the principles implemented by Akka Streams are:"
msgstr ""

#: ../../general/stream/stream-design.rst:19
msgid "all features are explicit in the API, no magic"
msgstr ""

#: ../../general/stream/stream-design.rst:20
msgid ""
"supreme compositionality: combined pieces retain the function of each part"
msgstr ""

#: ../../general/stream/stream-design.rst:21
msgid ""
"exhaustive model of the domain of distributed bounded stream processing"
msgstr ""

#: ../../general/stream/stream-design.rst:23
msgid ""
"This means that we provide all the tools necessary to express any stream "
"processing topology, that we model all the essential aspects of this domain "
"(back-pressure, buffering, transformations, failure recovery, etc.) and that"
" whatever the user builds is reusable in a larger context."
msgstr ""

#: ../../general/stream/stream-design.rst:26
msgid ""
"Akka Streams does not send dropped stream elements to the dead letter office"
msgstr ""

#: ../../general/stream/stream-design.rst:28
msgid ""
"One important consequence of offering only features that can be relied upon "
"is the restriction that Akka Streams cannot ensure that all objects sent "
"through a processing topology will be processed. Elements can be dropped for"
" a number of reasons:"
msgstr ""

#: ../../general/stream/stream-design.rst:30
msgid ""
"plain user code can consume one element in a `map(...)` stage and produce an"
" entirely different one as its result"
msgstr ""

#: ../../general/stream/stream-design.rst:31
msgid ""
"common stream operators drop elements intentionally, e.g. "
"take/drop/filter/conflate/buffer/…"
msgstr ""

#: ../../general/stream/stream-design.rst:32
msgid ""
"stream failure will tear down the stream without waiting for processing to "
"finish, all elements that are in flight will be discarded"
msgstr ""

#: ../../general/stream/stream-design.rst:33
msgid ""
"stream cancellation will propagate upstream (e.g. from a `take` operator) "
"leading to upstream processing steps being terminated without having "
"processed all of their inputs"
msgstr ""

#: ../../general/stream/stream-design.rst:35
msgid ""
"This means that sending JVM objects into a stream that need to be cleaned up"
" will require the user to ensure that this happens outside of the Akka "
"Streams facilities (e.g. by cleaning them up after a timeout or when their "
"results are observed on the stream output, or by using other means like "
"finalizers etc.)."
msgstr ""

#: ../../general/stream/stream-design.rst:38
#: ../../general/stream/stream-design.rst:72
msgid "Resulting Implementation Constraints"
msgstr ""

#: ../../general/stream/stream-design.rst:40
msgid ""
"Compositionality entails reusability of partial stream topologies, which led"
" us to the lifted approach of describing data flows as (partial) graphs that"
" can act as composite sources, flows (a.k.a. pipes) and sinks of data. These"
" building blocks shall then be freely shareable, with the ability to combine"
" them freely to form larger graphs. The representation of these pieces must "
"therefore be an immutable blueprint that is materialized in an explicit step"
" in order to start the stream processing. The resulting stream processing "
"engine is then also immutable in the sense of having a fixed topology that "
"is prescribed by the blueprint. Dynamic networks need to be modeled by "
"explicitly using the Reactive Streams interfaces for plugging different "
"engines together."
msgstr ""

#: ../../general/stream/stream-design.rst:42
msgid ""
"The process of materialization will often create specific objects that are "
"useful to interact with the processing engine once it is running, for "
"example for shutting it down or for extracting metrics. This means that the "
"materialization function produces a result termed the *materialized value of"
" a graph*."
msgstr ""

#: ../../general/stream/stream-design.rst:45
msgid "Interoperation with other Reactive Streams implementations"
msgstr ""

#: ../../general/stream/stream-design.rst:47
msgid ""
"Akka Streams fully implement the Reactive Streams specification and "
"interoperate with all other conformant implementations. We chose to "
"completely separate the Reactive Streams interfaces from the user-level API "
"because we regard them to be an SPI that is not targeted at endusers. In "
"order to obtain a :class:`Publisher` or :class:`Subscriber` from an Akka "
"Stream topology, a corresponding ``Sink.asPublisher`` or "
"``Source.asSubscriber`` element must be used."
msgstr ""

#: ../../general/stream/stream-design.rst:49
msgid ""
"All stream Processors produced by the default materialization of Akka "
"Streams are restricted to having a single Subscriber, additional Subscribers"
" will be rejected. The reason for this is that the stream topologies "
"described using our DSL never require fan-out behavior from the Publisher "
"sides of the elements, all fan-out is done using explicit elements like "
":class:`Broadcast[T]`."
msgstr ""

#: ../../general/stream/stream-design.rst:51
msgid ""
"This means that ``Sink.asPublisher(true)`` (for enabling fan-out support) "
"must be used where broadcast behavior is needed for interoperation with "
"other Reactive Streams implementations."
msgstr ""

#: ../../general/stream/stream-design.rst:54
msgid "What shall users of streaming libraries expect?"
msgstr ""

#: ../../general/stream/stream-design.rst:56
msgid ""
"We expect libraries to be built on top of Akka Streams, in fact Akka HTTP is"
" one such example that lives within the Akka project itself. In order to "
"allow users to profit from the principles that are described for Akka "
"Streams above, the following rules are established:"
msgstr ""

#: ../../general/stream/stream-design.rst:58
msgid ""
"libraries shall provide their users with reusable pieces, i.e. expose "
"factories that return graphs, allowing full compositionality"
msgstr ""

#: ../../general/stream/stream-design.rst:59
msgid ""
"libraries may optionally and additionally provide facilities that consume "
"and materialize graphs"
msgstr ""

#: ../../general/stream/stream-design.rst:61
msgid ""
"The reasoning behind the first rule is that compositionality would be "
"destroyed if different libraries only accepted graphs and expected to "
"materialize them: using two of these together would be impossible because "
"materialization can only happen once. As a consequence, the functionality of"
" a library must be expressed such that materialization can be done by the "
"user, outside of the library’s control."
msgstr ""

#: ../../general/stream/stream-design.rst:63
msgid ""
"The second rule allows a library to additionally provide nice sugar for the "
"common case, an example of which is the Akka HTTP API that provides a "
"``handleWith`` method for convenient materialization."
msgstr ""

#: ../../general/stream/stream-design.rst:67
msgid ""
"One important consequence of this is that a reusable flow description cannot"
" be bound to “live” resources, any connection to or allocation of such "
"resources must be deferred until materialization time. Examples of “live” "
"resources are already existing TCP connections, a multicast Publisher, etc.;"
" a TickSource does not fall into this category if its timer is created only "
"upon materialization (as is the case for our implementation)."
msgstr ""

#: ../../general/stream/stream-design.rst:69
msgid ""
"Exceptions from this need to be well-justified and carefully documented."
msgstr ""

#: ../../general/stream/stream-design.rst:74
msgid ""
"Akka Streams must enable a library to express any stream processing utility "
"in terms of immutable blueprints. The most common building blocks are"
msgstr ""

#: ../../general/stream/stream-design.rst:76
msgid "Source: something with exactly one output stream"
msgstr ""

#: ../../general/stream/stream-design.rst:77
msgid "Sink: something with exactly one input stream"
msgstr ""

#: ../../general/stream/stream-design.rst:78
msgid "Flow: something with exactly one input and one output stream"
msgstr ""

#: ../../general/stream/stream-design.rst:79
msgid ""
"BidiFlow: something with exactly two input streams and two output streams "
"that conceptually behave like two Flows of opposite direction"
msgstr ""

#: ../../general/stream/stream-design.rst:80
msgid ""
"Graph: a packaged stream processing topology that exposes a certain set of "
"input and output ports, characterized by an object of type :class:`Shape`."
msgstr ""

#: ../../general/stream/stream-design.rst:84
msgid ""
"A source that emits a stream of streams is still just a normal Source, the "
"kind of elements that are produced does not play a role in the static stream"
" topology that is being expressed."
msgstr ""

#: ../../general/stream/stream-design.rst:87
msgid "The difference between Error and Failure"
msgstr ""

#: ../../general/stream/stream-design.rst:89
msgid ""
"The starting point for this discussion is the `definition given by the "
"Reactive Manifesto <http://www.reactivemanifesto.org/glossary#Failure>`_. "
"Translated to streams this means that an error is accessible within the "
"stream as a normal data element, while a failure means that the stream "
"itself has failed and is collapsing. In concrete terms, on the Reactive "
"Streams interface level data elements (including errors) are signaled via "
"``onNext`` while failures raise the ``onError`` signal."
msgstr ""

#: ../../general/stream/stream-design.rst:93
msgid ""
"Unfortunately the method name for signaling *failure* to a Subscriber is "
"called ``onError`` for historical reasons. Always keep in mind that the "
"Reactive Streams interfaces (Publisher/Subscription/Subscriber) are modeling"
" the low-level infrastructure for passing streams between execution units, "
"and errors on this level are precisely the failures that we are talking "
"about on the higher level that is modeled by Akka Streams."
msgstr ""

#: ../../general/stream/stream-design.rst:95
msgid ""
"There is only limited support for treating ``onError`` in Akka Streams "
"compared to the operators that are available for the transformation of data "
"elements, which is intentional in the spirit of the previous paragraph. "
"Since ``onError`` signals that the stream is collapsing, its ordering "
"semantics are not the same as for stream completion: transformation stages "
"of any kind will just collapse with the stream, possibly still holding "
"elements in implicit or explicit buffers. This means that data elements "
"emitted before a failure can still be lost if the ``onError`` overtakes "
"them."
msgstr ""

#: ../../general/stream/stream-design.rst:97
msgid ""
"The ability for failures to propagate faster than data elements is essential"
" for tearing down streams that are back-pressured—especially since back-"
"pressure can be the failure mode (e.g. by tripping upstream buffers which "
"then abort because they cannot do anything else; or if a dead-lock "
"occurred)."
msgstr ""

#: ../../general/stream/stream-design.rst:100
msgid "The semantics of stream recovery"
msgstr ""

#: ../../general/stream/stream-design.rst:102
msgid ""
"A recovery element (i.e. any transformation that absorbs an ``onError`` "
"signal and turns that into possibly more data elements followed normal "
"stream completion) acts as a bulkhead that confines a stream collapse to a "
"given region of the stream topology. Within the collapsed region buffered "
"elements may be lost, but the outside is not affected by the failure."
msgstr ""

#: ../../general/stream/stream-design.rst:104
msgid ""
"This works in the same fashion as a ``try``–``catch`` expression: it marks a"
" region in which exceptions are caught, but the exact amount of code that "
"was skipped within this region in case of a failure might not be known "
"precisely—the placement of statements matters."
msgstr ""
