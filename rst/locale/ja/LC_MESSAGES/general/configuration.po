# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Yugo Maede <yugo.maede@gmail.com>, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../general/configuration.rst:4
msgid "Configuration"
msgstr "設定"

#: ../../general/configuration.rst:6
msgid ""
"You can start using Akka without defining any configuration, since sensible "
"default values are provided. Later on you might need to amend the settings "
"to change the default behavior or adapt for specific runtime environments. "
"Typical examples of settings that you might amend:"
msgstr ""
"気の利いたデフォルト値が提供されるので、設定を定義することなくAkkaを使用することができます。 "
"後に、デフォルトの動作を変更したり、特定のランタイム環境に合わせて設定を修正しなければならない場合があります。 "
"あなたが修正するかもしれない設定の典型的な例："

#: ../../general/configuration.rst:11
msgid "log level and logger backend"
msgstr "ログレベルとロガーのバックエンド"

#: ../../general/configuration.rst:12
msgid "enable remoting"
msgstr "リモーティングを有効化"

#: ../../general/configuration.rst:13
msgid "message serializers"
msgstr "メッセージシリアライザ"

#: ../../general/configuration.rst:14
msgid "definition of routers"
msgstr "ルータの定義"

#: ../../general/configuration.rst:15
msgid "tuning of dispatchers"
msgstr "ディスパッチャのチューニング"

#: ../../general/configuration.rst:17
msgid ""
"Akka uses the `Typesafe Config Library "
"<https://github.com/typesafehub/config>`_, which might also be a good choice"
" for the configuration of your own application or library built with or "
"without Akka. This library is implemented in Java with no external "
"dependencies; you should have a look at its documentation (in particular "
"about `ConfigFactory "
"<http://typesafehub.github.io/config/v1.2.0/com/typesafe/config/ConfigFactory.html>`_),"
" which is only summarized in the following."
msgstr ""
"Akkaは `Typesafe Config Library <https://github.com/typesafehub/config>`_ "
"を使用しており、これはAkkaの使用にかかわらず独自のアプリケーションやライブラリの設定にも適しています。 "
"このライブラリは外部依存関係のないJavaで実装されていますので、 そのドキュメント(特に `ConfigFactory "
"<http://typesafehub.github.io/config/v1.2.0/com/typesafe/config/ConfigFactory.html>`_)を見てください。"
" 以下は要約になります。"

#: ../../general/configuration.rst:27
msgid ""
"If you use Akka from the Scala REPL from the 2.9.x series, and you do not "
"provide your own ClassLoader to the ActorSystem, start the REPL with "
"\"-Yrepl-sync\" to work around a deficiency in the REPLs provided Context "
"ClassLoader."
msgstr ""
"2.9.xのScala "
"REPLからAkkaを使用していて、独自のClassLoaderをActorSystemに提供していない場合は、REPLで提供されているContext "
"ClassLoaderの欠点を回避するためにREPLを \"-Yrepl-sync\" で開始します。"

#: ../../general/configuration.rst:34
msgid "Where configuration is read from"
msgstr "設定を読み込む場所"

#: ../../general/configuration.rst:36
msgid ""
"All configuration for Akka is held within instances of :class:`ActorSystem`,"
" or put differently, as viewed from the outside, :class:`ActorSystem` is the"
" only consumer of configuration information. While constructing an actor "
"system, you can either pass in a :class:`Config` object or not, where the "
"second case is equivalent to passing ``ConfigFactory.load()`` (with the "
"right class loader). This means roughly that the default is to parse all "
"``application.conf``, ``application.json`` and ``application.properties`` "
"found at the root of the class path—please refer to the aforementioned "
"documentation for details. The actor system then merges in all "
"``reference.conf`` resources found at the root of the class path to form the"
" fallback configuration, i.e. it internally uses"
msgstr ""
"Akkaのすべての設定は  :class:`ActorSystem` のインスタンス内に保持され、別の言い方をすると外から見ると "
":class:`ActorSystem` は設定情報の唯一のコンシューマです。アクターシステムを構築するときに、 :class:`Config` "
"オブジェクトを渡すか、 ``ConfigFactory.load()`` を渡しても同じです(適切なクラスローダーで)。 "
"デフォルトでは、クラスパスのルートにある ``application.conf``` 、 ``application.json`` 、 "
"``application.properties`` のすべてを解析します。詳しくはそれぞれのドキュメントを参照してください 。 "
"アクターシステムは、クラスパスのルートにあるすべての ``reference.conf`` "
"リソースをマージしてフォールバック構成を形成します。つまり、内部的に以下を使用します。"

#: ../../general/configuration.rst:51
msgid ""
"The philosophy is that code never contains default values, but instead "
"relies upon their presence in the ``reference.conf`` supplied with the "
"library in question."
msgstr ""
"原理としては、このコードにデフォルト値は含まれていませんが、当該ライブラリで提供されている ``reference.conf`` に存在しています。"

#: ../../general/configuration.rst:55
msgid ""
"Highest precedence is given to overrides given as system properties, see "
"`the HOCON specification "
"<https://github.com/typesafehub/config/blob/master/HOCON.md>`_ (near the "
"bottom). Also noteworthy is that the application configuration—which "
"defaults to ``application``—may be overridden using the ``config.resource`` "
"property (there are more, please refer to the `Config docs "
"<https://github.com/typesafehub/config/blob/master/README.md>`_)."
msgstr ""
"最も高い優先順位は、システムプロパティとして与えられたオーバーライドに与えられます。 `HOCON仕様 "
"<https://github.com/typesafehub/config/blob/master/HOCON.md>`_ "
"(下部)を参照してください。 また、デフォルトで ``application`` になっているアプリケーションの設定は、 "
"``config.resource`` プロパティを使ってオーバーライドすることができます(詳細は、 `Config docs "
"<https://github.com/typesafehub/config/blob/master/README.md>`_ 参照)。"

#: ../../general/configuration.rst:65
msgid ""
"If you are writing an Akka application, keep you configuration in "
"``application.conf`` at the root of the class path. If you are writing an "
"Akka-based library, keep its configuration in ``reference.conf`` at the root"
" of the JAR file."
msgstr ""
"Akkaアプリケーションを作成する場合は、クラスパスのルートにある ``application.conf`` に設定してください。 "
"Akkaベースのライブラリを作成する場合は、jarファイルのルートにある ``reference.conf`` に設定してください。"

#: ../../general/configuration.rst:72
msgid "When using JarJar, OneJar, Assembly or any jar-bundler"
msgstr "JarJar、OneJar、アセンブリまたは任意のjar-bundlerを使用する場合"

#: ../../general/configuration.rst:76
msgid ""
"Akka's configuration approach relies heavily on the notion of every "
"module/jar having its own reference.conf file, all of these will be "
"discovered by the configuration and loaded. Unfortunately this also means "
"that if you put/merge multiple jars into the same jar, you need to merge all"
" the reference.confs as well. Otherwise all defaults will be lost and Akka "
"will not function."
msgstr ""
"Akkaの設定方法は、独自のreference.confファイルを持つすべてのモジュール/ "
"jarの概念に大きく依存しており、これらのすべてが設定によって検出され、読み込まれます。 "
"残念ながら、これは、複数のjarファイルを同じjarファイルに入れてマージすると、すべてのreference.confsもマージする必要があることを意味します。"
" そうしないと、すべてのデフォルト値が失われ、Akkaは機能しません。"

#: ../../general/configuration.rst:83
msgid ""
"If you are using Maven to package your application, you can also make use of"
" the `Apache Maven Shade Plugin <http://maven.apache.org/plugins/maven-"
"shade-plugin>`_ support for `Resource Transformers "
"<http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-"
"transformers.html#AppendingTransformer>`_ to merge all the reference.confs "
"on the build classpath into one."
msgstr ""
"Mavenを使用してアプリケーションをパッケージ化する場合、 `Resource Transformers "
"<http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-"
"transformers.html#AppendingTransformer>`_ の `Apache Maven Shade Plugin "
"<http://maven.apache.org/plugins/maven-shade-plugin>`_ "
"を使用して、ビルドクラスパス上のすべてのreference.confsを1つにマージします。"

#: ../../general/configuration.rst:90
msgid "The plugin configuration might look like this::"
msgstr "プラグインの設定は次のようになります::"

#: ../../general/configuration.rst:128
msgid "Custom application.conf"
msgstr "カスタムのapplication.conf"

#: ../../general/configuration.rst:130
msgid "A custom ``application.conf`` might look like this::"
msgstr "カスタムの ``application.conf`` は次のようになります::"

#: ../../general/configuration.rst:172
msgid "Including files"
msgstr "ファイルのインクルード"

#: ../../general/configuration.rst:174
msgid ""
"Sometimes it can be useful to include another configuration file, for "
"example if you have one ``application.conf`` with all environment "
"independent settings and then override some settings for specific "
"environments."
msgstr ""
"場合によっては、別の設定ファイルをインクルードすると便利な場合もあります。たとえば、すべての環境に依存しない設定の "
"``application.conf`` がある場合、特定の環境設定をオーバーライドします。"

#: ../../general/configuration.rst:177
msgid ""
"Specifying system property with ``-Dconfig.resource=/dev.conf`` will load "
"the ``dev.conf`` file, which includes the ``application.conf``"
msgstr ""
"``-Dconfig.resource=/dev.conf`` でシステムプロパティを指定すると、 ``application.conf`` "
"をインクルードしている ``dev.conf`` ファイルが読み込まれます。"

#: ../../general/configuration.rst:179
msgid "dev.conf:"
msgstr "dev.conf:"

#: ../../general/configuration.rst:189
msgid ""
"More advanced include and substitution mechanisms are explained in the "
"`HOCON <https://github.com/typesafehub/config/blob/master/HOCON.md>`_ "
"specification."
msgstr ""
"より高度なインクルードと置換メカニズムについては、 `HOCON "
"<https://github.com/typesafehub/config/blob/master/HOCON.md>`_ で説明しています。"

#: ../../general/configuration.rst:196
msgid "Logging of Configuration"
msgstr "設定のログ出力"

#: ../../general/configuration.rst:198
msgid ""
"If the system or config property ``akka.log-config-on-start`` is set to "
"``on``, then the complete configuration is logged at INFO level when the "
"actor system is started. This is useful when you are uncertain of what "
"configuration is used."
msgstr ""
"システムまたは設定プロパティーの ``akka.log-config-on-start`` が ``on`` "
"に設定されている場合、アクターシステムの起動時に完全な設定がINFOレベルでログに出力されます。 これは、使用されている設定が不明確な場合に便利です。"

#: ../../general/configuration.rst:202
msgid ""
"If in doubt, you can also easily and nicely inspect configuration objects "
"before or after using them to construct an actor system:"
msgstr ""
"疑念がある場合は、設定オブジェクトを使用する前または使用した後で、設定オブジェクトを簡単かつうまく検査して、アクターシステムを構築することもできます。"

#: ../../general/configuration.rst:227
msgid ""
"The comments preceding every item give detailed information about the origin"
" of the setting (file & line number) plus possible comments which were "
"present, e.g. in the reference configuration. The settings as merged with "
"the reference and parsed by the actor system can be displayed like this:"
msgstr ""
"すべての項目の前のコメントは、元々の設定（ファイルと行番号）と可能性のある設定のコメント(例： 参照設定)です。 "
"参照とマージされ、アクターシステムによって解析された設定は、次のように表示されます。"

#: ../../general/configuration.rst:239
msgid "A Word About ClassLoaders"
msgstr "ClassLoadersについて"

#: ../../general/configuration.rst:241
msgid ""
"In several places of the configuration file it is possible to specify the "
"fully-qualified class name of something to be instantiated by Akka. This is "
"done using Java reflection, which in turn uses a :class:`ClassLoader`. "
"Getting the right one in challenging environments like application "
"containers or OSGi bundles is not always trivial, the current approach of "
"Akka is that each :class:`ActorSystem` implementation stores the current "
"thread’s context class loader (if available, otherwise just its own loader "
"as in ``this.getClass.getClassLoader``) and uses that for all reflective "
"accesses. This implies that putting Akka on the boot class path will yield "
":class:`NullPointerException` from strange places: this is simply not "
"supported."
msgstr ""
"設定ファイルのいくつかの場所では、Akkaがインスタンス化するクラスの完全修飾クラス名を指定することができます。 "
"これは、:class:`ClassLoader` を使用して、Javaリフレクションで行われます。 "
"アプリケーションコンテナやOSGiバンドルのような厳しい環境で適切なものを取得することは、必ずしも自明ではありませんが、Akkaの現在のアプローチは、それぞれの"
" :class:`ActorSystem` 実装が現在のスレッドのコンテキストクラスローダー(有効でなければ "
"``this.getClass.getClassLoader`` のような独自ローダのみ)を格納し、それをすべてのリフレクションアクセスに使用します。 "
"これは、Akkaをブートクラスパスに置くと、奇妙な場所から :class:`NullPointerException` "
"が生成されることを意味します。これは単純にサポートされていません。"

#: ../../general/configuration.rst:254
msgid "Application specific settings"
msgstr "アプリケーション固有の設定"

#: ../../general/configuration.rst:256
msgid ""
"The configuration can also be used for application specific settings. A good"
" practice is to place those settings in an Extension, as described in:"
msgstr "設定は、アプリケーション固有の設定にも使用できます。 以下で説明されているように、これらの設定を拡張機能に配置することをお勧めします。"

#: ../../general/configuration.rst:259
msgid "Scala API: :ref:`extending-akka-scala.settings`"
msgstr "Scala API: :ref:`extending-akka-scala.settings`"

#: ../../general/configuration.rst:260
msgid "Java API: :ref:`extending-akka-java.settings`"
msgstr "Java API: :ref:`extending-akka-java.settings`"

#: ../../general/configuration.rst:263
msgid "Configuring multiple ActorSystem"
msgstr "複数のActorSystemの設定"

#: ../../general/configuration.rst:265
msgid ""
"If you have more than one ``ActorSystem`` (or you're writing a library and "
"have an ``ActorSystem`` that may be separate from the application's) you may"
" want to separate the configuration for each system."
msgstr ""
"複数の  ``ActorSystem`` がある(またはライブラリを書いていて、アプリケーションのものとは別の ``ActorSystem`` "
"が存在する)場合は、各システムの設定を分けたいかもしれません。"

#: ../../general/configuration.rst:270
msgid ""
"Given that ``ConfigFactory.load()`` merges all resources with matching name "
"from the whole class path, it is easiest to utilize that functionality and "
"differentiate actor systems within the hierarchy of the configuration::"
msgstr ""
"``ConfigFactory.load()`` "
"がクラスパス全体の名前と一致するすべてのリソースをマージしているとすれば、その機能を利用し、設定の階層内のアクターシステムを区別するのが最も簡単です::"

#: ../../general/configuration.rst:292
msgid ""
"These two samples demonstrate different variations of the “lift-a-subtree” "
"trick: in the first case, the configuration accessible from within the actor"
" system is this"
msgstr ""
"これらの2つのサンプルは、「サブツリーの持ち上げ」トリックの異なるバリエーションを示しています。1つ目のケースでは、アクターシステム内からアクセス可能な設定は以下のとおりです。"

#: ../../general/configuration.rst:303
msgid ""
"while in the second one, only the “akka” subtree is lifted, with the "
"following result"
msgstr "2つ目は、「akka」サブツリーのみが持ち上げられ、以下の結果が得られます。"

#: ../../general/configuration.rst:315
msgid ""
"The configuration library is really powerful, explaining all features "
"exceeds the scope affordable here. In particular not covered are how to "
"include other configuration files within other files (see a small example at"
" `Including files`_) and copying parts of the configuration tree by way of "
"path substitutions."
msgstr ""
"設定ライブラリは本当に強力で、すべての機能はここで説明する手頃な範囲を超えています。 特に、他のファイルに他の設定ファイルを含める方法( "
"`ファイルのインクルード`_ の小さな例を参照)と、パスの置換によって設定ツリーの一部をコピーする方法がありますが説明しません。"

#: ../../general/configuration.rst:321
msgid ""
"You may also specify and parse the configuration programmatically in other "
"ways when instantiating the ``ActorSystem``."
msgstr "``ActorSystem`` をインスタンス化するときに、他の方法で設定をプログラムで解析することもできます。"

#: ../../general/configuration.rst:328
msgid "Reading configuration from a custom location"
msgstr "カスタムロケーションから設定を読み込む"

#: ../../general/configuration.rst:330
msgid ""
"You can replace or supplement ``application.conf`` either in code or using "
"system properties."
msgstr "``application.conf`` をコードやシステムプロパティを使って置き換える、或いは補うことができます。"

#: ../../general/configuration.rst:333
msgid ""
"If you're using ``ConfigFactory.load()`` (which Akka does by default) you "
"can replace ``application.conf`` by defining ``-Dconfig.resource=whatever``,"
" ``-Dconfig.file=whatever``, or ``-Dconfig.url=whatever``."
msgstr ""
"``ConfigFactory.load()`` (デフォルトでAkkaが使用)を使用している場合、 "
"``-Dconfig.resource=whatever`` 、 ``-Dconfig.file=whatever`` 、 "
"``-Dconfig.url=whatever`` の何れかを定義することで ``application.conf`` を置き換えることができます。"

#: ../../general/configuration.rst:338
msgid ""
"From inside your replacement file specified with ``-Dconfig.resource`` and "
"friends, you can ``include \"application\"`` if you still want to use "
"``application.{conf,json,properties}`` as well.  Settings specified before "
"``include \"application\"`` would be overridden by the included file, while "
"those after would override the included file."
msgstr ""
"`-Dconfig.resource`` 等で指定された置換ファイルの中から、まだ尚 "
"``application.{conf,json,properties}`` を使いたい場合は、 ``include \"application\"``"
" をすることができます。``include \"application\"`` "
"の前に指定された設定はインクルードされたファイルによって上書きされ、後のものはインクルードされたファイルを上書きします。"

#: ../../general/configuration.rst:346
msgid "In code, there are many customization options."
msgstr "コードでは、多くのカスタマイズオプションがあります。"

#: ../../general/configuration.rst:348
msgid ""
"There are several overloads of ``ConfigFactory.load()``; these allow you to "
"specify something to be sandwiched between system properties (which "
"override) and the defaults (from ``reference.conf``), replacing the usual "
"``application.{conf,json,properties}`` and replacing ``-Dconfig.file`` and "
"friends."
msgstr ""
"``ConfigFactory.load()`` のいくつかのオーバーロードがあります。 "
"これらは、システムプロパティ(オーバーライド)とデフォルト(``reference.conf`` による)に挟まれるものを指定し、通常の "
"``application.{conf,json,properties}`` を置き換え、  ``-Dconfig.file`` "
"等を置き換えることができる。"

#: ../../general/configuration.rst:355
msgid ""
"The simplest variant of ``ConfigFactory.load()`` takes a resource basename "
"(instead of ``application``); ``myname.conf``, ``myname.json``, and "
"``myname.properties`` would then be used instead of "
"``application.{conf,json,properties}``."
msgstr ""
"``ConfigFactory.load()`` のもっとも単純な変形はリソースのベースネーム(``application`` の代わり)です。 "
"``application.{conf,json,properties}`` の代わりに ``myname.conf`` 、 "
"``myname.json`` 、 ``myname.properties`` が使われます。"

#: ../../general/configuration.rst:360
msgid ""
"The most flexible variant takes a ``Config`` object, which you can load "
"using any method in ``ConfigFactory``.  For example you could put a config "
"string in code using ``ConfigFactory.parseString()`` or you could make a map"
" and ``ConfigFactory.parseMap()``, or you could load a file."
msgstr ""
"もっとも柔軟な変形は ``ConfigFactory`` のメソッドを使ってロードできる  ``Config`` オブジェクトです。 例えば、 "
"``ConfigFactory.parseString()`` を使ってコードで文字列を設定するか、mapと "
"``ConfigFactory.parseMap()`` を作るか、ファイルを読み込むことができます。"

#: ../../general/configuration.rst:366
msgid ""
"You can also combine your custom config with the usual config, that might "
"look like:"
msgstr "以下のように、カスタム設定を通常の設定と組み合わせることもできます。"

#: ../../general/configuration.rst:372
msgid ""
"When working with ``Config`` objects, keep in mind that there are three "
"\"layers\" in the cake:"
msgstr "``Config``  オブジェクトを扱うとき、ケーキには3つの「層」があることに留意してください："

#: ../../general/configuration.rst:375
msgid "``ConfigFactory.defaultOverrides()`` (system properties)"
msgstr "``ConfigFactory.defaultOverrides()`` (システムプロパティ)"

#: ../../general/configuration.rst:376
msgid "the app's settings"
msgstr "アプリの設定"

#: ../../general/configuration.rst:377
msgid "``ConfigFactory.defaultReference()`` (reference.conf)"
msgstr "``ConfigFactory.defaultReference()`` (reference.conf)"

#: ../../general/configuration.rst:379
msgid ""
"The normal goal is to customize the middle layer while leaving the other two"
" alone."
msgstr "通常の目標は、他の2つだけを残して中間層をカスタマイズすることです。"

#: ../../general/configuration.rst:382
msgid "``ConfigFactory.load()`` loads the whole stack"
msgstr "``ConfigFactory.load()`` はスタック全体を読み込む"

#: ../../general/configuration.rst:383
msgid ""
"the overloads of ``ConfigFactory.load()`` let you specify a different middle"
" layer"
msgstr "``ConfigFactory.load()`` のオーバーロードにより、異なる中間層を指定"

#: ../../general/configuration.rst:385
msgid ""
"the ``ConfigFactory.parse()`` variations load single files or resources"
msgstr "``ConfigFactory.parse()`` の変動は単一のファイルやリソースを読み込む"

#: ../../general/configuration.rst:387
msgid ""
"To stack two layers, use ``override.withFallback(fallback)``; try to keep "
"system props (``defaultOverrides()``) on top and ``reference.conf`` "
"(``defaultReference()``) on the bottom."
msgstr ""
"2つの層をスタックするには、 ``override.withFallback(fallback)`` "
"を使います。システムプロパティ(``defaultOverrides()``) を一番上に、 ``reference.conf`` "
"(``defaultReference()``)を一番下にしてください。"

#: ../../general/configuration.rst:391
msgid ""
"Do keep in mind, you can often just add another ``include`` statement in "
"``application.conf`` rather than writing code. Includes at the top of "
"``application.conf`` will be overridden by the rest of ``application.conf``,"
" while those at the bottom will override the earlier stuff."
msgstr ""
"コードを記述するのではなく、 ``application.conf`` に別の ``include`` 文を追加することができます。 "
"``application.conf`` の先頭のインクルードは ``application.conf`` "
"の残りの部分によって上書きされ、後のものは前のものより優先されます。"

#: ../../general/configuration.rst:398
msgid "Actor Deployment Configuration"
msgstr "アクターデプロイメントの設定"

#: ../../general/configuration.rst:400
msgid ""
"Deployment settings for specific actors can be defined in the "
"``akka.actor.deployment`` section of the configuration. In the deployment "
"section it is possible to define things like dispatcher, mailbox, router "
"settings, and remote deployment. Configuration of these features are "
"described in the chapters detailing corresponding topics. An example may "
"look like this:"
msgstr ""
"特定のアクターのデプロイ設定は、設定の ``akka.actor.deployment`` セクションで定義することができます。 "
"デプロイセクションでは、ディスパッチャ、メールボックス、ルーター設定、リモートデプロイなどを定義することができます。 "
"これらの機能の設定については、対応するトピックを詳しい説明の章で説明しています。 例は次のようになります。"

#: ../../general/configuration.rst:411
msgid ""
"The deployment section for a specific actor is identified by the path of the"
" actor relative to ``/user``."
msgstr "特定アクターのデプロイセクションは、 ``/user`` を基準にしたアクタのパスで識別されます。"

#: ../../general/configuration.rst:414
msgid ""
"You can use asterisks as wildcard matches for the actor path sections, so "
"you could specify: ``/*/sampleActor`` and that would match all "
"``sampleActor`` on that level in the hierarchy. In addition, please note:"
msgstr ""
"アスタリスクをアクターパスセクションのワイルドカードとして使用することができるので、 ``/*/sampleActor`` と階層のそのレベルのすべての"
" ``sampleActor`` にマッチさせることができます。 さらに、次の点に注意してください。"

#: ../../general/configuration.rst:418
msgid ""
"you can also use wildcards in the last position to match all actors at a "
"certain level: ``/someParent/*``"
msgstr "末尾にワイルドカードを使用して、あるレベルのすべてのアクターにマッチさせることもできます: ``/someParent/*``"

#: ../../general/configuration.rst:419
msgid ""
"you can use double-wildcards in the last position to match all child actors "
"and their children recursively: ``/someParent/**``"
msgstr ""
"末尾に2つのワイルドカードを使用して、すべての子アクターとその子を再帰的にマッチさせることができます: ``/someParent/**``"

#: ../../general/configuration.rst:421
msgid ""
"non-wildcard matches always have higher priority to match than wildcards, "
"and single wildcard matches have higher priority than double-wildcards, so: "
"``/foo/bar`` is considered **more specific** than ``/foo/*``, which is "
"considered **more specific** than ``/foo/**``. Only the highest priority "
"match is used"
msgstr ""
"非ワイルドカードマッチは常にワイルドカードより優先順位が高く、ワイルドカードマッチはダブルワイルドカードより優先度が高いので、 ``/foo/bar``"
" は ``/foo/**`` **より特定のもの** とみなされる ``/foo/*`` **より特定のもの** とみなされます。 "
"最も高い優先順位の一致のみが使用されます。"

#: ../../general/configuration.rst:424
msgid ""
"wildcards **cannot** be used to partially match section, like this: "
"``/foo*/bar``, ``/f*o/bar`` etc."
msgstr ""
"ワイルドカード**は ``/foo*/bar`` 、 ``/f*o/bar`` などのように部分的にセクションにマッチさせることは **できません** "
"。"

#: ../../general/configuration.rst:427
msgid "Double-wildcards can only be placed in the last position."
msgstr "ダブルワイルドカードは末尾にのみ置くことができます。"

#: ../../general/configuration.rst:430
msgid "Listing of the Reference Configuration"
msgstr "参考設定の一覧"

#: ../../general/configuration.rst:432
msgid ""
"Each Akka module has a reference configuration file with the default values."
msgstr "各Akkaモジュールには、デフォルト値を持つ参考設定ファイルがあります。"

#: ../../general/configuration.rst:437
msgid "akka-actor"
msgstr "akka-actor"

#: ../../general/configuration.rst:445
msgid "akka-agent"
msgstr "akka-agent"

#: ../../general/configuration.rst:453
msgid "akka-camel"
msgstr "akka-camel"

#: ../../general/configuration.rst:461
msgid "akka-cluster"
msgstr "akka-cluster"

#: ../../general/configuration.rst:469
msgid "akka-multi-node-testkit"
msgstr "akka-multi-node-testkit"

#: ../../general/configuration.rst:477
msgid "akka-persistence"
msgstr "akka-persistence"

#: ../../general/configuration.rst:485
msgid "akka-remote"
msgstr "akka-remote"

#: ../../general/configuration.rst:495
msgid "akka-remote (artery)"
msgstr "akka-remote (artery)"

#: ../../general/configuration.rst:504
msgid "akka-testkit"
msgstr "akka-testkit"

#: ../../general/configuration.rst:511
msgid "akka-cluster-metrics ~~~~~~~~~~~~--------"
msgstr "akka-cluster-metrics ~~~~~~~~~~~~--------"

#: ../../general/configuration.rst:519
msgid "akka-cluster-tools ~~~~~~~~~~~~------"
msgstr "akka-cluster-tools ~~~~~~~~~~~~------"

#: ../../general/configuration.rst:527
msgid "akka-cluster-sharding ~~~~~~~~~~~~---------"
msgstr "akka-cluster-sharding ~~~~~~~~~~~~---------"

#: ../../general/configuration.rst:535
msgid "akka-distributed-data ~~~~~~~~~~~~---------"
msgstr "akka-distributed-data ~~~~~~~~~~~~---------"
