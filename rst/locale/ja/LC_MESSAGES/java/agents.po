# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../java/agents.rst:5
msgid "Agents"
msgstr ""

#: ../../java/agents.rst:7
msgid "Agents in Akka are inspired by `agents in Clojure`_."
msgstr ""

#: ../../java/agents.rst:11
msgid ""
"Agents provide asynchronous change of individual locations. Agents are "
"bound to a single storage location for their lifetime, and only allow "
"mutation of that location (to a new state) to occur as a result of an "
"action. Update actions are functions that are asynchronously applied to "
"the Agent's state and whose return value becomes the Agent's new state. "
"The state of an Agent should be immutable."
msgstr ""

#: ../../java/agents.rst:17
msgid ""
"While updates to Agents are asynchronous, the state of an Agent is always"
" immediately available for reading by any thread (using ``get``) without "
"any messages."
msgstr ""

#: ../../java/agents.rst:20
msgid ""
"Agents are reactive. The update actions of all Agents get interleaved "
"amongst threads in an ``ExecutionContext``. At any point in time, at most"
" one ``send`` action for each Agent is being executed. Actions dispatched"
" to an agent from another thread will occur in the order they were sent, "
"potentially interleaved with actions dispatched to the same agent from "
"other threads."
msgstr ""

#: ../../java/agents.rst:29
msgid "Creating Agents"
msgstr ""

#: ../../java/agents.rst:31
msgid ""
"Agents are created by invoking ``new Agent<ValueType>(value, "
"executionContext)`` â€“ passing in the Agent's initial value and providing "
"an ``ExecutionContext`` to be used for it:"
msgstr ""

#: ../../java/agents.rst:39
msgid "Reading an Agent's value"
msgstr ""

#: ../../java/agents.rst:41
msgid ""
"Agents can be dereferenced (you can get an Agent's value) by invoking the"
" Agent with ``get()`` like this:"
msgstr ""

#: ../../java/agents.rst:47
msgid ""
"Reading an Agent's current value does not involve any message passing and"
" happens immediately. So while updates to an Agent are asynchronous, "
"reading the state of an Agent is synchronous."
msgstr ""

#: ../../java/agents.rst:51
msgid ""
"You can also get a ``Future`` to the Agents value, that will be completed"
" after the currently queued updates have completed:"
msgstr ""

#: ../../java/agents.rst:58
msgid "See :ref:`futures-java` for more information on ``Futures``."
msgstr ""

#: ../../java/agents.rst:61
msgid "Updating Agents (send & alter)"
msgstr ""

#: ../../java/agents.rst:63
msgid ""
"You update an Agent by sending a function (``akka.dispatch.Mapper``) that"
" transforms the current value or by sending just a new value. The Agent "
"will apply the new value or function atomically and asynchronously. The "
"update is done in a fire-forget manner and you are only guaranteed that "
"it will be applied. There is no guarantee of when the update will be "
"applied but dispatches to an Agent from a single thread will occur in "
"order. You apply a value or a function by invoking the ``send`` function."
msgstr ""

#: ../../java/agents.rst:75
msgid ""
"You can also dispatch a function to update the internal state but on its "
"own thread. This does not use the reactive thread pool and can be used "
"for long-running or blocking operations. You do this with the ``sendOff``"
" method. Dispatches using either ``sendOff`` or ``send`` will still be "
"executed in order."
msgstr ""

#: ../../java/agents.rst:85
msgid ""
"All ``send`` methods also have a corresponding ``alter`` method that "
"returns a ``Future``. See :ref:`futures-java` for more information on "
"``Futures``."
msgstr ""

#: ../../java/agents.rst:97
msgid "Configuration"
msgstr ""

#: ../../java/agents.rst:99
msgid ""
"There are several configuration properties for the agents module, please "
"refer to the :ref:`reference configuration <config-akka-agent>`."
msgstr ""

#: ../../java/agents.rst:103
msgid "Deprecated Transactional Agents"
msgstr ""

#: ../../java/agents.rst:105
msgid ""
"Agents participating in enclosing STM transaction is a deprecated feature"
" in 2.3."
msgstr ""

#: ../../java/agents.rst:107
msgid ""
"If an Agent is used within an enclosing ``Scala STM transaction``, then "
"it will participate in that transaction. If you send to an Agent within a"
" transaction then the dispatch to the Agent will be held until that "
"transaction commits, and discarded if the transaction is aborted."
msgstr ""

