# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../java/testing.rst:5
msgid "Testing Actor Systems"
msgstr ""

#: ../../java/testing.rst:7
msgid ""
"As with any piece of software, automated tests are a very important part of "
"the development cycle. The actor model presents a different view on how "
"units of code are delimited and how they interact, which has an influence on"
" how to perform tests."
msgstr ""

#: ../../java/testing.rst:12
msgid ""
"Akka comes with a dedicated module :mod:`akka-testkit` for supporting tests "
"at different levels, which fall into two clearly distinct categories:"
msgstr ""

#: ../../java/testing.rst:15
msgid ""
"Testing isolated pieces of code without involving the actor model, meaning "
"without multiple threads; this implies completely deterministic behavior "
"concerning the ordering of events and no concurrency concerns and will be "
"called **Unit Testing** in the following."
msgstr ""

#: ../../java/testing.rst:19
msgid ""
"Testing (multiple) encapsulated actors including multi-threaded scheduling; "
"this implies non-deterministic order of events but shielding from "
"concurrency concerns by the actor model and will be called **Integration "
"Testing** in the following."
msgstr ""

#: ../../java/testing.rst:24
msgid ""
"There are of course variations on the granularity of tests in both "
"categories, where unit testing reaches down to white-box tests and "
"integration testing can encompass functional tests of complete actor "
"networks. The important distinction lies in whether concurrency concerns are"
" part of the test or not. The tools offered are described in detail in the "
"following sections."
msgstr ""

#: ../../java/testing.rst:32
msgid "Be sure to add the module :mod:`akka-testkit` to your dependencies."
msgstr ""

#: ../../java/testing.rst:35
msgid "Synchronous Unit Testing with :class:`TestActorRef`"
msgstr ""

#: ../../java/testing.rst:37
msgid ""
"Testing the business logic inside :class:`Actor` classes can be divided into"
" two parts: first, each atomic operation must work in isolation, then "
"sequences of incoming events must be processed correctly, even in the "
"presence of some possible variability in the ordering of events. The former "
"is the primary use case for single-threaded unit testing, while the latter "
"can only be verified in integration tests."
msgstr ""

#: ../../java/testing.rst:44
msgid ""
"Normally, the :class:`ActorRef` shields the underlying :class:`Actor` "
"instance from the outside, the only communications channel is the actor's "
"mailbox. This restriction is an impediment to unit testing, which led to the"
" inception of the :class:`TestActorRef`. This special type of reference is "
"designed specifically for test purposes and allows access to the actor in "
"two ways: either by obtaining a reference to the underlying actor instance, "
"or by invoking or querying the actor's behaviour (:meth:`receive`). Each one"
" warrants its own section below."
msgstr ""

#: ../../java/testing.rst:54
msgid ""
"It is highly recommended to stick to traditional behavioural testing (using "
"messaging to ask the Actor to reply with the state you want to run "
"assertions against), instead of using ``TestActorRef`` whenever possible."
msgstr ""

#: ../../java/testing.rst:59
msgid ""
"Due to the synchronous nature of ``TestActorRef`` it will **not** work with "
"some support traits that Akka provides as they require asynchronous "
"behaviours to function properly. Examples of traits that do not mix well "
"with test actor refs are :ref:`PersistentActor <event-sourcing-java>` and "
":ref:`AtLeastOnceDelivery <at-least-once-delivery-java>` provided by "
":ref:`Akka Persistence <persistence-java>`."
msgstr ""

#: ../../java/testing.rst:65
msgid "Obtaining a Reference to an :class:`Actor`"
msgstr ""

#: ../../java/testing.rst:67
msgid ""
"Having access to the actual :class:`Actor` object allows application of all "
"traditional unit testing techniques on the contained methods. Obtaining a "
"reference is done like this:"
msgstr ""

#: ../../java/testing.rst:73
msgid ""
"Since :class:`TestActorRef` is generic in the actor type it returns the "
"underlying actor with its proper static type. From this point on you may "
"bring any unit testing tool to bear on your actor as usual."
msgstr ""

#: ../../java/testing.rst:78
msgid "Testing the Actor's Behavior"
msgstr ""

#: ../../java/testing.rst:80
msgid ""
"When the dispatcher invokes the processing behavior of an actor on a "
"message, it actually calls :meth:`apply` on the current behavior registered "
"for the actor. This starts out with the return value of the declared "
":meth:`receive` method, but it may also be changed using :meth:`become` and "
":meth:`unbecome` in response to external messages. All of this contributes "
"to the overall actor behavior and it does not lend itself to easy testing on"
" the :class:`Actor` itself. Therefore the :class:`TestActorRef` offers a "
"different mode of operation to complement the :class:`Actor` testing: it "
"supports all operations also valid on normal :class:`ActorRef`. Messages "
"sent to the actor are processed synchronously on the current thread and "
"answers may be sent back as usual. This trick is made possible by the "
":class:`CallingThreadDispatcher` described below (see "
"`CallingThreadDispatcher`_); this dispatcher is set implicitly for any actor"
" instantiated into a :class:`TestActorRef`."
msgstr ""

#: ../../java/testing.rst:96
msgid ""
"As the :class:`TestActorRef` is a subclass of :class:`LocalActorRef` with a "
"few special extras, also aspects like supervision and restarting work "
"properly, but beware that execution is only strictly synchronous as long as "
"all actors involved use the :class:`CallingThreadDispatcher`. As soon as you"
" add elements which include more sophisticated scheduling you leave the "
"realm of unit testing as you then need to think about asynchronicity again "
"(in most cases the problem will be to wait until the desired effect had a "
"chance to happen)."
msgstr ""

#: ../../java/testing.rst:104
msgid ""
"One more special aspect which is overridden for single-threaded tests is the"
" :meth:`receiveTimeout`, as including that would entail asynchronous queuing"
" of :obj:`ReceiveTimeout` messages, violating the synchronous contract."
msgstr ""

#: ../../java/testing.rst:110
msgid ""
"To summarize: :class:`TestActorRef` overwrites two fields: it sets the "
"dispatcher to :obj:`CallingThreadDispatcher.global` and it sets the "
":obj:`receiveTimeout` to None."
msgstr ""

#: ../../java/testing.rst:115
msgid "The Way In-Between: Expecting Exceptions"
msgstr ""

#: ../../java/testing.rst:117
msgid ""
"If you want to test the actor behavior, including hotswapping, but without "
"involving a dispatcher and without having the :class:`TestActorRef` swallow "
"any thrown exceptions, then there is another mode available for you: just "
"use the :meth:`receive` method on :class:`TestActorRef`, which will be "
"forwarded to the underlying actor:"
msgstr ""

#: ../../java/testing.rst:126
msgid "Use Cases"
msgstr ""

#: ../../java/testing.rst:128
msgid ""
"You may of course mix and match both modi operandi of :class:`TestActorRef` "
"as suits your test needs:"
msgstr ""

#: ../../java/testing.rst:131
msgid ""
"one common use case is setting up the actor into a specific internal state "
"before sending the test message"
msgstr ""

#: ../../java/testing.rst:133
msgid ""
"another is to verify correct internal state transitions after having sent "
"the test message"
msgstr ""

#: ../../java/testing.rst:136
msgid ""
"Feel free to experiment with the possibilities, and if you find useful "
"patterns, don't hesitate to let the Akka forums know about them! Who knows, "
"common operations might even be worked into nice DSLs."
msgstr ""

#: ../../java/testing.rst:143
msgid "Asynchronous Integration Testing with :class:`JavaTestKit`"
msgstr ""

#: ../../java/testing.rst:145
msgid ""
"When you are reasonably sure that your actor's business logic is correct, "
"the next step is verifying that it works correctly within its intended "
"environment. The definition of the environment depends of course very much "
"on the problem at hand and the level at which you intend to test, ranging "
"for functional/integration tests to full system tests. The minimal setup "
"consists of the test procedure, which provides the desired stimuli, the "
"actor under test, and an actor receiving replies.  Bigger systems replace "
"the actor under test with a network of actors, apply stimuli at varying "
"injection points and arrange results to be sent from different emission "
"points, but the basic principle stays the same in that a single procedure "
"drives the test."
msgstr ""

#: ../../java/testing.rst:156
msgid ""
"The :class:`JavaTestKit` class contains a collection of tools which makes "
"this common task easy."
msgstr ""

#: ../../java/testing.rst:161
msgid ""
"The :class:`JavaTestKit` contains an actor named :obj:`testActor` which is "
"the entry point for messages to be examined with the various "
"``expectMsg...`` assertions detailed below. The test actor’s reference is "
"obtained using the :meth:`getRef()` method as demonstrated above.  The "
":obj:`testActor` may also be passed to other actors as usual, usually "
"subscribing it as notification listener. There is a whole set of examination"
" methods, e.g. receiving all consecutive messages matching certain criteria,"
" receiving a whole sequence of fixed messages or classes, receiving nothing "
"for some time, etc."
msgstr ""

#: ../../java/testing.rst:170
msgid ""
"The ActorSystem passed in to the constructor of JavaTestKit is accessible "
"via the :meth:`getSystem()` method."
msgstr ""

#: ../../java/testing.rst:175
msgid ""
"Remember to shut down the actor system after the test is finished (also in "
"case of failure) so that all actors—including the test actor—are stopped."
msgstr ""

#: ../../java/testing.rst:179
msgid "Built-In Assertions"
msgstr ""

#: ../../java/testing.rst:181
msgid ""
"The above mentioned :meth:`expectMsgEquals` is not the only method for "
"formulating assertions concerning received messages, the full set is this:"
msgstr ""

#: ../../java/testing.rst:186
msgid ""
"In these examples, the maximum durations you will find mentioned below are "
"left out, in which case they use the default value from configuration item "
"``akka.test.single-expect-default`` which itself defaults to 3 seconds (or "
"they obey the innermost enclosing :class:`Within` as detailed :ref:`below "
"<JavaTestKit.within>`). The full signatures are:"
msgstr ""

#: ../../java/testing.rst:192
msgid ":meth:`public <T> T expectMsgEquals(Duration max, T msg)`"
msgstr ""

#: ../../java/testing.rst:194
msgid ""
"The given message object must be received within the specified time; the "
"object will be returned."
msgstr ""

#: ../../java/testing.rst:197
msgid ":meth:`public Object expectMsgAnyOf(Duration max, Object... msg)`"
msgstr ""

#: ../../java/testing.rst:199
msgid ""
"An object must be received within the given time, and it must be equal "
"(compared with ``equals()``) to at least one of the passed reference "
"objects; the received object will be returned."
msgstr ""

#: ../../java/testing.rst:203
msgid ":meth:`public Object[] expectMsgAllOf(Duration max, Object... msg)`"
msgstr ""

#: ../../java/testing.rst:205
msgid ""
"A number of objects matching the size of the supplied object array must be "
"received within the given time, and for each of the given objects there must"
" exist at least one among the received ones which equals it (compared with "
"``equals()``). The full sequence of received objects is returned in the "
"order received."
msgstr ""

#: ../../java/testing.rst:211
msgid ":meth:`public <T> T expectMsgClass(Duration max, Class<T> c)`"
msgstr ""

#: ../../java/testing.rst:213
msgid ""
"An object which is an instance of the given :class:`Class` must be received "
"within the allotted time frame; the object will be returned. Note that this "
"does a conformance check, if you need the class to be equal you need to "
"verify that afterwards."
msgstr ""

#: ../../java/testing.rst:218
msgid ""
":meth:`public <T> T expectMsgAnyClassOf(Duration max, Class<? extends T>... "
"c)`"
msgstr ""

#: ../../java/testing.rst:220
msgid ""
"An object must be received within the given time, and it must be an instance"
" of at least one of the supplied :class:`Class` objects; the received object"
" will be returned. Note that this does a conformance check, if you need the "
"class to be equal you need to verify that afterwards."
msgstr ""

#: ../../java/testing.rst:227
msgid ""
"Because of a limitation in Java’s type system it may be necessary to add "
"``@SuppressWarnings(\"unchecked\")`` when using this method."
msgstr ""

#: ../../java/testing.rst:230
msgid ":meth:`public void expectNoMsg(Duration max)`"
msgstr ""

#: ../../java/testing.rst:232
msgid ""
"No message must be received within the given time. This also fails if a "
"message has been received before calling this method which has not been "
"removed from the queue using one of the other methods."
msgstr ""

#: ../../java/testing.rst:236
msgid ":meth:`Object[] receiveN(int n, Duration max)`"
msgstr ""

#: ../../java/testing.rst:238
msgid ""
"``n`` messages must be received within the given time; the received messages"
" are returned."
msgstr ""

#: ../../java/testing.rst:241
msgid ""
"For cases which require more refined conditions there are constructs which "
"take code blocks:"
msgstr ""

#: ../../java/testing.rst:244
msgid "**ExpectMsg<T>**"
msgstr ""

#: ../../java/testing.rst:248
msgid ""
"The :meth:`match(Object in)` method will be evaluated once a message has "
"been received within the allotted time (which may be given as constructor "
"argument). If it throws ``noMatch()`` (where it is sufficient to call that "
"method; the ``throw`` keyword is only needed in cases where the compiler "
"would otherwise complain about wrong return types—Java is lacking Scala’s "
"notion of a type which signifies “will not ever return normally”), then the "
"expectation fails with an :class:`AssertionError`, otherwise the matched and"
" possibly transformed object is stored for retrieval using the :meth:`get()`"
" method."
msgstr ""

#: ../../java/testing.rst:258
msgid "**ReceiveWhile<T>**"
msgstr ""

#: ../../java/testing.rst:262
msgid ""
"This construct works like ExpectMsg, but it continually collects messages as"
" long as they match the criteria, and it does not fail when a non-matching "
"one is encountered. Collecting messages also ends when the time is up, when "
"too much time passes between messages or when enough messages have been "
"received."
msgstr ""

#: ../../java/testing.rst:271
msgid ""
"The need to specify the ``String`` result type twice results from the need "
"to create a correctly typed array and Java’s inability to infer the class’s "
"type argument."
msgstr ""

#: ../../java/testing.rst:275
msgid "**AwaitCond**"
msgstr ""

#: ../../java/testing.rst:279
msgid ""
"This general construct is not connected with the test kit’s message "
"reception, the embedded condition can compute the boolean result from "
"anything in scope."
msgstr ""

#: ../../java/testing.rst:283
msgid "**AwaitAssert**"
msgstr ""

#: ../../java/testing.rst:287
msgid ""
"This general construct is not connected with the test kit’s message "
"reception, the embedded assert can check anything in scope."
msgstr ""

#: ../../java/testing.rst:290
msgid ""
"There are also cases where not all messages sent to the test kit are "
"actually relevant to the test, but removing them would mean altering the "
"actors under test. For this purpose it is possible to ignore certain "
"messages:"
msgstr ""

#: ../../java/testing.rst:294
msgid "**IgnoreMsg**"
msgstr ""

#: ../../java/testing.rst:299
msgid "Expecting Log Messages"
msgstr ""

#: ../../java/testing.rst:301
msgid ""
"Since an integration test does not allow to the internal processing of the "
"participating actors, verifying expected exceptions cannot be done directly."
" Instead, use the logging system for this purpose: replacing the normal "
"event handler with the :class:`TestEventListener` and using an "
":class:`EventFilter` allows assertions on log messages, including those "
"which are generated by exceptions:"
msgstr ""

#: ../../java/testing.rst:310
msgid ""
"If a number of occurrences is specific—as demonstrated above—then ``exec()``"
" will block until that number of matching messages have been received or the"
" timeout configured in ``akka.test.filter-leeway`` is used up (time starts "
"counting after the ``run()`` method returns). In case of a timeout the test "
"fails."
msgstr ""

#: ../../java/testing.rst:318
msgid ""
"Be sure to exchange the default logger with the :class:`TestEventListener` "
"in your ``application.conf`` to enable this function::"
msgstr ""

#: ../../java/testing.rst:327
msgid "Timing Assertions"
msgstr ""

#: ../../java/testing.rst:329
msgid ""
"Another important part of functional testing concerns timing: certain events"
" must not happen immediately (like a timer), others need to happen before a "
"deadline. Therefore, all examination methods accept an upper time limit "
"within the positive or negative result must be obtained. Lower time limits "
"need to be checked external to the examination, which is facilitated by a "
"new construct for managing time constraints:"
msgstr ""

#: ../../java/testing.rst:338
msgid ""
"The block in :meth:`Within.run()` must complete after a :ref:`Duration` "
"which is between :obj:`min` and :obj:`max`, where the former defaults to "
"zero. The deadline calculated by adding the :obj:`max` parameter to the "
"block's start time is implicitly available within the block to all "
"examination methods, if you do not specify it, it is inherited from the "
"innermost enclosing :meth:`within` block."
msgstr ""

#: ../../java/testing.rst:345
msgid ""
"It should be noted that if the last message-receiving assertion of the block"
" is :meth:`expectNoMsg` or :meth:`receiveWhile`, the final check of the "
":meth:`within` is skipped in order to avoid false positives due to wake-up "
"latencies. This means that while individual contained assertions still use "
"the maximum time bound, the overall block may take arbitrarily longer in "
"this case."
msgstr ""

#: ../../java/testing.rst:353
msgid ""
"All times are measured using ``System.nanoTime``, meaning that they describe"
" wall time, not CPU time or system time."
msgstr ""

#: ../../java/testing.rst:357
msgid "Accounting for Slow Test Systems"
msgstr ""

#: ../../java/testing.rst:359
msgid ""
"The tight timeouts you use during testing on your lightning-fast notebook "
"will invariably lead to spurious test failures on the heavily loaded Jenkins"
" server (or similar). To account for this situation, all maximum durations "
"are internally scaled by a factor taken from the :ref:`configuration`, "
"``akka.test.timefactor``, which defaults to 1."
msgstr ""

#: ../../java/testing.rst:365
msgid ""
"You can scale other durations with the same factor by using ``dilated`` "
"method in :class:`JavaTestKit`."
msgstr ""

#: ../../java/testing.rst:371
msgid "Using Multiple Probe Actors"
msgstr ""

#: ../../java/testing.rst:373
msgid ""
"When the actors under test are supposed to send various messages to "
"different destinations, it may be difficult distinguishing the message "
"streams arriving at the :obj:`testActor` when using the :class:`JavaTestKit`"
" as shown until now. Another approach is to use it for creation of simple "
"probe actors to be inserted in the message flows. The functionality is best "
"explained using a small example:"
msgstr ""

#: ../../java/testing.rst:382
msgid ""
"This simple test verifies an equally simple Forwarder actor by injecting a "
"probe as the forwarder’s target.  Another example would be two actors A and "
"B which collaborate by A sending messages to B. In order to verify this "
"message flow, a :class:`TestProbe` could be inserted as target of A, using "
"the forwarding capabilities or auto-pilot described below to include a real "
"B in the test setup."
msgstr ""

#: ../../java/testing.rst:389
msgid ""
"If you have many test probes, you can name them to get meaningful actor "
"names in test logs and assertions:"
msgstr ""

#: ../../java/testing.rst:394
msgid ""
"Probes may also be equipped with custom assertions to make your test code "
"even more concise and clear:"
msgstr ""

#: ../../java/testing.rst:400
msgid ""
"You have complete flexibility here in mixing and matching the "
":class:`JavaTestKit` facilities with your own checks and choosing an "
"intuitive name for it. In real life your code will probably be a bit more "
"complicated than the example given above; just use the power!"
msgstr ""

#: ../../java/testing.rst:407
msgid ""
"Any message send from a ``TestProbe`` to another actor which runs on the "
"CallingThreadDispatcher runs the risk of dead-lock, if that other actor "
"might also send to this probe. The implementation of :meth:`TestProbe.watch`"
" and :meth:`TestProbe.unwatch` will also send a message to the watchee, "
"which means that it is dangerous to try watching e.g. :class:`TestActorRef` "
"from a :meth:`TestProbe`."
msgstr ""

#: ../../java/testing.rst:415
msgid "Watching Other Actors from Probes"
msgstr ""

#: ../../java/testing.rst:417
msgid ""
"A :class:`JavaTestKit` can register itself for DeathWatch of any other "
"actor:"
msgstr ""

#: ../../java/testing.rst:423
msgid "Replying to Messages Received by Probes"
msgstr ""

#: ../../java/testing.rst:425
msgid ""
"The probe stores the sender of the last dequeued message (i.e. after its "
"``expectMsg*`` reception), which may be retrieved using the "
":meth:`getLastSender()` method. This information can also implicitly be used"
" for having the probe reply to the last received message:"
msgstr ""

#: ../../java/testing.rst:433
msgid "Forwarding Messages Received by Probes"
msgstr ""

#: ../../java/testing.rst:435
msgid ""
"The probe can also forward a received message (i.e. after its ``expectMsg*``"
" reception), retaining the original sender:"
msgstr ""

#: ../../java/testing.rst:441
msgid "Auto-Pilot"
msgstr ""

#: ../../java/testing.rst:443
msgid ""
"Receiving messages in a queue for later inspection is nice, but in order to "
"keep a test running and verify traces later you can also install an "
":class:`AutoPilot` in the participating test probes (actually in any "
":class:`TestKit`) which is invoked before enqueueing to the inspection "
"queue. This code can be used to forward messages, e.g. in a chain ``A --> "
"Probe --> B``, as long as a certain protocol is obeyed."
msgstr ""

#: ../../java/testing.rst:452
msgid ""
"The :meth:`run` method must return the auto-pilot for the next message, "
"wrapped in an :class:`Option`; setting it to :obj:`None` terminates the "
"auto-pilot."
msgstr ""

#: ../../java/testing.rst:456
msgid "Caution about Timing Assertions"
msgstr ""

#: ../../java/testing.rst:458
msgid ""
"The behavior of :meth:`within` blocks when using test probes might be "
"perceived as counter-intuitive: you need to remember that the nicely scoped "
"deadline as described :ref:`above <JavaTestKit.within>` is local to each "
"probe. Hence, probes do not react to each other's deadlines or to the "
"deadline set in an enclosing :class:`JavaTestKit` instance:"
msgstr ""

#: ../../java/testing.rst:466
msgid "Here, the ``expectMsgEquals`` call will use the default timeout."
msgstr ""

#: ../../java/testing.rst:469
msgid "Testing parent-child relationships"
msgstr ""

#: ../../java/testing.rst:471
msgid ""
"The parent of an actor is always the actor that created it. At times this "
"leads to a coupling between the two that may not be straightforward to test."
" There are several approaches to improve testability of a child actor that "
"needs to refer to its parent:"
msgstr ""

#: ../../java/testing.rst:476
msgid "when creating a child, pass an explicit reference to its parent"
msgstr ""

#: ../../java/testing.rst:477
msgid "create the child with a ``TestProbe`` as parent"
msgstr ""

#: ../../java/testing.rst:478
msgid "create a fabricated parent when testing"
msgstr ""

#: ../../java/testing.rst:480
msgid ""
"Conversely, a parent's binding to its child can be lessened as follows:"
msgstr ""

#: ../../java/testing.rst:482
msgid "when creating a parent, tell the parent how to create its child"
msgstr ""

#: ../../java/testing.rst:484
msgid ""
"For example, the structure of the code you want to test may follow this "
"pattern:"
msgstr ""

#: ../../java/testing.rst:489
msgid "Introduce child to its parent"
msgstr ""

#: ../../java/testing.rst:491
msgid ""
"The first option is to avoid use of the :meth:`context.parent` function and "
"create a child with a custom parent by passing an explicit reference to its "
"parent instead."
msgstr ""

#: ../../java/testing.rst:497
msgid "Create the child using JavaTestKit"
msgstr ""

#: ../../java/testing.rst:499
msgid ""
"The ``JavaTestKit`` class can in fact create actors that will run with the "
"test probe as parent. This will cause any messages the the child actor sends"
" to `context().getParent()` to end up in the test probe."
msgstr ""

#: ../../java/testing.rst:506
msgid "Using a fabricated parent"
msgstr ""

#: ../../java/testing.rst:508
msgid ""
"If you prefer to avoid modifying the child constructor you can create a "
"fabricated parent in your test. This, however, does not enable you to test "
"the parent actor in isolation."
msgstr ""

#: ../../java/testing.rst:516
msgid "Externalize child making from the parent"
msgstr ""

#: ../../java/testing.rst:518
msgid ""
"Alternatively, you can tell the parent how to create its child. There are "
"two ways to do this: by giving it a :class:`Props` object or by giving it a "
"function which takes care of creating the child actor:"
msgstr ""

#: ../../java/testing.rst:524
msgid ""
"Creating the :class:`Actor` is straightforward and the function may look "
"like this in your test code:"
msgstr ""

#: ../../java/testing.rst:528
msgid "And like this in your application code:"
msgstr ""

#: ../../java/testing.rst:533
msgid ""
"Which of these methods is the best depends on what is most important to "
"test. The most generic option is to create the parent actor by passing it a "
"function that is responsible for the Actor creation, but using TestProbe or "
"having a fabricated parent is often sufficient."
msgstr ""

#: ../../java/testing.rst:540
msgid "CallingThreadDispatcher"
msgstr ""

#: ../../java/testing.rst:542
msgid ""
"The :class:`CallingThreadDispatcher` serves good purposes in unit testing, "
"as described above, but originally it was conceived in order to allow "
"contiguous stack traces to be generated in case of an error. As this special"
" dispatcher runs everything which would normally be queued directly on the "
"current thread, the full history of a message's processing chain is recorded"
" on the call stack, so long as all intervening actors run on this "
"dispatcher."
msgstr ""

#: ../../java/testing.rst:550
msgid "How to use it"
msgstr ""

#: ../../java/testing.rst:552
msgid "Just set the dispatcher as you normally would:"
msgstr ""

#: ../../java/testing.rst:557
msgid "How it works"
msgstr ""

#: ../../java/testing.rst:559
msgid ""
"When receiving an invocation, the :class:`CallingThreadDispatcher` checks "
"whether the receiving actor is already active on the current thread. The "
"simplest example for this situation is an actor which sends a message to "
"itself. In this case, processing cannot continue immediately as that would "
"violate the actor model, so the invocation is queued and will be processed "
"when the active invocation on that actor finishes its processing; thus, it "
"will be processed on the calling thread, but simply after the actor finishes"
" its previous work. In the other case, the invocation is simply processed "
"immediately on the current thread. Futures scheduled via this dispatcher are"
" also executed immediately."
msgstr ""

#: ../../java/testing.rst:570
msgid ""
"This scheme makes the :class:`CallingThreadDispatcher` work like a general "
"purpose dispatcher for any actors which never block on external events."
msgstr ""

#: ../../java/testing.rst:573
msgid ""
"In the presence of multiple threads it may happen that two invocations of an"
" actor running on this dispatcher happen on two different threads at the "
"same time. In this case, both will be processed directly on their respective"
" threads, where both compete for the actor's lock and the loser has to wait."
" Thus, the actor model is left intact, but the price is loss of concurrency "
"due to limited scheduling. In a sense this is equivalent to traditional "
"mutex style concurrency."
msgstr ""

#: ../../java/testing.rst:581
msgid ""
"The other remaining difficulty is correct handling of suspend and resume: "
"when an actor is suspended, subsequent invocations will be queued in thread-"
"local queues (the same ones used for queuing in the normal case). The call "
"to :meth:`resume`, however, is done by one specific thread, and all other "
"threads in the system will probably not be executing this specific actor, "
"which leads to the problem that the thread-local queues cannot be emptied by"
" their native threads. Hence, the thread calling :meth:`resume` will collect"
" all currently queued invocations from all threads into its own queue and "
"process them."
msgstr ""

#: ../../java/testing.rst:591
msgid "Limitations"
msgstr ""

#: ../../java/testing.rst:595
msgid ""
"In case the CallingThreadDispatcher is used for top-level actors, but "
"without going through TestActorRef, then there is a time window during which"
" the actor is awaiting construction by the user guardian actor. Sending "
"messages to the actor during this time period will result in them being "
"enqueued and then executed on the guardian’s thread instead of the caller’s "
"thread. To avoid this, use TestActorRef."
msgstr ""

#: ../../java/testing.rst:602
msgid ""
"If an actor's behavior blocks on a something which would normally be "
"affected by the calling actor after having sent the message, this will "
"obviously dead-lock when using this dispatcher. This is a common scenario in"
" actor tests based on :class:`CountDownLatch` for synchronization:"
msgstr ""

#: ../../java/testing.rst:614
msgid ""
"The example would hang indefinitely within the message processing initiated "
"on the second line and never reach the fourth line, which would unblock it "
"on a normal dispatcher."
msgstr ""

#: ../../java/testing.rst:618
msgid ""
"Thus, keep in mind that the :class:`CallingThreadDispatcher` is not a "
"general-purpose replacement for the normal dispatchers. On the other hand it"
" may be quite useful to run your actor network on it for testing, because if"
" it runs without dead-locking chances are very high that it will not dead-"
"lock in production."
msgstr ""

#: ../../java/testing.rst:626
msgid ""
"The above sentence is unfortunately not a strong guarantee, because your "
"code might directly or indirectly change its behavior when running on a "
"different dispatcher. If you are looking for a tool to help you debug dead-"
"locks, the :class:`CallingThreadDispatcher` may help with certain error "
"scenarios, but keep in mind that it has may give false negatives as well as "
"false positives."
msgstr ""

#: ../../java/testing.rst:634
msgid "Thread Interruptions"
msgstr ""

#: ../../java/testing.rst:636
msgid ""
"If the CallingThreadDispatcher sees that the current thread has its "
"``isInterrupted()`` flag set when message processing returns, it will throw "
"an :class:`InterruptedException` after finishing all its processing (i.e. "
"all messages which need processing as described above are processed before "
"this happens). As :meth:`tell` cannot throw exceptions due to its contract, "
"this exception will then be caught and logged, and the thread’s interrupted "
"status will be set again."
msgstr ""

#: ../../java/testing.rst:644
msgid ""
"If during message processing an :class:`InterruptedException` is thrown then"
" it will be caught inside the CallingThreadDispatcher’s message handling "
"loop, the thread’s interrupted flag will be set and processing continues "
"normally."
msgstr ""

#: ../../java/testing.rst:650
msgid ""
"The summary of these two paragraphs is that if the current thread is "
"interrupted while doing work under the CallingThreadDispatcher, then that "
"will result in the ``isInterrupted`` flag to be ``true`` when the message "
"send returns and no :class:`InterruptedException` will be thrown."
msgstr ""

#: ../../java/testing.rst:656
msgid "Benefits"
msgstr ""

#: ../../java/testing.rst:658
msgid ""
"To summarize, these are the features with the "
":class:`CallingThreadDispatcher` has to offer:"
msgstr ""

#: ../../java/testing.rst:661
msgid ""
"Deterministic execution of single-threaded tests while retaining nearly full"
" actor semantics"
msgstr ""

#: ../../java/testing.rst:663
msgid ""
"Full message processing history leading up to the point of failure in "
"exception stack traces"
msgstr ""

#: ../../java/testing.rst:665
msgid "Exclusion of certain classes of dead-lock scenarios"
msgstr ""

#: ../../java/testing.rst:670
msgid "Tracing Actor Invocations"
msgstr ""

#: ../../java/testing.rst:672
msgid ""
"The testing facilities described up to this point were aiming at formulating"
" assertions about a system’s behavior. If a test fails, it is usually your "
"job to find the cause, fix it and verify the test again. This process is "
"supported by debuggers as well as logging, where the Akka toolkit offers the"
" following options:"
msgstr ""

#: ../../java/testing.rst:678
msgid "*Logging of exceptions thrown within Actor instances*"
msgstr ""

#: ../../java/testing.rst:680
msgid ""
"This is always on; in contrast to the other logging mechanisms, this logs at"
" ``ERROR`` level."
msgstr ""

#: ../../java/testing.rst:683
msgid "*Logging of special messages*"
msgstr ""

#: ../../java/testing.rst:685
msgid ""
"Actors handle certain special messages automatically, e.g. :obj:`Kill`, "
":obj:`PoisonPill`, etc. Tracing of these message invocations is enabled by "
"the setting ``akka.actor.debug.autoreceive``, which enables this on all "
"actors."
msgstr ""

#: ../../java/testing.rst:690
msgid "*Logging of the actor lifecycle*"
msgstr ""

#: ../../java/testing.rst:692
msgid ""
"Actor creation, start, restart, monitor start, monitor stop and stop may be "
"traced by enabling the setting ``akka.actor.debug.lifecycle``; this, too, is"
" enabled uniformly on all actors."
msgstr ""

#: ../../java/testing.rst:696
msgid ""
"All these messages are logged at ``DEBUG`` level. To summarize, you can "
"enable full logging of actor activities using this configuration fragment::"
msgstr ""

#: ../../java/testing.rst:710
msgid "Configuration"
msgstr ""

#: ../../java/testing.rst:712
msgid ""
"There are several configuration properties for the TestKit module, please "
"refer to the :ref:`reference configuration <config-akka-testkit>`."
msgstr ""
