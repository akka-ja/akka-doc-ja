# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../java/distributed-pub-sub.rst:4
msgid "Distributed Publish Subscribe in Cluster"
msgstr ""

#: ../../java/distributed-pub-sub.rst:6
msgid ""
"How do I send a message to an actor without knowing which node it is running"
" on?"
msgstr ""

#: ../../java/distributed-pub-sub.rst:8
msgid ""
"How do I send messages to all actors in the cluster that have registered "
"interest in a named topic?"
msgstr ""

#: ../../java/distributed-pub-sub.rst:11
msgid ""
"This pattern provides a mediator actor, "
"``akka.cluster.pubsub.DistributedPubSubMediator``, that manages a registry "
"of actor references and replicates the entries to peer actors among all "
"cluster nodes or a group of nodes tagged with a specific role."
msgstr ""

#: ../../java/distributed-pub-sub.rst:15
msgid ""
"The ``DistributedPubSubMediator`` actor is supposed to be started on all "
"nodes, or all nodes with specified role, in the cluster. The mediator can be"
" started with the ``DistributedPubSub`` extension or as an ordinary actor."
msgstr ""

#: ../../java/distributed-pub-sub.rst:19
msgid ""
"The registry is eventually consistent, i.e. changes are not immediately "
"visible at other nodes, but typically they will be fully replicated to all "
"other nodes after a few seconds. Changes are only performed in the own part "
"of the registry and those changes are versioned. Deltas are disseminated in "
"a scalable way to other nodes with a gossip protocol."
msgstr ""

#: ../../java/distributed-pub-sub.rst:25
msgid ""
"Cluster members with status :ref:`WeaklyUp <weakly_up_java>`, if that "
"feature is enabled, will participate in Distributed Publish Subscribe, i.e. "
"subscribers on nodes with ``WeaklyUp`` status will receive published "
"messages if the publisher and subscriber are on same side of a network "
"partition."
msgstr ""

#: ../../java/distributed-pub-sub.rst:30
msgid ""
"You can send messages via the mediator on any node to registered actors on "
"any other node."
msgstr ""

#: ../../java/distributed-pub-sub.rst:33
msgid ""
"There a two different modes of message delivery, explained in the sections "
":ref:`distributed-pub-sub-publish-java` and :ref:`distributed-pub-sub-send-"
"java` below."
msgstr ""

#: ../../java/distributed-pub-sub.rst:39
msgid "Publish"
msgstr ""

#: ../../java/distributed-pub-sub.rst:41
msgid ""
"This is the true pub/sub mode. A typical usage of this mode is a chat room "
"in an instant messaging application."
msgstr ""

#: ../../java/distributed-pub-sub.rst:44
msgid ""
"Actors are registered to a named topic. This enables many subscribers on "
"each node. The message will be delivered to all subscribers of the topic."
msgstr ""

#: ../../java/distributed-pub-sub.rst:47
msgid ""
"For efficiency the message is sent over the wire only once per node (that "
"has a matching topic), and then delivered to all subscribers of the local "
"topic representation."
msgstr ""

#: ../../java/distributed-pub-sub.rst:50
msgid ""
"You register actors to the local mediator with "
"``DistributedPubSubMediator.Subscribe``. Successful ``Subscribe`` and "
"``Unsubscribe`` is acknowledged with "
"``DistributedPubSubMediator.SubscribeAck`` and "
"``DistributedPubSubMediator.UnsubscribeAck`` replies. The acknowledgment "
"means that the subscription is registered, but it can still take some time "
"until it is replicated to other nodes."
msgstr ""

#: ../../java/distributed-pub-sub.rst:56
msgid ""
"You publish messages by sending ``DistributedPubSubMediator.Publish`` "
"message to the local mediator."
msgstr ""

#: ../../java/distributed-pub-sub.rst:59
msgid ""
"Actors are automatically removed from the registry when they are terminated,"
" or you can explicitly remove entries with "
"``DistributedPubSubMediator.Unsubscribe``."
msgstr ""

#: ../../java/distributed-pub-sub.rst:62
msgid "An example of a subscriber actor:"
msgstr ""

#: ../../java/distributed-pub-sub.rst:66
#: ../../java/distributed-pub-sub.rst:136
msgid ""
"Subscriber actors can be started on several nodes in the cluster, and all "
"will receive messages published to the \"content\" topic."
msgstr ""

#: ../../java/distributed-pub-sub.rst:71
#: ../../java/distributed-pub-sub.rst:141
msgid "A simple actor that publishes to this \"content\" topic:"
msgstr ""

#: ../../java/distributed-pub-sub.rst:75
#: ../../java/distributed-pub-sub.rst:145
msgid "It can publish messages to the topic from anywhere in the cluster:"
msgstr ""

#: ../../java/distributed-pub-sub.rst:80
msgid "Topic Groups"
msgstr ""

#: ../../java/distributed-pub-sub.rst:82
msgid ""
"Actors may also be subscribed to a named topic with a ``group`` id. If "
"subscribing with a group id, each message published to a topic with the "
"``sendOneMessageToEachGroup`` flag set to ``true`` is delivered via the "
"supplied ``RoutingLogic`` (default random) to one actor within each "
"subscribing group."
msgstr ""

#: ../../java/distributed-pub-sub.rst:87
msgid ""
"If all the subscribed actors have the same group id, then this works just "
"like ``Send`` and each message is only delivered to one subscriber."
msgstr ""

#: ../../java/distributed-pub-sub.rst:90
msgid ""
"If all the subscribed actors have different group names, then this works "
"like normal ``Publish`` and each message is broadcasted to all subscribers."
msgstr ""

#: ../../java/distributed-pub-sub.rst:95
msgid ""
"Note that if the group id is used it is part of the topic identifier. "
"Messages published with ``sendOneMessageToEachGroup=false`` will not be "
"delivered to subscribers that subscribed with a group id. Messages published"
" with ``sendOneMessageToEachGroup=true`` will not be delivered to "
"subscribers that subscribed without a group id."
msgstr ""

#: ../../java/distributed-pub-sub.rst:104
msgid "Send"
msgstr ""

#: ../../java/distributed-pub-sub.rst:106
msgid ""
"This is a point-to-point mode where each message is delivered to one "
"destination, but you still does not have to know where the destination is "
"located. A typical usage of this mode is private chat to one other user in "
"an instant messaging application. It can also be used for distributing tasks"
" to registered workers, like a cluster aware router where the routees "
"dynamically can register themselves."
msgstr ""

#: ../../java/distributed-pub-sub.rst:112
msgid ""
"The message will be delivered to one recipient with a matching path, if any "
"such exists in the registry. If several entries match the path because it "
"has been registered on several nodes the message will be sent via the "
"supplied ``RoutingLogic`` (default random) to one destination. The sender() "
"of the message can specify that local affinity is preferred, i.e. the "
"message is sent to an actor in the same local actor system as the used "
"mediator actor, if any such exists, otherwise route to any other matching "
"entry."
msgstr ""

#: ../../java/distributed-pub-sub.rst:119
msgid ""
"You register actors to the local mediator with "
"``DistributedPubSubMediator.Put``. The ``ActorRef`` in ``Put`` must belong "
"to the same local actor system as the mediator. The path without address "
"information is the key to which you send messages. On each node there can "
"only be one actor for a given path, since the path is unique within one "
"local actor system."
msgstr ""

#: ../../java/distributed-pub-sub.rst:125
msgid ""
"You send messages by sending ``DistributedPubSubMediator.Send`` message to "
"the local mediator with the path (without address information) of the "
"destination actors."
msgstr ""

#: ../../java/distributed-pub-sub.rst:129
msgid ""
"Actors are automatically removed from the registry when they are terminated,"
" or you can explicitly remove entries with "
"``DistributedPubSubMediator.Remove``."
msgstr ""

#: ../../java/distributed-pub-sub.rst:132
msgid "An example of a destination actor:"
msgstr ""

#: ../../java/distributed-pub-sub.rst:149
msgid ""
"It is also possible to broadcast messages to the actors that have been "
"registered with ``Put``. Send ``DistributedPubSubMediator.SendToAll`` "
"message to the local mediator and the wrapped message will then be delivered"
" to all recipients with a matching path. Actors with the same path, without "
"address information, can be registered on different nodes. On each node "
"there can only be one such actor, since the path is unique within one local "
"actor system."
msgstr ""

#: ../../java/distributed-pub-sub.rst:156
msgid ""
"Typical usage of this mode is to broadcast messages to all replicas with the"
" same path, e.g. 3 actors on different nodes that all perform the same "
"actions, for redundancy. You can also optionally specify a property "
"(``allButSelf``) deciding if the message should be sent to a matching path "
"on the self node or not."
msgstr ""

#: ../../java/distributed-pub-sub.rst:162
msgid "DistributedPubSub Extension"
msgstr ""

#: ../../java/distributed-pub-sub.rst:164
msgid ""
"In the example above the mediator is started and accessed with the "
"``akka.cluster.pubsub.DistributedPubSub`` extension. That is convenient and "
"perfectly fine in most cases, but it can be good to know that it is possible"
" to start the mediator actor as an ordinary actor and you can have several "
"different mediators at the same time to be able to divide a large number of "
"actors/topics to different mediators. For example you might want to use "
"different cluster roles for different mediators."
msgstr ""

#: ../../java/distributed-pub-sub.rst:170
msgid ""
"The ``DistributedPubSub`` extension can be configured with the following "
"properties:"
msgstr ""

#: ../../java/distributed-pub-sub.rst:174
msgid ""
"It is recommended to load the extension when the actor system is started by "
"defining it in ``akka.extensions`` configuration property. Otherwise it will"
" be activated when first used and then it takes a while for it to be "
"populated."
msgstr ""

#: ../../java/distributed-pub-sub.rst:183
msgid "Dependencies"
msgstr ""

#: ../../java/distributed-pub-sub.rst:185
msgid ""
"To use Distributed Publish Subscribe you must add the following dependency "
"in your project."
msgstr ""

#: ../../java/distributed-pub-sub.rst:187
msgid "sbt::"
msgstr ""

#: ../../java/distributed-pub-sub.rst:191
msgid "maven::"
msgstr ""
