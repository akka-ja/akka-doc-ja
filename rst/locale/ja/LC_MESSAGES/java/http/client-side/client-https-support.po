# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../java/http/client-side/client-https-support.rst:4
msgid "Client-Side HTTPS Support"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:6
msgid ""
"Akka HTTP supports TLS encryption on the client-side as well as on the "
":ref:`server-side <serverSideHTTPS-java>`."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:13
msgid ""
"The central vehicle for configuring encryption is the "
"``HttpsConnectionContext``, which can be created using the static method "
"``ConnectionContext.https`` which is defined like this:"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:19
msgid ""
"In addition to the ``outgoingConnection``, ``newHostConnectionPool`` and "
"``cachedHostConnectionPool`` methods the `akka.http.javadsl.Http`_ "
"extension also defines ``outgoingConnectionTls``, "
"``newHostConnectionPoolTls`` and ``cachedHostConnectionPoolTls``. These "
"methods work identically to their counterparts without the ``-Tls`` "
"suffix, with the exception that all connections will always be encrypted."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:24
msgid ""
"The ``singleRequest`` and ``superPool`` methods determine the encryption "
"state via the scheme of the incoming request, i.e. requests to an "
"\"https\" URI will be encrypted, while requests to an \"http\" URI won't."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:27
msgid ""
"The encryption configuration for all HTTPS connections, i.e. the "
"``HttpsContext`` is determined according to the following logic:"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:30
msgid ""
"If the optional ``httpsContext`` method parameter is defined it contains "
"the configuration to be used (and thus takes precedence over any "
"potentially set default client-side ``HttpsContext``)."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:33
msgid ""
"If the optional ``httpsContext`` method parameter is undefined (which is "
"the default) the default client-side ``HttpsContext`` is used, which can "
"be set via the ``setDefaultClientHttpsContext`` on the ``Http`` "
"extension."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:36
msgid ""
"If no default client-side ``HttpsContext`` has been set via the "
"``setDefaultClientHttpsContext`` on the ``Http`` extension the default "
"system configuration is used."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:39
msgid ""
"Usually the process is, if the default system TLS configuration is not "
"good enough for your application's needs, that you configure a custom "
"``HttpsContext`` instance and set it via "
"``Http.get(system).setDefaultClientHttpsContext``. Afterwards you simply "
"use ``outgoingConnectionTls``, ``newHostConnectionPoolTls``, "
"``cachedHostConnectionPoolTls``, ``superPool`` or ``singleRequest`` "
"without a specific ``httpsContext`` argument, which causes encrypted "
"connections to rely on the configured default client-side "
"``HttpsContext``."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:45
msgid ""
"If no custom ``HttpsContext`` is defined the default context uses Java's "
"default TLS settings. Customizing the ``HttpsContext`` can make the Https"
" client less secure. Understand what you are doing!"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:49
msgid "SSL-Config"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:51
msgid ""
"Akka HTTP heavily relies on, and delegates most configuration of any "
"SSL/TLS related options to `Lightbend SSL-Config`_, which is a library "
"specialized in providing an secure-by-default SSLContext and related "
"options."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:55
msgid ""
"Please refer to the `Lightbend SSL-Config`_ documentation for detailed "
"documentation of all available settings."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:57
msgid ""
"SSL Config settings used by Akka HTTP (as well as Streaming TCP) are "
"located under the `akka.ssl-config` namespace."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:62
msgid "Detailed configuration and workarounds"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:64
msgid ""
"Akka HTTP relies on `Typesafe SSL-Config`_ which is a library maintained "
"by Lightbend that makes configuring things related to SSL/TLS much "
"simpler than using the raw SSL APIs provided by the JDK. Please refer to "
"its documentation to learn more about it."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:68
msgid ""
"All configuration options available to this library may be set under the "
"``akka.ssl-context`` configuration for Akka HTTP applications."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:71
msgid ""
"When encountering problems connecting to HTTPS hosts we highly encourage "
"to reading up on the excellent ssl-config configuration. Especially the "
"quick start sections about `adding certificates to the trust store`_ "
"should prove very useful, for example to easily trust a self-signed "
"certificate that applications might use in development mode."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:76
msgid ""
"While it is possible to disable certain checks using the so called "
"\"loose\" settings in SSL Config, we **strongly recommend** to instead "
"attempt to solve these issues by properly configuring TLSâ€“for example by "
"adding trusted keys to the keystore."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:79
msgid ""
"If however certain checks really need to be disabled because of "
"misconfigured (or legacy) servers that your application has to speak to, "
"instead of disabling the checks globally (i.e. in ``application.conf``) "
"we suggest configuring the loose settings for *specific connections* that"
" are known to need them disabled (and trusted for some other reason). The"
" pattern of doing so is documented in the folowing sub-sections."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:87
msgid "Hostname verification"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:89
msgid ""
"Hostname verification proves that the Akka HTTP client is actually "
"communicating with the server it intended to communicate with. Without "
"this check a man-in-the-middle attack is possible. In the attack "
"scenario, an alternative certificate would be presented which was issued "
"for another host name. Checking the host name in the certificate against "
"the host name the connection was opened against is therefore vital."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:94
msgid ""
"The default ``HttpsContext`` enables hostname verification. Akka HTTP "
"relies on the `Typesafe SSL-Config`_ library to implement this and "
"security options for SSL/TLS. Hostname verification is provided by the "
"JDK and used by Akka HTTP since Java 7, and on Java 6 the verification is"
" implemented by ssl-config manually."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:98
msgid ""
"For further recommended reading we would like to highlight the `fixing "
"hostname verification blog post`_ by blog post by Will Sargent."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:106
msgid "Server Name Indication (SNI)"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:108
msgid ""
"SNI is an TLS extension which aims to guard against man-in-the-middle "
"attacks. It does so by having the client send the name of the virtual "
"domain it is expecting to talk to as part of the TLS handshake."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:111
msgid "It is specified as part of `RFC 6066`_."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:114
msgid "Disabling TLS security features, at your own risk"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:117
msgid ""
"It is highly discouraged to disable any of the security features of TLS, "
"however do acknowlage that workarounds may sometimes be needed."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:119
msgid ""
"Before disabling any of the features one should consider if they may be "
"solvable *within* the TLS world, for example by `trusting a "
"certificate`_, or `configuring the trusted cipher suites`_. There's also "
"a very important section in the ssl-config docs titled `LooseSSL - Please"
" read this before turning anything off!`_."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:123
msgid ""
"If disabling features is indeed desired, we recommend doing so for "
"*specific connections*, instead of globally configuring it via "
"``application.conf``."
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:126
msgid "The following shows an example of disabling SNI for a given connection:"
msgstr ""

#: ../../java/http/client-side/client-https-support.rst:131
msgid ""
"The ``badSslConfig`` is a copy of the default ``AkkaSSLConfig`` with with"
" the slightly changed configuration to disable SNI. This value can be "
"cached and used for connections which should indeed not use this feature."
msgstr ""

