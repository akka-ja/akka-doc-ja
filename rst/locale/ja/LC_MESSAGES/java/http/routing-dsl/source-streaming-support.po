# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../java/http/routing-dsl/source-streaming-support.rst:4
msgid "Source Streaming"
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:6
msgid ""
"Akka HTTP supports completing a request with an Akka ``Source<T, _>``, "
"which makes it possible to easily build and consume streaming end-to-end "
"APIs which apply back-pressure throughout the entire stack."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:9
msgid ""
"It is possible to complete requests with raw ``Source<ByteString, _>``, "
"however often it is more convenient to stream on an element-by-element "
"basis, and allow Akka HTTP to handle the rendering internally - for "
"example as a JSON array, or CSV stream (where each element is separated "
"by a new-line)."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:13
msgid ""
"In the following sections we investigate how to make use of the JSON "
"Streaming infrastructure, however the general hints apply to any kind of "
"element-by-element streaming you could imagine."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:17
msgid "JSON Streaming"
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:19
msgid ""
"`JSON Streaming`_ is a term refering to streaming a (possibly infinite) "
"stream of element as independent JSON objects as a continuous HTTP "
"request or response. The elements are most often separated using "
"newlines, however do not have to be. Concatenating elements side-by-side "
"or emitting \"very long\" JSON array is also another use case."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:24
msgid ""
"In the below examples, we'll be refering to the ``Tweet`` and "
"``Measurement`` case classes as our model, which are defined as:"
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:31
msgid "Responding with JSON Streams"
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:33
msgid ""
"In this example we implement an API representing an infinite stream of "
"tweets, very much like Twitter's `Streaming API`_."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:35
msgid ""
"Firstly, we'll need to get some additional marshalling infrastructure set"
" up, that is able to marshal to and from an Akka Streams ``Source<T,_>``."
" Here we'll use the ``Jackson`` helper class from ``akka-http-jackson`` "
"(a separate library that you should add as a dependency if you want to "
"use Jackson with Akka HTTP)."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:39
msgid ""
"First we enable JSON Streaming by making an implicit "
"``EntityStreamingSupport`` instance available (Step 1)."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:41
msgid ""
"The default mode of rendering a ``Source`` is to represent it as an JSON "
"Array. If you want to change this representation for example to use "
"Twitter style new-line separated JSON objects, you can do so by "
"configuring the support trait accordingly."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:44
msgid ""
"In Step 1.1. we demonstrate to configure configude the rendering to be "
"new-line separated, and also how parallel marshalling can be applied. We "
"configure the Support object to render the JSON as series of new-line "
"separated JSON objects, simply by providing the ``start``, ``sep`` and "
"``end`` ByteStrings, which will be emitted at the apropriate places in "
"the rendered stream. Although this format is *not* valid JSON, it is "
"pretty popular since parsing it is relatively simple - clients need only "
"to find the new-lines and apply JSON unmarshalling for an entire line of "
"JSON."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:50
msgid ""
"The final step is simply completing a request using a Source of tweets, "
"as simple as that:"
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:57
msgid "Consuming JSON Streaming uploads"
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:59
msgid ""
"Sometimes the client may be sending a streaming request, for example an "
"embedded device initiated a connection with the server and is feeding it "
"with one line of measurement data."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:62
msgid ""
"In this example, we want to consume this data in a streaming fashion from"
" the request entity, and also apply back-pressure to the underlying TCP "
"connection, if the server can not cope with the rate of incoming data "
"(back-pressure will be applied automatically thanks to using Akka "
"HTTP/Streams)."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:72
msgid "Simple CSV streaming example"
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:74
msgid ""
"Akka HTTP provides another ``EntityStreamingSupport`` out of the box, "
"namely ``csv`` (comma-separated values). For completeness, we demonstrate"
" its usage in the below snippet. As you'll notice, switching betweeen "
"streaming modes is fairly simple, one only has to make sure that an "
"implicit ``Marshaller`` of the requested type is available, and that the "
"streaming support operates on the same ``Content-Type`` as the rendered "
"values. Otherwise you'll see an error during runtime that the marshaller "
"did not expose the expected content type and thus we can not render the "
"streaming response)."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:84
msgid "Implementing custom EntityStreamingSupport traits"
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:86
msgid ""
"The ``EntityStreamingSupport`` infrastructure is open for extension and "
"not bound to any single format, content type or marshalling library. The "
"provided JSON support does not rely on Spray JSON directly, but uses "
"``Marshaller<T, ByteString>`` instances, which can be provided using any "
"JSON marshalling library (such as Circe, Jawn or Play JSON)."
msgstr ""

#: ../../java/http/routing-dsl/source-streaming-support.rst:90
msgid ""
"When implementing a custom support trait, one should simply extend the "
"``EntityStreamingSupport`` abstract class, and implement all of it's "
"methods. It's best to use the existing implementations as a guideline."
msgstr ""

