# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../java/http/routing-dsl/rejections.rst:4
msgid "Rejections"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:5
msgid "TODO update to Java APIs"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:7
msgid ""
"In the chapter about constructing :ref:`Routes` the ``~`` operator was "
"introduced, which connects two routes in a way that allows a second route"
" to get a go at a request if the first route \"rejected\" it. The concept"
" of \"rejections\" is used by Akka HTTP for maintaining a more functional"
" overall architecture and in order to be able to properly handle all "
"kinds of error scenarios."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:12
msgid ""
"When a filtering directive, like the :ref:`-get-` directive, cannot let "
"the request pass through to its inner route because the filter condition "
"is not satisfied (e.g. because the incoming request is not a GET request)"
" the directive doesn't immediately complete the request with an error "
"response. Doing so would make it impossible for other routes chained in "
"after the failing filter to get a chance to handle the request. Rather, "
"failing filters \"reject\" the request in the same way as by explicitly "
"calling ``requestContext.reject(...)``."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:18
msgid ""
"After having been rejected by a route the request will continue to flow "
"through the routing structure and possibly find another route that can "
"complete it. If there are more rejections all of them will be picked up "
"and collected."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:21
msgid ""
"If the request cannot be completed by (a branch of) the route structure "
"an enclosing :ref:`-handleRejections-java-` directive can be used to "
"convert a set of rejections into an ``HttpResponse`` (which, in most "
"cases, will be an error response). ``Route.seal`` internally wraps its "
"argument route with the :ref:`-handleRejections-java-` directive in order"
" to \"catch\" and handle any rejection."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:28
msgid "Predefined Rejections"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:30
msgid ""
"A rejection encapsulates a specific reason why a route was not able to "
"handle a request. It is modeled as an object of type ``Rejection``. Akka "
"HTTP comes with a set of `predefined rejections`__, which are used by the"
" many :ref:`predefined directives <Predefined Directives-java>`."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:34
msgid ""
"Rejections are gathered up over the course of a Route evaluation and "
"finally converted to ``HttpResponse`` replies by the "
":ref:`-handleRejections-` directive if there was no way for the request "
"to be completed."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:43
msgid "The RejectionHandler"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:45
msgid ""
"The :ref:`-handleRejections-` directive delegates the actual job of "
"converting a list of rejections to its argument, a RejectionHandler__, "
"which is defined like this::"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:52
msgid ""
"Since a ``RejectionHandler`` returns an ``Option[Route]`` it can choose "
"whether it would like to handle the current set of rejections or not. If "
"it returns ``None`` the rejections will simply continue to flow through "
"the route structure."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:55
msgid ""
"The default ``RejectionHandler`` applied by the top-level glue code that "
"turns a ``Route`` into a ``Flow`` or async handler function for the :ref"
":`low-level API <http-low-level-server-side-api>` (via "
"``Route.handlerFlow`` or ``Route.asyncHandler``) will handle *all* "
"rejections that reach it."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:61
msgid "Rejection Cancellation"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:63
msgid ""
"As you can see from its definition above the ``RejectionHandler`` doesn't"
" handle single rejections but a whole list of them. This is because some "
"route structure produce several \"reasons\" why a request could not be "
"handled."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:66
msgid "Take this route structure for example:"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:68
#: ../../java/http/routing-dsl/rejections.rst:104
msgid "TODO missing sample"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:70
msgid ""
"For uncompressed POST requests this route structure would initially yield"
" two rejections:"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:72
msgid ""
"a ``MethodRejection`` produced by the :ref:`-get-` directive (which "
"rejected because the request is not a GET request)"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:73
msgid ""
"an ``UnsupportedRequestEncodingRejection`` produced by the "
":ref:`-decodeRequestWith-` directive (which only accepts gzip-compressed "
"requests here)"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:76
msgid ""
"In reality the route even generates one more rejection, a "
"``TransformationRejection`` produced by the :ref:`-post-` directive. It "
"\"cancels\" all other potentially existing *MethodRejections*, since they"
" are invalid after the :ref:`-post-` directive allowed the request to "
"pass (after all, the route structure *can* deal with POST requests). "
"These types of rejection cancellations are resolved *before* a "
"``RejectionHandler`` sees the rejection list. So, for the example above "
"the ``RejectionHandler`` will be presented with only a single-element "
"rejection list, containing nothing but the "
"``UnsupportedRequestEncodingRejection``."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:87
msgid "Empty Rejections"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:89
msgid ""
"Since rejections are passed around in a list (or rather immutable "
"``Seq``) you might ask yourself what the semantics of an empty rejection "
"list are. In fact, empty rejection lists have well defined semantics. "
"They signal that a request was not handled because the respective "
"resource could not be found. Akka HTTP reserves the special status of "
"\"empty rejection\" to this most common failure a service is likely to "
"produce."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:94
msgid ""
"So, for example, if the :ref:`-path-` directive rejects a request it does"
" so with an empty rejection list. The :ref:`-host-` directive behaves in "
"the same way."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:99
msgid "Customizing Rejection Handling"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:101
msgid ""
"If you'd like to customize the way certain rejections are handled you'll "
"have to write a custom :ref:`RejectionHandler <The RejectionHandler>`. "
"Here is an example:"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:106
msgid ""
"The easiest way to construct a ``RejectionHandler`` is via the "
"``RejectionHandler.Builder`` that Akka HTTP provides. After having "
"created a new ``Builder`` instance with ``RejectionHandler.newBuilder()``"
" you can attach handling logic for certain types of rejections through "
"three helper methods:"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:113
msgid "handle"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:111
msgid ""
"Handles certain rejections with the given partial function. The partial "
"function simply produces a ``Route`` which is run when the rejection is "
"\"caught\". This makes the full power of the Routing DSL available for "
"defining rejection handlers and even allows for recursing back into the "
"main route structure if required."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:117
msgid "handleAll[T <: Rejection]"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:116
msgid ""
"Handles all rejections of a certain type at the same time. This is useful"
" for cases where your need access to more than the first rejection of a "
"certain type, e.g. for producing the error message to an unsupported "
"request method."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:121
msgid "handleNotFound"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:120
msgid ""
"As described :ref:`above <Empty Rejections>` \"Resource Not Found\" is "
"special as it is represented with an empty rejection set. The "
"``handleNotFound`` helper let's you specify the \"recovery route\" for "
"this case."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:123
msgid ""
"Even though you could handle several different rejection types in a "
"single partial function supplied to ``handle`` it is recommended to split"
" these up into distinct ``handle`` attachments instead. This way the "
"priority between rejections is properly defined via the order of your "
"``handle`` clauses rather than the (sometimes hard to predict or control)"
" order of rejections in the rejection set."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:128
msgid ""
"Once you have defined your custom ``RejectionHandler`` you have two "
"options for \"activating\" it:"
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:130
msgid "Bring it into implicit scope at the top-level."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:131
msgid "Supply it as argument to the :ref:`-handleRejections-` directive."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:133
msgid ""
"In the first case your handler will be \"sealed\" (which means that it "
"will receive the default handler as a fallback for all cases your handler"
" doesn't handle itself) and used for all rejections that are not handled "
"within the route structure itself."
msgstr ""

#: ../../java/http/routing-dsl/rejections.rst:137
msgid ""
"The second case allows you to restrict the applicability of your handler "
"to certain branches of your route structure."
msgstr ""

