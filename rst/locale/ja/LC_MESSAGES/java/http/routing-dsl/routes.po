# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../java/http/routing-dsl/routes.rst:4
msgid "Routes"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:6
msgid ""
"The \"Route\" is the central concept of Akka HTTP's Routing DSL. All the "
"structures you build with the DSL, no matter whether they consists of a "
"single line or span several hundred lines, are functions turning a "
"``RequestContext`` into a ``CompletionStage<RouteResult>``."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:10
msgid ""
"A ``Route`` itself is a function that operates on a ``RequestContext`` and "
"returns a ``RouteResult``. The ``RequestContext`` is a data structure that "
"contains the current request and auxiliary data like the so far unmatched "
"path of the request URI that gets passed through the route structure. It "
"also contains the current ``ExecutionContext`` and "
"``akka.stream.Materializer``, so that these don't have to be passed around "
"manually."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:15
msgid ""
"Generally when a route receives a request (or rather a ``RequestContext`` "
"for it) it can do one of these things:"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:17
msgid ""
"Complete the request by returning the value of "
"``requestContext.complete(...)``"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:18
msgid ""
"Reject the request by returning the value of ``requestContext.reject(...)`` "
"(see :ref:`rejections-java`)"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:19
msgid ""
"Fail the request by returning the value of ``requestContext.fail(...)`` or "
"by just throwing an exception (see :ref:`exception-handling-java`)"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:20
msgid ""
"Do any kind of asynchronous processing and instantly return a "
"``Future[RouteResult]`` to be eventually completed later"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:22
msgid ""
"The first case is pretty clear, by calling ``complete`` a given response is "
"sent to the client as reaction to the request. In the second case \"reject\""
" means that the route does not want to handle the request. You'll see "
"further down in the section about route composition what this is good for."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:26
msgid ""
"A ``Route`` can be \"sealed\" using ``Route.seal``, which relies on the in-"
"scope ``RejectionHandler`` and ``ExceptionHandler`` instances to convert "
"rejections and exceptions into appropriate HTTP responses for the client."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:29
msgid ""
"Using ``Route.handlerFlow`` or ``Route.asyncHandler`` a ``Route`` can be "
"lifted into a handler ``Flow`` or async handler function to be used with a "
"``bindAndHandleXXX`` call from the :ref:`http-low-level-server-side-api`."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:36
msgid "RequestContext"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:38
msgid ""
"The request context wraps an ``HttpRequest`` instance to enrich it with "
"additional information that are typically required by the routing logic, "
"like an ``ExecutionContext``, ``Materializer``, ``LoggingAdapter`` and the "
"configured ``RoutingSettings``. It also contains the ``unmatchedPath``, a "
"value that describes how much of the request URI has not yet been matched by"
" a :ref:`Path Directive <PathDirectives>`."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:43
msgid ""
"The ``RequestContext`` itself is immutable but contains several helper "
"methods which allow for convenient creation of modified copies."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:49
msgid "RouteResult"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:51
msgid ""
"The ``RouteResult`` is an opaque structure that represents possible results "
"of evaluating a route. A ``RouteResult`` can only be created by using one of"
" the methods of the ``RequestContext``. A result can either be a response, "
"if it was generated by one of the ``completeX`` methods, or a rejection that"
" contains information about why the route could not handle the request."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:58
msgid "Composing Routes"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:60
msgid "Routes are composed to form the route tree in two principle ways."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:62
msgid ""
"A route can be wrapped by a \"Directive\" which adds some behavioral aspect "
"to its wrapped \"inner route\". In the Java DSL, a Directive is a method "
"that returns a Route. In many cases, a Directive method will have an inner "
"route argument that is invoked when its semantics decide to do so, e.g. when"
" a URL path is matched."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:66
msgid "Example topics for directives include:"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:68
msgid ""
"filtering requests to decide which requests will get to the inner route"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:69
msgid "transforming the request before passing it to the inner route"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:70
msgid ""
"transforming the response (or more generally the route result) received from"
" the inner route"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:71
msgid ""
"applying side-effects around inner route processing, such as measuring the "
"time taken to run the inner route"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:73
msgid ""
"The other way of composition is defining a list of ``Route`` alternatives. "
"Alternative routes are tried one after the other until one route \"accepts\""
" the request and provides a response. Otherwise, a route can also \"reject\""
" a request, in which case further alternatives are explored. Alternatives "
"are specified by passing a list of routes to to ``RouteDirectives.route()``."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:81
msgid "The Routing Tree"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:83
msgid ""
"Essentially, when you combine routes via nesting and alternative, you build "
"a routing structure that forms a tree. When a request comes in it is "
"injected into this tree at the root and flows down through all the branches "
"in a depth-first manner until either some node completes it or it is fully "
"rejected."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:87
msgid ""
"Consider this schematic example. In place of directiveA, directiveB, etc., "
"you can just imagine any of the available directives, e.g. matching a "
"particular path, header or request parameter.::"
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:108
msgid "Here five directives form a routing tree."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:110
msgid ""
"Route 1 will only be reached if directives ``a``, ``b`` and ``c`` all let "
"the request pass through."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:111
msgid ""
"Route 2 will run if ``a`` and ``b`` pass, ``c`` rejects and ``d`` passes."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:112
msgid "Route 3 will run if ``a`` and ``b`` pass, but ``c`` and ``d`` reject."
msgstr ""

#: ../../java/http/routing-dsl/routes.rst:114
msgid ""
"Route 3 can therefore be seen as a \"catch-all\" route that only kicks in, "
"if routes chained into preceding positions reject. This mechanism can make "
"complex filtering logic quite easy to implement: simply put the most "
"specific cases up front and the most general cases in the back."
msgstr ""
