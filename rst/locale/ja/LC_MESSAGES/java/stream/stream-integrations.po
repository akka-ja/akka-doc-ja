# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../java/stream/stream-integrations.rst:5
msgid "Integration"
msgstr ""

#: ../../java/stream/stream-integrations.rst:8
msgid "Integrating with Actors"
msgstr ""

#: ../../java/stream/stream-integrations.rst:10
msgid ""
"For piping the elements of a stream as messages to an ordinary actor you "
"can use the ``Sink.actorRef``. Messages can be sent to a stream via the "
":class:`ActorRef` that is materialized by ``Source.actorRef``."
msgstr ""

#: ../../java/stream/stream-integrations.rst:14
msgid ""
"For more advanced use cases the :class:`ActorPublisher` and "
":class:`ActorSubscriber` traits are provided to support implementing "
"Reactive Streams :class:`Publisher` and :class:`Subscriber` with an "
":class:`Actor`."
msgstr ""

#: ../../java/stream/stream-integrations.rst:18
msgid ""
"These can be consumed by other Reactive Stream libraries or used as an "
"Akka Streams :class:`Source` or :class:`Sink`."
msgstr ""

#: ../../java/stream/stream-integrations.rst:23
msgid ""
":class:`AbstractActorPublisher` and :class:`AbstractActorSubscriber` "
"cannot be used with remote actors, because if signals of the Reactive "
"Streams protocol (e.g. ``request``) are lost the the stream may deadlock."
msgstr ""

#: ../../java/stream/stream-integrations.rst:28
msgid ""
"These Actors are designed to be implemented using Java 8 lambda "
"expressions. In case you need to stay on a JVM prior to 8, Akka provides "
":class:`UntypedActorPublisher` and :class:`UntypedActorSubscriber` which "
"can be used easily from any language level."
msgstr ""

#: ../../java/stream/stream-integrations.rst:33
msgid "Source.actorRef"
msgstr ""

#: ../../java/stream/stream-integrations.rst:35
msgid ""
"Messages sent to the actor that is materialized by ``Source.actorRef`` "
"will be emitted to the stream if there is demand from downstream, "
"otherwise they will be buffered until request for demand is received."
msgstr ""

#: ../../java/stream/stream-integrations.rst:39
msgid ""
"Depending on the defined :class:`OverflowStrategy` it might drop elements"
" if there is no space available in the buffer. The strategy "
"``OverflowStrategy.backpressure()`` is not supported for this Source "
"type, you should consider using ``ActorPublisher`` if you want a "
"backpressured actor interface."
msgstr ""

#: ../../java/stream/stream-integrations.rst:44
msgid ""
"The stream can be completed successfully by sending "
"``akka.actor.PoisonPill`` or ``akka.actor.Status.Success`` to the actor "
"reference."
msgstr ""

#: ../../java/stream/stream-integrations.rst:47
msgid ""
"The stream can be completed with failure by sending "
"``akka.actor.Status.Failure`` to the actor reference."
msgstr ""

#: ../../java/stream/stream-integrations.rst:50
msgid ""
"The actor will be stopped when the stream is completed, failed or "
"cancelled from downstream, i.e. you can watch it to get notified when "
"that happens."
msgstr ""

#: ../../java/stream/stream-integrations.rst:54
msgid "Sink.actorRef"
msgstr ""

#: ../../java/stream/stream-integrations.rst:56
msgid ""
"The sink sends the elements of the stream to the given `ActorRef`. If the"
" target actor terminates the stream will be cancelled. When the stream is"
" completed successfully the given ``onCompleteMessage`` will be sent to "
"the destination actor. When the stream is completed with failure a "
"``akka.actor.Status.Failure`` message will be sent to the destination "
"actor."
msgstr ""

#: ../../java/stream/stream-integrations.rst:63
msgid ""
"There is no back-pressure signal from the destination actor, i.e. if the "
"actor is not consuming the messages fast enough the mailbox of the actor "
"will grow. For potentially slow consumer actors it is recommended to use "
"a bounded mailbox with zero `mailbox-push-timeout-time` or use a rate "
"limiting stage in front of this stage."
msgstr ""

#: ../../java/stream/stream-integrations.rst:69
msgid "ActorPublisher"
msgstr ""

#: ../../java/stream/stream-integrations.rst:71
msgid ""
"Extend :class:`akka.stream.actor.AbstractActorPublisher` to implement a "
"stream publisher that keeps track of the subscription life cycle and "
"requested elements."
msgstr ""

#: ../../java/stream/stream-integrations.rst:74
msgid ""
"Here is an example of such an actor. It dispatches incoming jobs to the "
"attached subscriber:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:78
msgid ""
"You send elements to the stream by calling ``onNext``. You are allowed to"
" send as many elements as have been requested by the stream subscriber. "
"This amount can be inquired with ``totalDemand``. It is only allowed to "
"use ``onNext`` when ``isActive`` and ``totalDemand>0``, otherwise "
"``onNext`` will throw ``IllegalStateException``."
msgstr ""

#: ../../java/stream/stream-integrations.rst:83
msgid ""
"When the stream subscriber requests more elements the "
"``ActorPublisherMessage.Request`` message is delivered to this actor, and"
" you can act on that event. The ``totalDemand`` is updated automatically."
msgstr ""

#: ../../java/stream/stream-integrations.rst:87
msgid ""
"When the stream subscriber cancels the subscription the "
"``ActorPublisherMessage.Cancel`` message is delivered to this actor. "
"After that subsequent calls to ``onNext`` will be ignored."
msgstr ""

#: ../../java/stream/stream-integrations.rst:90
msgid ""
"You can complete the stream by calling ``onComplete``. After that you are"
" not allowed to call ``onNext``, ``onError`` and ``onComplete``."
msgstr ""

#: ../../java/stream/stream-integrations.rst:93
msgid ""
"You can terminate the stream with failure by calling ``onError``. After "
"that you are not allowed to call ``onNext``, ``onError`` and "
"``onComplete``."
msgstr ""

#: ../../java/stream/stream-integrations.rst:96
msgid ""
"If you suspect that this ``AbstractActorPublisher`` may never get "
"subscribed to, you can override the ``subscriptionTimeout`` method to "
"provide a timeout after which this Publisher should be considered "
"canceled. The actor will be notified when the timeout triggers via an "
"``ActorPublisherMessage.SubscriptionTimeoutExceeded`` message and MUST "
"then perform cleanup and stop itself."
msgstr ""

#: ../../java/stream/stream-integrations.rst:101
msgid ""
"If the actor is stopped the stream will be completed, unless it was not "
"already terminated with failure, completed or canceled."
msgstr ""

#: ../../java/stream/stream-integrations.rst:104
#: ../../java/stream/stream-integrations.rst:137
msgid "More detailed information can be found in the API documentation."
msgstr ""

#: ../../java/stream/stream-integrations.rst:106
msgid "This is how it can be used as input :class:`Source` to a :class:`Flow`:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:110
msgid ""
"You can only attach one subscriber to this publisher. Use a "
"``Broadcast``-element or attach a "
"``Sink.asPublisher(AsPublisher.WITH_FANOUT)`` to enable multiple "
"subscribers."
msgstr ""

#: ../../java/stream/stream-integrations.rst:114
msgid "ActorSubscriber"
msgstr ""

#: ../../java/stream/stream-integrations.rst:116
msgid ""
"Extend :class:`akka.stream.actor.AbstractActorSubscriber` to make your "
"class a stream subscriber with full control of stream back pressure. It "
"will receive ``ActorSubscriberMessage.OnNext``, "
"``ActorSubscriberMessage.OnComplete`` and "
"``ActorSubscriberMessage.OnError`` messages from the stream. It can also "
"receive other, non-stream messages, in the same way as any actor."
msgstr ""

#: ../../java/stream/stream-integrations.rst:121
msgid ""
"Here is an example of such an actor. It dispatches incoming jobs to child"
" worker actors:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:125
msgid ""
"Subclass must define the ``RequestStrategy`` to control stream back "
"pressure. After each incoming message the ``AbstractActorSubscriber`` "
"will automatically invoke the ``RequestStrategy.requestDemand`` and "
"propagate the returned demand to the stream."
msgstr ""

#: ../../java/stream/stream-integrations.rst:129
msgid ""
"The provided ``WatermarkRequestStrategy`` is a good strategy if the actor"
" performs work itself."
msgstr ""

#: ../../java/stream/stream-integrations.rst:130
msgid ""
"The provided ``MaxInFlightRequestStrategy`` is useful if messages are "
"queued internally or delegated to other actors."
msgstr ""

#: ../../java/stream/stream-integrations.rst:132
msgid ""
"You can also implement a custom ``RequestStrategy`` or call ``request`` "
"manually together with ``ZeroRequestStrategy`` or some other strategy. In"
" that case you must also call ``request`` when the actor is started or "
"when it is ready, otherwise it will not receive any elements."
msgstr ""

#: ../../java/stream/stream-integrations.rst:139
msgid "This is how it can be used as output :class:`Sink` to a :class:`Flow`:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:144
msgid "Integrating with External Services"
msgstr ""

#: ../../java/stream/stream-integrations.rst:146
msgid ""
"Stream transformations and side effects involving external non-stream "
"based services can be performed with ``mapAsync`` or "
"``mapAsyncUnordered``."
msgstr ""

#: ../../java/stream/stream-integrations.rst:149
msgid ""
"For example, sending emails to the authors of selected tweets using an "
"external email service:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:154
msgid "We start with the tweet stream of authors:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:158
msgid "Assume that we can lookup their email address using:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:162
msgid ""
"Transforming the stream of authors to a stream of email addresses by "
"using the ``lookupEmail`` service can be done with ``mapAsync``:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:167
msgid "Finally, sending the emails:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:171
msgid ""
"``mapAsync`` is applying the given function that is calling out to the "
"external service to each of the elements as they pass through this "
"processing step. The function returns a :class:`CompletionStage` and the "
"value of that future will be emitted downstreams. The number of Futures "
"that shall run in parallel is given as the first argument to "
"``mapAsync``. These Futures may complete in any order, but the elements "
"that are emitted downstream are in the same order as received from "
"upstream."
msgstr ""

#: ../../java/stream/stream-integrations.rst:178
msgid ""
"That means that back-pressure works as expected. For example if the "
"``emailServer.send`` is the bottleneck it will limit the rate at which "
"incoming tweets are retrieved and email addresses looked up."
msgstr ""

#: ../../java/stream/stream-integrations.rst:182
msgid ""
"The final piece of this pipeline is to generate the demand that pulls the"
" tweet authors information through the emailing pipeline: we attach a "
"``Sink.ignore`` which makes it all run. If our email process would return"
" some interesting data for further transformation then we would of course"
" not ignore it but send that result stream onwards for further processing"
" or storage."
msgstr ""

#: ../../java/stream/stream-integrations.rst:188
msgid ""
"Note that ``mapAsync`` preserves the order of the stream elements. In "
"this example the order is not important and then we can use the more "
"efficient ``mapAsyncUnordered``:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:193
msgid ""
"In the above example the services conveniently returned a "
":class:`CompletionStage` of the result. If that is not the case you need "
"to wrap the call in a :class:`CompletionStage`. If the service call "
"involves blocking you must also make sure that you run it on a dedicated "
"execution context, to avoid starvation and disturbance of other tasks in "
"the system."
msgstr ""

#: ../../java/stream/stream-integrations.rst:200
msgid ""
"The configuration of the ``\"blocking-dispatcher\"`` may look something "
"like:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:204
msgid ""
"An alternative for blocking calls is to perform them in a ``map`` "
"operation, still using a dedicated dispatcher for that operation."
msgstr ""

#: ../../java/stream/stream-integrations.rst:209
msgid ""
"However, that is not exactly the same as ``mapAsync``, since the "
"``mapAsync`` may run several calls concurrently, but ``map`` performs "
"them one at a time."
msgstr ""

#: ../../java/stream/stream-integrations.rst:212
msgid ""
"For a service that is exposed as an actor, or if an actor is used as a "
"gateway in front of an external service, you can use ``ask``:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:217
msgid ""
"Note that if the ``ask`` is not completed within the given timeout the "
"stream is completed with failure. If that is not desired outcome you can "
"use ``recover`` on the ``ask`` :class:`CompletionStage`."
msgstr ""

#: ../../java/stream/stream-integrations.rst:221
msgid "Illustrating ordering and parallelism"
msgstr ""

#: ../../java/stream/stream-integrations.rst:223
msgid ""
"Let us look at another example to get a better understanding of the "
"ordering and parallelism characteristics of ``mapAsync`` and "
"``mapAsyncUnordered``."
msgstr ""

#: ../../java/stream/stream-integrations.rst:226
msgid ""
"Several ``mapAsync`` and ``mapAsyncUnordered`` futures may run "
"concurrently. The number of concurrent futures are limited by the "
"downstream demand. For example, if 5 elements have been requested by "
"downstream there will be at most 5 futures in progress."
msgstr ""

#: ../../java/stream/stream-integrations.rst:231
msgid ""
"``mapAsync`` emits the future results in the same order as the input "
"elements were received. That means that completed results are only "
"emitted downstream when earlier results have been completed and emitted. "
"One slow call will thereby delay the results of all successive calls, "
"even though they are completed before the slow call."
msgstr ""

#: ../../java/stream/stream-integrations.rst:237
msgid ""
"``mapAsyncUnordered`` emits the future results as soon as they are "
"completed, i.e. it is possible that the elements are not emitted "
"downstream in the same order as received from upstream. One slow call "
"will thereby not delay the results of faster successive calls as long as "
"there is downstream demand of several elements."
msgstr ""

#: ../../java/stream/stream-integrations.rst:242
msgid "Here is a fictive service that we can use to illustrate these aspects."
msgstr ""

#: ../../java/stream/stream-integrations.rst:246
msgid ""
"Elements starting with a lower case character are simulated to take "
"longer time to process."
msgstr ""

#: ../../java/stream/stream-integrations.rst:249
msgid "Here is how we can use it with ``mapAsync``:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:253
#: ../../java/stream/stream-integrations.rst:310
msgid "The output may look like this:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:298
msgid ""
"Note that ``after`` lines are in the same order as the ``before`` lines "
"even though elements are ``completed`` in a different order. For example "
"``H`` is ``completed`` before ``g``, but still emitted afterwards."
msgstr ""

#: ../../java/stream/stream-integrations.rst:302
#: ../../java/stream/stream-integrations.rst:358
msgid ""
"The numbers in parenthesis illustrates how many calls that are in "
"progress at the same time. Here the downstream demand and thereby the "
"number of concurrent calls are limited by the buffer size (4) of the "
":class:`ActorMaterializerSettings`."
msgstr ""

#: ../../java/stream/stream-integrations.rst:306
msgid "Here is how we can use the same service with ``mapAsyncUnordered``:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:355
msgid ""
"Note that ``after`` lines are not in the same order as the ``before`` "
"lines. For example ``H`` overtakes the slow ``G``."
msgstr ""

#: ../../java/stream/stream-integrations.rst:365
msgid "Integrating with Reactive Streams"
msgstr ""

#: ../../java/stream/stream-integrations.rst:367
msgid ""
"`Reactive Streams`_ defines a standard for asynchronous stream processing"
" with non-blocking back pressure. It makes it possible to plug together "
"stream libraries that adhere to the standard. Akka Streams is one such "
"library."
msgstr ""

#: ../../java/stream/stream-integrations.rst:371
msgid "An incomplete list of other implementations:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:373
msgid "`Reactor (1.1+)`_"
msgstr ""

#: ../../java/stream/stream-integrations.rst:374
msgid "`RxJava`_"
msgstr ""

#: ../../java/stream/stream-integrations.rst:375
msgid "`Ratpack`_"
msgstr ""

#: ../../java/stream/stream-integrations.rst:376
msgid "`Slick`_"
msgstr ""

#: ../../java/stream/stream-integrations.rst:384
msgid ""
"The two most important interfaces in Reactive Streams are the "
":class:`Publisher` and :class:`Subscriber`."
msgstr ""

#: ../../java/stream/stream-integrations.rst:388
msgid "Let us assume that a library provides a publisher of tweets:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:392
msgid "and another library knows how to store author handles in a database:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:396
msgid ""
"Using an Akka Streams :class:`Flow` we can transform the stream and "
"connect those:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:401
msgid ""
"The :class:`Publisher` is used as an input :class:`Source` to the flow "
"and the :class:`Subscriber` is used as an output :class:`Sink`."
msgstr ""

#: ../../java/stream/stream-integrations.rst:404
msgid ""
"A :class:`Flow` can also be also converted to a "
":class:`RunnableGraph[Processor[In, Out]]` which materializes to a "
":class:`Processor` when ``run()`` is called. ``run()`` itself can be "
"called multiple times, resulting in a new :class:`Processor` instance "
"each time."
msgstr ""

#: ../../java/stream/stream-integrations.rst:410
msgid ""
"A publisher can be connected to a subscriber with the ``subscribe`` "
"method."
msgstr ""

#: ../../java/stream/stream-integrations.rst:412
msgid ""
"It is also possible to expose a :class:`Source` as a :class:`Publisher` "
"by using the Publisher-:class:`Sink`:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:417
msgid ""
"A publisher that is created with "
"``Sink.asPublisher(AsPublisher.WITHOUT_FANOUT)`` supports only a single "
"subscription. Additional subscription attempts will be rejected with an "
":class:`IllegalStateException`."
msgstr ""

#: ../../java/stream/stream-integrations.rst:420
msgid ""
"A publisher that supports multiple subscribers using fan-out/broadcasting"
" is created as follows:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:427
msgid ""
"The input buffer size of the stage controls how far apart the slowest "
"subscriber can be from the fastest subscriber before slowing down the "
"stream."
msgstr ""

#: ../../java/stream/stream-integrations.rst:430
msgid ""
"To make the picture complete, it is also possible to expose a "
":class:`Sink` as a :class:`Subscriber` by using the "
"Subscriber-:class:`Source`:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:435
msgid ""
"It is also possible to use re-wrap :class:`Processor` instances as a "
":class:`Flow` by passing a factory function that will create the "
":class:`Processor` instances:"
msgstr ""

#: ../../java/stream/stream-integrations.rst:440
msgid ""
"Please note that a factory is necessary to achieve reusability of the "
"resulting :class:`Flow`."
msgstr ""

