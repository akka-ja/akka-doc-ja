# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../scala/persistence-query-leveldb.rst:5
msgid "Persistence Query for LevelDB"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:7
msgid ""
"This is documentation for the LevelDB implementation of the :ref"
":`persistence-query-scala` API. Note that implementations for other journals"
" may have different semantics."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:12
msgid ""
"This module is marked as **“experimental”** as of its introduction in Akka "
"2.4.0. We will continue to improve this API based on our users’ feedback, "
"which implies that while we try to keep incompatible changes to a minimum "
"the binary compatibility guarantee for maintenance releases does not apply "
"to the contents of the ``akka.persistence.query`` package."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:18
msgid "Dependencies"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:20
msgid ""
"Akka persistence LevelDB query implementation is bundled in the ``akka-"
"persistence-query-experimental`` artifact. Make sure that you have the "
"following dependency in your project::"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:26
msgid "How to get the ReadJournal"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:28
msgid ""
"The ``ReadJournal`` is retrieved via the "
"``akka.persistence.query.PersistenceQuery`` extension:"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:34
msgid "Supported Queries"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:37
msgid "EventsByPersistenceIdQuery and CurrentEventsByPersistenceIdQuery"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:39
msgid ""
"``eventsByPersistenceId`` is used for retrieving events for a specific "
"``PersistentActor`` identified by ``persistenceId``."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:44
msgid ""
"You can retrieve a subset of all events by specifying ``fromSequenceNr`` and"
" ``toSequenceNr`` or use ``0L`` and ``Long.MaxValue`` respectively to "
"retrieve all events. Note that the corresponding sequence number of each "
"event is provided in the ``EventEnvelope``, which makes it possible to "
"resume the stream at a later point from a given sequence number."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:49
msgid ""
"The returned event stream is ordered by sequence number, i.e. the same order"
" as the ``PersistentActor`` persisted the events. The same prefix of stream "
"elements (in same order) are returned for multiple executions of the query, "
"except for when events have been deleted."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:53
msgid ""
"The stream is not completed when it reaches the end of the currently stored "
"events, but it continues to push new events when new events are persisted. "
"Corresponding query that is completed when it reaches the end of the "
"currently stored events is provided by ``currentEventsByPersistenceId``."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:58
msgid ""
"The LevelDB write journal is notifying the query side as soon as events are "
"persisted, but for efficiency reasons the query side retrieves the events in"
" batches that sometimes can be delayed up to the configured ``refresh-"
"interval`` or given ``RefreshInterval`` hint."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:63
#: ../../scala/persistence-query-leveldb.rst:84
#: ../../scala/persistence-query-leveldb.rst:129
msgid ""
"The stream is completed with failure if there is a failure in executing the "
"query in the backend journal."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:67
msgid "AllPersistenceIdsQuery and CurrentPersistenceIdsQuery"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:69
msgid ""
"``allPersistenceIds`` is used for retrieving all ``persistenceIds`` of all "
"persistent actors."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:73
msgid ""
"The returned event stream is unordered and you can expect different order "
"for multiple executions of the query."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:76
msgid ""
"The stream is not completed when it reaches the end of the currently used "
"`persistenceIds`, but it continues to push new `persistenceIds` when new "
"persistent actors are created. Corresponding query that is completed when it"
" reaches the end of the currently used `persistenceIds` is provided by "
"``currentPersistenceIds``."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:81
msgid ""
"The LevelDB write journal is notifying the query side as soon as new "
"``persistenceIds`` are created and there is no periodic polling or batching "
"involved in this query."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:88
msgid "EventsByTag and CurrentEventsByTag"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:90
msgid ""
"``eventsByTag`` is used for retrieving events that were marked with a given "
"tag, e.g. all domain events of an Aggregate Root type."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:95
msgid ""
"To tag events you create an :ref:`event-adapters-scala` that wraps the "
"events in a ``akka.persistence.journal.Tagged`` with the given ``tags``."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:100
msgid ""
"You can retrieve a subset of all events by specifying ``offset``, or use "
"``0L`` to retrieve all events with a given tag. The ``offset`` corresponds "
"to an ordered sequence number for the specific tag. Note that the "
"corresponding offset of each event is provided in the ``EventEnvelope``, "
"which makes it possible to resume the stream at a later point from a given "
"offset."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:105
msgid ""
"In addition to the ``offset`` the ``EventEnvelope`` also provides "
"``persistenceId`` and ``sequenceNr`` for each event. The ``sequenceNr`` is "
"the sequence number for the persistent actor with the ``persistenceId`` that"
" persisted the event. The ``persistenceId`` + ``sequenceNr`` is an unique "
"identifier for the event."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:110
msgid ""
"The returned event stream is ordered by the offset (tag sequence number), "
"which corresponds to the same order as the write journal stored the events. "
"The same stream elements (in same order) are returned for multiple "
"executions of the query. Deleted events are not deleted from the tagged "
"event stream."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:117
msgid ""
"Events deleted using ``deleteMessages(toSequenceNr)`` are not deleted from "
"the \"tagged stream\"."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:119
msgid ""
"The stream is not completed when it reaches the end of the currently stored "
"events, but it continues to push new events when new events are persisted. "
"Corresponding query that is completed when it reaches the end of the "
"currently stored events is provided by ``currentEventsByTag``."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:124
msgid ""
"The LevelDB write journal is notifying the query side as soon as tagged "
"events are persisted, but for efficiency reasons the query side retrieves "
"the events in batches that sometimes can be delayed up to the configured "
"``refresh-interval`` or given ``RefreshInterval`` hint."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:133
msgid "Configuration"
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:135
msgid ""
"Configuration settings can be defined in the configuration section with the "
"absolute path corresponding to the identifier, which is "
"``\"akka.persistence.query.journal.leveldb\"`` for the default "
"``LeveldbReadJournal.Identifier``."
msgstr ""

#: ../../scala/persistence-query-leveldb.rst:139
msgid "It can be configured with the following properties:"
msgstr ""
