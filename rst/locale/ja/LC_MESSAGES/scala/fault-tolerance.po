# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/fault-tolerance.rst:4
msgid "Fault Tolerance"
msgstr ""

#: ../../scala/fault-tolerance.rst:6
msgid ""
"As explained in :ref:`actor-systems` each actor is the supervisor of its "
"children, and as such each actor defines fault handling supervisor "
"strategy. This strategy cannot be changed afterwards as it is an integral"
" part of the actor system’s structure."
msgstr ""

#: ../../scala/fault-tolerance.rst:12
msgid "Fault Handling in Practice"
msgstr ""

#: ../../scala/fault-tolerance.rst:14
msgid ""
"First, let us look at a sample that illustrates one way to handle data "
"store errors, which is a typical source of failure in real world "
"applications. Of course it depends on the actual application what is "
"possible to do when the data store is unavailable, but in this sample we "
"use a best effort re-connect approach."
msgstr ""

#: ../../scala/fault-tolerance.rst:19
msgid ""
"Read the following source code. The inlined comments explain the "
"different pieces of the fault handling and why they are added. It is also"
" highly recommended to run this sample as it is easy to follow the log "
"output to understand what is happening at runtime."
msgstr ""

#: ../../scala/fault-tolerance.rst:28
msgid "Creating a Supervisor Strategy"
msgstr ""

#: ../../scala/fault-tolerance.rst:30
msgid ""
"The following sections explain the fault handling mechanism and "
"alternatives in more depth."
msgstr ""

#: ../../scala/fault-tolerance.rst:33
msgid "For the sake of demonstration let us consider the following strategy:"
msgstr ""

#: ../../scala/fault-tolerance.rst:38
msgid ""
"I have chosen a few well-known exception types in order to demonstrate "
"the application of the fault handling directives described in "
":ref:`supervision`. First off, it is a one-for-one strategy, meaning that"
" each child is treated separately (an all-for-one strategy works very "
"similarly, the only difference is that any decision is applied to all "
"children of the supervisor, not only the failing one). There are limits "
"set on the restart frequency, namely maximum 10 restarts per minute; each"
" of these settings could be left out, which means that the respective "
"limit does not apply, leaving the possibility to specify an absolute "
"upper limit on the restarts or to make the restarts work infinitely. The "
"child actor is stopped if the limit is exceeded."
msgstr ""

#: ../../scala/fault-tolerance.rst:49
msgid ""
"The match statement which forms the bulk of the body is of type "
"``Decider``, which is a ``PartialFunction[Throwable, Directive]``. This "
"is the piece which maps child failure types to their corresponding "
"directives."
msgstr ""

#: ../../scala/fault-tolerance.rst:55
msgid ""
"If the strategy is declared inside the supervising actor (as opposed to "
"within a companion object) its decider has access to all internal state "
"of the actor in a thread-safe fashion, including obtaining a reference to"
" the currently failed child (available as the ``sender`` of the failure "
"message)."
msgstr ""

#: ../../scala/fault-tolerance.rst:61
msgid "Default Supervisor Strategy"
msgstr ""

#: ../../scala/fault-tolerance.rst:63
msgid ""
"``Escalate`` is used if the defined strategy doesn't cover the exception "
"that was thrown."
msgstr ""

#: ../../scala/fault-tolerance.rst:65
msgid ""
"When the supervisor strategy is not defined for an actor the following "
"exceptions are handled by default:"
msgstr ""

#: ../../scala/fault-tolerance.rst:68
msgid "``ActorInitializationException`` will stop the failing child actor"
msgstr ""

#: ../../scala/fault-tolerance.rst:69
msgid "``ActorKilledException`` will stop the failing child actor"
msgstr ""

#: ../../scala/fault-tolerance.rst:70
msgid "``Exception`` will restart the failing child actor"
msgstr ""

#: ../../scala/fault-tolerance.rst:71
msgid "Other types of ``Throwable`` will be escalated to parent actor"
msgstr ""

#: ../../scala/fault-tolerance.rst:73
msgid ""
"If the exception escalate all the way up to the root guardian it will "
"handle it in the same way as the default strategy defined above."
msgstr ""

#: ../../scala/fault-tolerance.rst:76
msgid "You can combine your own strategy with the default strategy:"
msgstr ""

#: ../../scala/fault-tolerance.rst:82
msgid "Stopping Supervisor Strategy"
msgstr ""

#: ../../scala/fault-tolerance.rst:84
msgid ""
"Closer to the Erlang way is the strategy to just stop children when they "
"fail and then take corrective action in the supervisor when DeathWatch "
"signals the loss of the child. This strategy is also provided pre-"
"packaged as :obj:`SupervisorStrategy.stoppingStrategy` with an "
"accompanying :class:`StoppingSupervisorStrategy` configurator to be used "
"when you want the ``\"/user\"`` guardian to apply it."
msgstr ""

#: ../../scala/fault-tolerance.rst:92
msgid "Logging of Actor Failures"
msgstr ""

#: ../../scala/fault-tolerance.rst:94
msgid ""
"By default the ``SupervisorStrategy`` logs failures unless they are "
"escalated. Escalated failures are supposed to be handled, and potentially"
" logged, at a level higher in the hierarchy."
msgstr ""

#: ../../scala/fault-tolerance.rst:98
msgid ""
"You can mute the default logging of a ``SupervisorStrategy`` by setting "
"``loggingEnabled`` to ``false`` when instantiating it. Customized logging"
" can be done inside the ``Decider``. Note that the reference to the "
"currently failed child is available as the ``sender`` when the "
"``SupervisorStrategy`` is declared inside the supervising actor."
msgstr ""

#: ../../scala/fault-tolerance.rst:104
msgid ""
"You may also customize the logging in your own ``SupervisorStrategy`` "
"implementation by overriding the ``logFailure`` method."
msgstr ""

#: ../../scala/fault-tolerance.rst:108
msgid "Supervision of Top-Level Actors"
msgstr ""

#: ../../scala/fault-tolerance.rst:110
msgid ""
"Toplevel actors means those which are created using ``system.actorOf()``,"
" and they are children of the :ref:`User Guardian <user-guardian>`. There"
" are no special rules applied in this case, the guardian simply applies "
"the configured strategy."
msgstr ""

#: ../../scala/fault-tolerance.rst:116
msgid "Test Application"
msgstr ""

#: ../../scala/fault-tolerance.rst:118
msgid ""
"The following section shows the effects of the different directives in "
"practice, where a test setup is needed. First off, we need a suitable "
"supervisor:"
msgstr ""

#: ../../scala/fault-tolerance.rst:124
msgid ""
"This supervisor will be used to create a child, with which we can "
"experiment:"
msgstr ""

#: ../../scala/fault-tolerance.rst:129
msgid ""
"The test is easier by using the utilities described in :ref:`akka-"
"testkit`."
msgstr ""

#: ../../scala/fault-tolerance.rst:134
msgid "Let us create actors:"
msgstr ""

#: ../../scala/fault-tolerance.rst:139
msgid ""
"The first test shall demonstrate the ``Resume`` directive, so we try it "
"out by setting some non-initial state in the actor and have it fail:"
msgstr ""

#: ../../scala/fault-tolerance.rst:145
msgid ""
"As you can see the value 42 survives the fault handling directive. Now, "
"if we change the failure to a more serious ``NullPointerException``, that"
" will no longer be the case:"
msgstr ""

#: ../../scala/fault-tolerance.rst:152
msgid ""
"And finally in case of the fatal ``IllegalArgumentException`` the child "
"will be terminated by the supervisor:"
msgstr ""

#: ../../scala/fault-tolerance.rst:158
msgid ""
"Up to now the supervisor was completely unaffected by the child’s "
"failure, because the directives set did handle it. In case of an "
"``Exception``, this is not true anymore and the supervisor escalates the "
"failure."
msgstr ""

#: ../../scala/fault-tolerance.rst:165
msgid ""
"The supervisor itself is supervised by the top-level actor provided by "
"the :class:`ActorSystem`, which has the default policy to restart in case"
" of all ``Exception`` cases (with the notable exceptions of "
"``ActorInitializationException`` and ``ActorKilledException``). Since the"
" default directive in case of a restart is to kill all children, we "
"expected our poor child not to survive this failure."
msgstr ""

#: ../../scala/fault-tolerance.rst:172
msgid ""
"In case this is not desired (which depends on the use case), we need to "
"use a different supervisor which overrides this behavior."
msgstr ""

#: ../../scala/fault-tolerance.rst:178
msgid ""
"With this parent, the child survives the escalated restart, as "
"demonstrated in the last test:"
msgstr ""

