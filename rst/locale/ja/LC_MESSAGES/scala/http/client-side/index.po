# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: y2k2mt <y2.k2mt@gmail.com>, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../scala/http/client-side/index.rst:4
msgid "Consuming HTTP-based Services (Client-Side)"
msgstr "HTTPベースのサービスを使う(クライアントサイド)"

#: ../../scala/http/client-side/index.rst:6
msgid ""
"All client-side functionality of Akka HTTP, for consuming HTTP-based "
"services offered by other endpoints, is currently provided by the ``akka-"
"http-core`` module."
msgstr ""
"エンドポイントから提供される、HTTPベースのサービスを使う為の Akka HTTP のクライアントサイドの機能は、 ``akka-http-"
"core`` モジュールで提供されています。"

#: ../../scala/http/client-side/index.rst:9
msgid ""
"It is recommended to first read the :ref:`implications-of-streaming-http-"
"entities` section, as it explains the underlying full-stack streaming "
"concepts, which may be unexpected when coming from a background with "
"non-\"streaming first\" HTTP Clients."
msgstr ""
"まず初めに、\"streaming first\" ではないHTTPクライアントから来た人は、フルスタックなストリーミングのコンセプトを説明している "
":ref:`implications-of-streaming-http-entities` を読む事をお勧めします。"

#: ../../scala/http/client-side/index.rst:13
msgid ""
"Depending on your application's specific needs you can choose from three "
"different API levels:"
msgstr "あなたのアプリケーションの仕様に応じて、三つの異なるAPIを選択する事が出来ます。"

#: ../../scala/http/client-side/index.rst:16
msgid ":ref:`connection-level-api`"
msgstr ":ref:`connection-level-api`"

#: ../../scala/http/client-side/index.rst:16
msgid ""
"for full-control over when HTTP connections are opened/closed and how "
"requests are scheduled across them"
msgstr "HTTPコネクションのオープン/クローズや、リクエストがどのようにスケジュールされるかなどを完全にコントロールする事が出来ます"

#: ../../scala/http/client-side/index.rst:19
msgid ":ref:`host-level-api`"
msgstr ":ref:`host-level-api`"

#: ../../scala/http/client-side/index.rst:19
msgid ""
"for letting Akka HTTP manage a connection-pool to *one specific* host/port "
"endpoint"
msgstr "*特定の* ホスト/ポートへのコネクションプールをAkka HTTP が管理できるようにします。"

#: ../../scala/http/client-side/index.rst:22
msgid ":ref:`request-level-api`"
msgstr ":ref:`request-level-api`"

#: ../../scala/http/client-side/index.rst:22
msgid "for letting Akka HTTP perform all connection management"
msgstr "全てのコネクションをAkka HTTPが管理出来るようにします。"

#: ../../scala/http/client-side/index.rst:24
msgid ""
"You can interact with different API levels at the same time and, "
"independently of which API level you choose, Akka HTTP will happily handle "
"many thousand concurrent connections to a single or many different hosts."
msgstr ""
"異なるレベルのAPIでそれぞれ同時にやり取りする事ができ、また、どのレベルのAPIを選択しても、Akka "
"HTTPは何千ものコネクションを単一もしくは複数のホストに並行して処理する事が出来ます。"
