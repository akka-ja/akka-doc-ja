# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/http/client-side/connection-level.rst:4
msgid "Connection-Level Client-Side API"
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:6
msgid ""
"The connection-level API is the lowest-level client-side API Akka HTTP "
"provides. It gives you full control over when HTTP connections are opened"
" and closed and how requests are to be send across which connection. As "
"such it offers the highest flexibility at the cost of providing the least"
" convenience."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:11
msgid ""
"It is recommended to first read the :ref:`implications-of-streaming-http-"
"entities` section, as it explains the underlying full-stack streaming "
"concepts, which may be unexpected when coming from a background with "
"non-\"streaming first\" HTTP Clients."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:16
msgid "Opening HTTP Connections"
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:18
msgid ""
"With the connection-level API you open a new HTTP connection to a target "
"endpoint by materializing a ``Flow`` returned by the "
"``Http().outgoingConnection(...)`` method. Here is an example:"
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:24
msgid ""
"Apart from the host name and port the ``Http().outgoingConnection(...)`` "
"method also allows you to specify socket options and a number of "
"configuration settings for the connection."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:27
msgid ""
"Note that no connection is attempted until the returned flow is actually "
"materialized! If the flow is materialized several times then several "
"independent connections will be opened (one per materialization). If the "
"connection attempt fails, for whatever reason, the materialized flow will"
" be immediately terminated with a respective exception."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:34
msgid "Request-Response Cycle"
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:36
msgid ""
"Once the connection flow has been materialized it is ready to consume "
"``HttpRequest`` instances from the source it is attached to. Each request"
" is sent across the connection and incoming responses dispatched to the "
"downstream pipeline. Of course and as always, back-pressure is adequately"
" maintained across all parts of the connection. This means that, if the "
"downstream pipeline consuming the HTTP responses is slow, the request "
"source will eventually be slowed down in sending requests."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:42
msgid ""
"Any errors occurring on the underlying connection are surfaced as "
"exceptions terminating the response stream (and canceling the request "
"source)."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:45
msgid ""
"Note that, if the source produces subsequent requests before the prior "
"responses have arrived, these requests will be pipelined__ across the "
"connection, which is something that is not supported by all HTTP servers."
" Also, if the server closes the connection before responses to all "
"requests have been received this will result in the response stream being"
" terminated with a truncation error."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:54
msgid "Closing Connections"
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:56
msgid ""
"Akka HTTP actively closes an established connection upon reception of a "
"response containing ``Connection: close`` header. The connection can also"
" be closed by the server."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:59
msgid ""
"An application can actively trigger the closing of the connection by "
"completing the request stream. In this case the underlying TCP connection"
" will be closed when the last pending response has been received."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:62
msgid ""
"The connection will also be closed if the response entity is cancelled "
"(e.g. by attaching it to ``Sink.cancelled``) or consumed only partially "
"(e.g. by using ``take`` combinator). In order to prevent this behaviour "
"the entity should be explicitly drained by attaching it to "
"``Sink.ignore``."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:68
msgid "Timeouts"
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:70
msgid ""
"Currently Akka HTTP doesn't implement client-side request timeout "
"checking itself as this functionality can be regarded as a more general "
"purpose streaming infrastructure feature."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:73
msgid ""
"It should be noted that Akka Streams provide various timeout "
"functionality so any API that uses streams can benefit from the stream "
"stages such as ``idleTimeout``, ``backpressureTimeout``, "
"``completionTimeout``, ``initialTimeout`` and ``throttle``. To learn more"
" about these refer to their documentation in Akka Streams (and Scala "
"Doc)."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:77
msgid ""
"For more details about timeout support in Akka HTTP in general refer to "
":ref:`http-timeouts-scala`."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:83
msgid "Stand-Alone HTTP Layer Usage"
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:85
msgid ""
"Due to its Reactive-Streams-based nature the Akka HTTP layer is fully "
"detachable from the underlying TCP interface. While in most applications "
"this \"feature\" will not be crucial it can be useful in certain cases to"
" be able to \"run\" the HTTP layer (and, potentially, higher-layers) "
"against data that do not come from the network but rather some other "
"source. Potential scenarios where this might be useful include tests, "
"debugging or low-level event-sourcing (e.g by replaying network traffic)."
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:91
msgid ""
"On the client-side the stand-alone HTTP layer forms a ``BidiStage`` that "
"is defined like this:"
msgstr ""

#: ../../scala/http/client-side/connection-level.rst:96
msgid ""
"You create an instance of ``Http.ClientLayer`` by calling one of the two "
"overloads of the ``Http().clientLayer`` method, which also allows for "
"varying degrees of configuration."
msgstr ""

