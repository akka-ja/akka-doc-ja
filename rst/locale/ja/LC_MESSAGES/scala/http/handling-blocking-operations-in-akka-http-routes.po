# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:4
msgid "Handling blocking operations in Akka HTTP"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:5
msgid ""
"Sometimes it is difficult to avoid performing the blocking operations and"
" there are good chances that the blocking is done inside a Future "
"execute, which may lead to problems. It is important to handle the "
"blocking operations correctly."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:10
msgid "Problem"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:11
msgid ""
"Using ``context.dispatcher`` as the dispatcher on which the blocking "
"Future executes, can be a problem. The same dispatcher is used by the "
"routing infrastructure to actually handle the incoming requests."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:15
msgid ""
"If all of the available threads are blocked, the routing infrastructure "
"will end up *starving*. Therefore, routing infrastructure should not be "
"blocked. Instead, a dedicated dispatcher for blocking operations should "
"be used."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:20
msgid ""
"Blocking APIs should also be avoided if possible. Try to find or build "
"Reactive APIs, such that blocking is minimised, or moved over to "
"dedicated dispatchers."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:23
msgid ""
"Often when integrating with existing libraries or systems it is not "
"possible to avoid blocking APIs, then following solution explains how to "
"handle blocking operations properly."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:27
msgid ""
"Note that the same hints apply to managing blocking operations anywhere "
"in Akka, including in Actors etc."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:30
msgid "In the below thread state diagrams the colours have the following meaning:"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:32
msgid "Turquoise - Sleeping state"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:33
msgid "Orange - Waiting state"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:34
msgid "Green - Runnable state"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:36
msgid ""
"The thread information was recorded using the YourKit profiler, however "
"any good JVM profiler has this feature (including the free and bundled "
"with the Oracle JDK VisualVM as well as Oracle Flight Recorder)."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:40
msgid "Problem example: blocking the default dispatcher"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:45
msgid ""
"Here the app is exposed to load of continous GET requests and large "
"number of akka.actor.default-dispatcher threads are handling requests. "
"The orange portion of the thread shows that they are idle. Idle threads "
"are fine, they're ready to accept new work. However large amounts of "
"Turquoise (sleeping) threads are very bad!"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:52
msgid ""
"After some time, the app is exposed to the load of requesting POST "
"requests, which will block these threads. For example \"``default-akka"
".default-dispatcher2,3,4``\" are going into the blocking state, after "
"being idle before. It can be observed that the number of new threads "
"increase, \"``default-akka.actor.default-dispatcher 18,19,20,...``\" "
"however they go to sleep state immediately, thus wasting the resources."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:59
msgid ""
"The number of such new threads depend on the default dispatcher "
"configuration, but likely will not exceed 50. Since many POST requests "
"are done, the entire thread pool is starved. The blocking operations "
"dominate such that the routing infra has no thread available to handle "
"the other requests."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:64
msgid ""
"In essence, the ``Thread.sleep`` has dominated all threads and caused "
"anything executing on the default dispatcher to starve for resources "
"(including any Actors that you have not configured an explicit dispatcher"
" for (sic!))."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:69
msgid "Solution: Dedicated dispatcher for blocking operations"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:71
msgid ""
"In ``application.conf``, the dispatcher dedicated for blocking behaviour "
"should be configured as follows::"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:84
msgid ""
"There are many dispatcher options available which can be found in :ref"
":`dispatchers-scala`."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:86
msgid ""
"Here ``thread-pool-executor`` is used, which has a hard limit of threads,"
" it can keep available for blocking operations. The size settings depend "
"on the app functionality and the number of cores the server has."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:90
msgid ""
"Whenever blocking has to be done, use the above configured dispatcher "
"instead of the default one:"
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:96
msgid ""
"This forces the app to use the same load, initially normal requests and "
"then the blocking requests. The thread pool behaviour is shown in the "
"figrue."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:101
msgid ""
"Initially, the normal requests are easily handled by default dispatcher, "
"the green lines, which represents the actual execution."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:104
msgid ""
"When blocking operations are issued, the ``my-blocking-dispatcher`` "
"starts up to the number of configured threads. It handles sleeping. After"
" certain period of nothing happening to the threads, it shuts them down."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:108
msgid ""
"If another bunch of operations have to be done, the pool will start new "
"threads that will take care of putting them into sleep state, but the "
"threads are not wasted."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:112
msgid ""
"In this case, the throughput of the normal GET requests are not impacted "
"they were still served on the default dispatcher."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:115
msgid ""
"This is the recommended way of dealing with any kind of blocking in "
"reactive applications. It is referred as \"bulkheading\" or \"isolating\""
" the bad behaving parts of an app. In this case, bad behaviour of "
"blocking operations."
msgstr ""

#: ../../scala/http/handling-blocking-operations-in-akka-http-routes.rst:119
msgid ""
"There is good documentation availabe in Akka docs section, `Blocking "
"needs careful management <http://doc.akka.io/docs/akka/current/general"
"/actor-systems.html#Blocking_Needs_Careful_Management>`_."
msgstr ""

