# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: ckbx_cakebox <norihiro.kakihara@gmail.com>, 2017\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:4
msgid "Case Class Extraction"
msgstr "caseクラスの抽出"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:6
msgid ""
"The value extraction performed by :ref:`Directives` is a nice way of "
"providing your route logic with interesting request properties, all with "
"proper type-safety and error handling. However, in some case you might want "
"even more. Consider this example:"
msgstr ""
":ref:`Directives` "
"によって実行される値の抽出は、適切な型安全性とエラー処理を備えた興味深いリクエストプロパティをルートロジックに提供するうえで便利です。 "
"しかし、場合によってはより多くのことを望むかもしれません。 この例を考えてみましょう。"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:13
msgid ""
"Here the :ref:`-parameters-scala-` directives is employed to extract three "
"``Int`` values, which are then used to construct an instance of the "
"``Color`` case class. So far so good. However, if the model classes we'd "
"like to work with have more than just a few parameters the overhead "
"introduced by capturing the arguments as extractions only to feed them into "
"the model class constructor directly afterwards can somewhat clutter up your"
" route definitions."
msgstr ""
"ここでは、:ref:`-parameters-scala-`ディレクティブを使用して3つの `` Int``値を抽出し、 `` "
"Color``のcaseクラスのインスタンスを構築します。 ここまでは順調ですね。 "
"しかし、モデルクラスがいくつかのパラメータを持っているときに、モデルクラスのコンストラクタに引数を与えるためだけに引数をキャプチャーすることによってオーバーヘッドが導入されると、ルート定義がいくらか乱雑になる可能性があります。"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:18
msgid ""
"If your model classes are case classes, as in our example, Akka HTTP "
"supports an even shorter and more concise syntax. You can also write the "
"example above like this:"
msgstr ""
"モデルクラスがcaseクラスである場合、この例のように、Akka HTTPはさらに短くて簡潔な構文をサポートしています。 "
"上記の例を次のように書くこともできます："

#: ../../scala/http/routing-dsl/case-class-extraction.rst:24
msgid ""
"You can postfix any directive with extractions with an ``as(...)`` call. By "
"simply passing the companion object of your model case class to the ``as`` "
"modifier method the underlying directive is transformed into an equivalent "
"one, which extracts only one value of the type of your model class. Note "
"that there is no reflection involved and your case class does not have to "
"implement any special interfaces. The only requirement is that the directive"
" you attach the ``as`` call to produces the right number of extractions, "
"with the right types and in the right order."
msgstr ""
"任意のディレクティブを ``as(...)``で抽出して後置することができます。 モデルcaseクラスのコンパニオンオブジェクトを単に "
"``as``修飾子メソッドに渡すだけで、基礎となるディレクティブは、モデルクラスの型の1つの値だけを抽出する同等のものに変換されます。 "
"リフレクションは必要ありませんし、caseクラスに特別なインターフェイスを実装する必要もありません。 唯一の要件は、 "
"``as``呼び出しをつけるディレクティブが適切な型と適切な順序で正しい数の抽出を生成することです。"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:30
msgid ""
"If you'd like to construct a case class instance from extractions produced "
"by *several* directives you can first join the directives with the ``&`` "
"operator before using the ``as`` call:"
msgstr ""
"*いくつかの*ディレクティブによって生成された抽出からcaseクラスのインスタンスを構築したい場合は、 "
"``as``呼び出しを使用する前にまずディレクティブを ``&``演算子で結合することができます:"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:36
msgid ""
"Here the ``Color`` class has gotten another member, ``name``, which is "
"supplied not as a parameter but as a path element. By joining the ``path`` "
"and ``parameters`` directives with ``&`` you create a directive extracting 4"
" values, which directly fit the member list of the ``Color`` case class. "
"Therefore you can use the ``as`` modifier to convert the directive into one "
"extracting only a single ``Color`` instance."
msgstr ""
"ここで `` Color``クラスは、パラメータではなくパス要素として提供される ``name``という別のメンバを取得しました。 ``path``と "
"``parameters``ディレクティブを `&``で結合することで、 `` "
"Color``のクラスのメンバーリストに直接適合する4つの値を抽出するディレクティブを作成します。 したがって、 `` "
"as``修飾子を使用して、ディレクティブを1つの `` Color``インスタンスのみを抽出するものに変換することができます。"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:41
msgid ""
"Generally, when you have routes that work with, say, more than 3 extractions"
" it's a good idea to introduce a case class for these and resort to case "
"class extraction. Especially since it supports another nice feature: "
"validation."
msgstr ""
"一般に、3つ以上の抽出とともに動作するルートがある場合は、これらのcaseクラスを導入して、caseクラス抽出に頼るのが良い考えです。 "
"特に、それはもう一つの素晴らしい機能をサポートしています：検証。"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:45
msgid ""
"There is one quirk to look out for when using case class extraction: If you "
"create an explicit companion object for your case class, no matter whether "
"you actually add any members to it or not, the syntax presented above will "
"not (quite) work anymore. Instead of ``as(Color)`` you will then have to say"
" ``as(Color.apply)``. This behavior appears as if it's not really intended, "
"so this might be improved in future Scala versions."
msgstr ""
"caseクラス抽出を使用するときに注意すべき点が1つあります：実際にメンバーを追加するかどうかにかかわらず、caseクラスの明示的なコンパニオンオブジェクトを作成すると、上記の構文はほぼ機能しなくなります"
" 。 `` as(Color) ``の代わりに `` as(Color.apply)``と呼び出す必要があります。 "
"この動作は意図していないように見えるため、今後のScalaバージョンでは改善される可能性があります。"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:52
msgid "Case Class Validation"
msgstr "caseクラス検証"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:54
msgid ""
"In many cases your web service needs to verify input parameters according to"
" some logic before actually working with them. E.g. in the example above the"
" restriction might be that all color component values must be between 0 and "
"255. You could get this done with a few :ref:`-validate-` directives but "
"this would quickly become cumbersome and hard to read."
msgstr ""
"多くの場合、Webサービスは、実際にそれらを操作する前に、ロジックに応じて入力パラメータを検証する必要があります。 "
"例えば、上記の例では、すべての色成分値が0から255の間でなければならないという制限があります。これは、いくつかの:ref:`-validate-`ディレクティブで行うことができますが、これはすぐに面倒で読みにくいものになります。"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:59
msgid ""
"If you use case class extraction you can put the verification logic into the"
" constructor of your case class, where it should be:"
msgstr "caseクラス抽出を使用する場合、検証ロジックをcaseクラスのコンストラクタに入れることができます。"

#: ../../scala/http/routing-dsl/case-class-extraction.rst:65
msgid ""
"If you write your validations like this Akka HTTP's case class extraction "
"logic will properly pick up all error messages and generate a "
"``ValidationRejection`` if something goes wrong. By default, "
"``ValidationRejections`` are converted into ``400 Bad Request`` error "
"response by the default :ref:`RejectionHandler <The RejectionHandler>`, if "
"no subsequent route successfully handles the request."
msgstr ""
"このような検証を書くと、Akka "
"HTTPのケースクラス抽出ロジックは、何か問題が生じた場合に、すべてのエラーメッセージを適切に拾い、``ValidationRejection`` "
"を生成します。 デフォルトでは、 `` ValidationRejections``は、デフォルトの:ref: `RejectionHandler "
"<The RejectionHandler>`によって、 ``400 Bad Request``エラー応答に変換されます。"
