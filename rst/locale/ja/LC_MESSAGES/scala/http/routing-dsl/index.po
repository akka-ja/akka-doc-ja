# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/http/routing-dsl/index.rst:4
msgid "High-level Server-Side API"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:6
msgid ""
"In addition to the :ref:`http-low-level-server-side-api` Akka HTTP "
"provides a very flexible \"Routing DSL\" for elegantly defining RESTful "
"web services. It picks up where the low-level API leaves off and offers "
"much of the higher-level functionality of typical web servers or "
"frameworks, like deconstruction of URIs, content negotiation or static "
"content serving."
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:12
msgid ""
"It is recommended to read the :ref:`implications-of-streaming-http-"
"entities` section, as it explains the underlying full-stack streaming "
"concepts, which may be unexpected when coming from a background with "
"non-\"streaming first\" HTTP Servers."
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:32
msgid "Minimal Example"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:34
msgid ""
"This is a complete, very basic Akka HTTP application relying on the "
"Routing DSL:"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:39
msgid ""
"It starts an HTTP Server on localhost and replies to GET requests to "
"``/hello`` with a simple response."
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:45
msgid "Longer Example"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:47
msgid ""
"The following is an Akka HTTP route definition that tries to show off a "
"few features. The resulting service does not really do anything useful "
"but its definition should give you a feel for what an actual API "
"definition with the Routing DSL will look like:"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:57
msgid "Handling HTTP Server failures in the High-Level API"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:58
msgid ""
"There are various situations when failure may occur while initialising or"
" running an Akka HTTP server. Akka by default will log all these "
"failures, however sometimes one may want to react to failures in addition"
" to them just being logged, for example by shutting down the actor "
"system, or notifying some external monitoring end-point explicitly."
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:64
msgid "Bind failures"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:65
msgid ""
"For example the server might be unable to bind to the given port. For "
"example when the port is already taken by another application, or if the "
"port is privileged (i.e. only usable by ``root``). In this case the "
"\"binding future\" will fail immediately, and we can react to if by "
"listening on the Future's completion:"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:74
msgid ""
"For a more low-level overview of the kinds of failures that can happen "
"and also more fine-grained control over them refer to the :ref:`handling-"
"http-server-failures-low-level-scala` documentation."
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:78
msgid "Failures and exceptions inside the Routing DSL"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:80
msgid ""
"Exception handling within the Routing DSL is done by providing "
":class:`ExceptionHandler` s which are documented in-depth in the :ref"
":`exception-handling-scala` section of the documtnation. You can use them"
" to transform exceptions into :class:`HttpResponse` s with apropriate "
"error codes and human-readable failure descriptions."
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:85
msgid "File uploads"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:86
msgid ""
"For high level directives to handle uploads see the "
":ref:`FileUploadDirectives`."
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:88
msgid ""
"Handling a simple file upload from for example a browser form with a "
"`file` input can be done by accepting a `Multipart.FormData` entity, note"
" that the body parts are `Source` rather than all available right away, "
"and so is the individual body part payload so you will need to consume "
"those streams both for the file and for the form fields."
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:93
msgid ""
"Here is a simple example which just dumps the uploaded file into a "
"temporary file on disk, collects some form fields and saves an entry to a"
" fictive database:"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:99
msgid ""
"You can transform the uploaded files as they arrive rather than storing "
"then in a temporary file as in the previous example. In this example we "
"accept any number of ``.csv`` files, parse those into lines and split "
"each line before we send it to an actor for further processing:"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:107
msgid "Configuring Server-side HTTPS"
msgstr ""

#: ../../scala/http/routing-dsl/index.rst:109
msgid ""
"For detailed documentation about configuring and using HTTPS on the "
"server-side refer to :ref:`serverSideHTTPS-scala`."
msgstr ""

