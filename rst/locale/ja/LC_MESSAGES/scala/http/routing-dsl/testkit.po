# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/http/routing-dsl/testkit.rst:2
msgid "Route TestKit"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:4
msgid ""
"One of Akka HTTP's design goals is good testability of the created "
"services. For services built with the Routing DSL Akka HTTP provides a "
"dedicated testkit that makes efficient testing of route logic easy and "
"convenient. This \"route test DSL\" is made available with the *akka-"
"http-testkit* module. To use it include the following dependency::"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:13
msgid "Usage"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:15
msgid ""
"Here is an example of what a simple test with the routing testkit might "
"look like (using the built-in support for scalatest_):"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:21
msgid ""
"The basic structure of a test built with the testkit is this (expression "
"placeholder in all-caps)::"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:27
msgid ""
"In this template *REQUEST* is an expression evaluating to an "
"``HttpRequest`` instance. In most cases your test will, in one way or "
"another, extend from ``RouteTest`` which itself mixes in the "
"``akka.http.scaladsl.client.RequestBuilding`` trait, which gives you a "
"concise and convenient way of constructing test requests. [1]_"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:32
msgid ""
"*ROUTE* is an expression evaluating to a :ref:`Route <Routes>`. You can "
"specify one inline or simply refer to the route structure defined in your"
" service."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:35
msgid ""
"The final element of the ``~>`` chain is a ``check`` call, which takes a "
"block of assertions as parameter. In this block you define your "
"requirements onto the result produced by your route after having "
"processed the given request. Typically you use one of the defined "
"\"inspectors\" to retrieve a particular element of the routes response "
"and express assertions against it using the test DSL provided by your "
"test framework. For example, with scalatest_, in order to verify that "
"your route responds to the request with a status 200 response, you'd use "
"the ``status`` inspector and express an assertion like this::"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:44
msgid "The following inspectors are defined:"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:47
msgid "Inspector"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:47
msgid "Description"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:49
msgid "``charset: HttpCharset``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:49
msgid "Identical to ``contentType.charset``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:50
msgid "``chunks: Seq[HttpEntity.ChunkStreamPart]``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:50
msgid ""
"Returns the entity chunks produced by the route. If the entity is not "
"``chunked`` returns ``Nil``."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:52
msgid "``closingExtension: String``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:52
msgid ""
"Returns chunk extensions the route produced with its last response chunk."
" If the response entity is unchunked returns the empty string."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:54
msgid "``contentType: ContentType``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:54
msgid "Identical to ``responseEntity.contentType``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:55
msgid "``definedCharset: Option[HttpCharset]``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:55
msgid "Identical to ``contentType.definedCharset``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:56
msgid "``entityAs[T :FromEntityUnmarshaller]: T``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:56
msgid ""
"Unmarshals the response entity using the in-scope "
"``FromEntityUnmarshaller`` for the given type. Any errors in the process "
"trigger a test failure."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:59
msgid "``handled: Boolean``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:59
msgid ""
"Indicates whether the route produced an ``HttpResponse`` for the request."
" If the route rejected the request ``handled`` evaluates to ``false``."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:62
msgid "``header(name: String): Option[HttpHeader]``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:62
msgid ""
"Returns the response header with the given name or ``None`` if no such "
"header is present in the response."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:64
msgid "``header[T <: HttpHeader]: Option[T]``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:64
msgid "Identical to ``response.header[T]``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:65
msgid "``headers: Seq[HttpHeader]``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:65
msgid "Identical to ``response.headers``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:66
msgid "``mediaType: MediaType``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:66
msgid "Identical to ``contentType.mediaType``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:67
msgid "``rejection: Rejection``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:67
msgid ""
"The rejection produced by the route. If the route did not produce exactly"
" one rejection a test failure is triggered."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:69
msgid "``rejections: Seq[Rejection]``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:69
msgid ""
"The rejections produced by the route. If the route did not reject the "
"request a test failure is triggered."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:71
msgid "``response: HttpResponse``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:71
msgid ""
"The ``HttpResponse`` returned by the route. If the route did not return "
"an ``HttpResponse`` instance (e.g. because it rejected the request) a "
"test failure is triggered."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:74
msgid "``responseAs[T: FromResponseUnmarshaller]: T``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:74
msgid ""
"Unmarshals the response entity using the in-scope "
"``FromResponseUnmarshaller`` for the given type. Any errors in the "
"process trigger a test failure."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:77
msgid "``responseEntity: HttpEntity``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:77
msgid "Returns the response entity."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:78
msgid "``status: StatusCode``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:78
msgid "Identical to ``response.status``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:79
msgid "``trailer: Seq[HttpHeader]``"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:79
msgid ""
"Returns the list of trailer headers the route produced with its last "
"chunk. If the response entity is unchunked returns ``Nil``."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:83
msgid ""
"If the request URI is relative it will be made absolute using an "
"implicitly available instance of ``DefaultHostInfo`` whose value is "
"\"http://example.com\" by default. This mirrors the behavior of akka-"
"http-core which always produces absolute URIs for incoming request based "
"on the request URI and the ``Host``-header of the request. You can "
"customize this behavior by bringing a custom instance of "
"``DefaultHostInfo`` into scope."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:90
msgid "Sealing Routes"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:92
msgid ""
"The section above describes how to test a \"regular\" branch of your "
"route structure, which reacts to incoming requests with HTTP response "
"parts or rejections. Sometimes, however, you will want to verify that "
"your service also translates :ref:`rejections-scala` to HTTP responses in"
" the way you expect."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:96
msgid ""
"You do this by wrapping your route with the "
"``akka.http.scaladsl.server.Route.seal``. The ``seal`` wrapper applies "
"the logic of the in-scope :ref:`ExceptionHandler <exception-handling-"
"scala>` and :ref:`RejectionHandler <The RejectionHandler>` to all "
"exceptions and rejections coming back from the route, and translates them"
" to the respective ``HttpResponse``."
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:103
msgid "Examples"
msgstr ""

#: ../../scala/http/routing-dsl/testkit.rst:105
msgid ""
"A great pool of examples are the tests for all the predefined directives "
"in Akka HTTP. They can be found here__."
msgstr ""

