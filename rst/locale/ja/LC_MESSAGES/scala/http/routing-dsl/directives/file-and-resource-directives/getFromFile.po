# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:4
msgid "getFromFile"
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:7
msgid "Signature"
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:13
msgid "Description"
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:15
msgid "Allows exposing a file to be streamed to the client issuing the request."
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:17
msgid ""
"The ``unmatchedPath`` (see :ref:`-extractUnmatchedPath-`) of the "
"``RequestContext`` is first transformed by the given ``pathRewriter`` "
"function, before being appended to the given directory name to build the "
"final file name."
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:20
msgid ""
"To files from a given directory use :ref:`-getFromDirectory-`. To serve "
"browsable directory listings use :ref:`-getFromBrowseableDirectories-`. "
"To serve files from a classpath directory use "
":ref:`-getFromResourceDirectory-` instead."
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:24
msgid ""
"Note that it's not required to wrap this directive with ``get`` as this "
"directive will only respond to ``GET`` requests."
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:27
msgid ""
"The file's contents will be read using an Akka Streams `Source` which "
"*automatically uses a pre-configured dedicated blocking io dispatcher*, "
"which separates the blocking file operations from the rest of the stream."
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:30
msgid ""
"Note also that thanks to using Akka Streams internally, the file will be "
"served at the highest speed reachable by the client, and not faster â€“ "
"i.e. the file will *not* end up being loaded in full into memory before "
"writing it to the client."
msgstr ""

#: ../../scala/http/routing-dsl/directives/file-and-resource-directives/getFromFile.rst:35
msgid "Example"
msgstr ""

