# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:4
msgid "formFields"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:7
msgid "Signature"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:15
msgid ""
"The signature shown is simplified and written in pseudo-syntax, the real "
"signature uses magnets. [1]_ The type ``<FieldDef>`` doesn't really exist "
"but consists of the syntactic variants as shown in the description and the "
"examples."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:18
msgid ""
"See `The Magnet Pattern`_ for an explanation of magnet-based overloading."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:22
msgid "Description"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:23
msgid ""
"Extracts fields from requests generated by HTML forms (independently of "
"``HttpMethod`` used)."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:25
msgid ""
"Form fields can be either extracted as a String or can be converted to "
"another type. The parameter name can be supplied either as a String or as a "
"Symbol. Form field extraction can be modified to mark a field as required, "
"optional, or repeated, or to filter requests where a form field has a "
"certain value:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:29
msgid "``\"color\"``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:30
msgid "extract value of field \"color\" as ``String``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:31
msgid "``\"color\".?``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:32
msgid "extract optional value of field \"color\" as ``Option[String]``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:33
msgid "``\"color\" ? \"red\"``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:34
msgid ""
"extract optional value of field \"color\" as ``String`` with default value "
"``\"red\"``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:35
msgid "``\"color\" ! \"blue\"``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:36
msgid "require value of field \"color\" to be ``\"blue\"`` and extract nothing"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:38
msgid "``\"amount\".as[Int]``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:38
msgid ""
"extract value of field \"amount\" as ``Int``, you need a matching implicit "
"``Unmarshaller`` in scope for that to work (see also :ref:`http-"
"unmarshalling-scala`)"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:40
msgid "``\"amount\".as(unmarshaller)``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:41
msgid "extract value of field \"amount\" with an explicit ``Unmarshaller``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:42
msgid "``\"distance\".*``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:43
msgid "extract multiple occurrences of field \"distance\" as ``Iterable[String]``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:45
msgid "``\"distance\".as[Int].*``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:45
msgid ""
"extract multiple occurrences of field \"distance\" as ``Iterable[Int]``, you"
" need a matching implicit ``Unmarshaller`` in scope for that to work (see "
"also :ref:`http-unmarshalling-scala`)"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:48
msgid "``\"distance\".as(unmarshaller).*``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:48
msgid ""
"extract multiple occurrences of field \"distance\" with an explicit "
"``Unmarshaller``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:50
msgid ""
"You can use :ref:`Case Class Extraction` to group several extracted values "
"together into a case-class instance."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:53
msgid ""
"Requests missing a required field or field value will be rejected with an "
"appropriate rejection."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:55
msgid "There's also a singular version, :ref:`-formField-scala-`."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:57
msgid ""
"Query parameters can be handled in a similar way, see :ref:`-parameters-"
"scala-`."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:60
msgid "Unmarshalling"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:62
msgid ""
"Data POSTed from `HTML forms`_ is either of type ``application/x-www-form-"
"urlencoded`` or of type ``multipart/form-data``. The value of an url-encoded"
" field is a ``String`` while the value of a ``multipart/form-data``-encoded "
"field is a \"body part\" containing an entity. This means that different "
"kind of unmarshallers are needed depending on what the Content-Type of the "
"request is:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:67
msgid ""
"A ``application/x-www-form-urlencoded`` encoded field needs an implicit "
"``Unmarshaller[Option[String], T]``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:68
msgid ""
"A ``multipart/form-data`` encoded field needs an implicit "
"``FromStrictFormFieldUnmarshaller[T]``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:70
msgid ""
"For common data-types, these implicits are predefined so that you usually "
"don't need to care. For custom data-types it should usually suffice to "
"create a ``FromStringUnmarshaller[T]`` if the value will be encoded as a "
"``String``. This should be valid for all values generated by HTML forms "
"apart from file uploads."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:75
msgid "Details"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:77
msgid ""
"It should only be necessary to read and understand this paragraph if you "
"have very special needs and need to process arbitrary forms, especially ones"
" not generated by HTML forms."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:80
msgid ""
"The ``formFields`` directive contains this logic to find and decide how to "
"deserialize a POSTed form field:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:82
msgid ""
"It tries to find implicits of both types at the definition site if possible "
"or otherwise at least one of both. If none is available compilation will "
"fail with an \"implicit not found\" error."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:84
msgid ""
"Depending on the ``Content-Type`` of the incoming request it first tries the"
" matching (see above) one if available."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:85
msgid ""
"If only a ``Unmarshaller[Option[String], T]`` is available when a request of"
" type ``multipart/form-data`` is received, this unmarshaller will be tried "
"to deserialize the body part for a field if the entity is of type "
"``text/plain`` or unspecified."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:88
msgid ""
"If only a ``FromStrictFormFieldUnmarshaller[T]`` is available when a request"
" of type ``application/x-www-form-urlencoded`` is received, this "
"unmarshaller will be tried to deserialize the field value by packing the "
"field value into a body part with an entity of type ``text/plain``. "
"Deserializing will only succeed if the unmarshaller accepts entities of type"
" ``text/plain``."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:93
msgid ""
"If you need to handle encoded fields of a ``multipart/form-data``-encoded "
"request for a custom type, you therefore need to provide a "
"``FromStrictFormFieldUnmarshaller[T]``."
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:100
msgid "Example"
msgstr ""

#: ../../scala/http/routing-dsl/directives/form-field-directives/formFields.rst:105
msgid ""
"For more examples about the way how fields can specified see the examples "
"for the ``parameters`` directive."
msgstr ""
