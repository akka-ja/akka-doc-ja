# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:4
msgid "path"
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:7
msgid "Signature"
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:14
msgid "Description"
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:15
msgid ""
"Matches the complete unmatched path of the ``RequestContext`` against the "
"given ``PathMatcher``, potentially extracts one or more values (depending on"
" the type of the argument)."
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:18
msgid ""
"This directive filters incoming requests based on the part of their URI that"
" hasn't been matched yet by other potentially existing :ref:`-pathPrefix-` "
"directives on higher levels of the routing structure. Its one parameter is "
"usually an expression evaluating to a ``PathMatcher`` instance (see also: "
":ref:`pathmatcher-dsl`)."
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:22
msgid ""
"As opposed to the :ref:`-rawPathPrefix-` or :ref:`-rawPathPrefixTest-` "
"directives ``path`` automatically adds a leading slash to its "
"``PathMatcher`` argument, you therefore don't have to start your matching "
"expression with an explicit slash."
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:25
msgid ""
"The ``path`` directive attempts to match the **complete** remaining path, "
"not just a prefix. If you only want to match a path prefix and then delegate"
" further filtering to a lower level in your routing structure use the "
":ref:`-pathPrefix-` directive instead. As a consequence it doesn't make "
"sense to nest a ``path`` or :ref:`-pathPrefix-` directive underneath another"
" ``path`` directive, as there is no way that they will ever match (since the"
" unmatched path underneath a ``path`` directive will always be empty)."
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:31
msgid ""
"Depending on the type of its ``PathMatcher`` argument the ``path`` directive"
" extracts zero or more values from the URI. If the match fails the request "
"is rejected with an :ref:`empty rejection set <empty rejections>`."
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:34
msgid ""
"The empty string (also called empty word or identity) is a **neutral "
"element** of string concatenation operation, so it will match everything, "
"but remember that ``path`` requires whole remaining path being matched, so "
"(``/``) will succeed and (``/whatever``) will fail. The :ref:`-pathPrefix-` "
"provides more liberal behaviour."
msgstr ""

#: ../../scala/http/routing-dsl/directives/path-directives/path.rst:40
msgid "Example"
msgstr ""
