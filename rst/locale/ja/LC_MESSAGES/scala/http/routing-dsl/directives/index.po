# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/http/routing-dsl/directives/index.rst:4
msgid "Directives"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:6
msgid ""
"A \"Directive\" is a small building block used for creating arbitrarily "
"complex :ref:`route structures <Routes>`. Akka HTTP already pre-defines a"
" large number of directives and you can easily construct your own:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:18
msgid "Basics"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:20
msgid ""
"Directives create :ref:`Routes`. To understand how directives work it is "
"helpful to contrast them with the \"primitive\" way of creating routes."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:23
msgid ""
"Since ``Route`` is just a type alias for a function type ``Route`` "
"instances can be written in any way in which function instances can be "
"written, e.g. as a function literal::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:28
msgid "or shorter::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:32
msgid "With the :ref:`-complete-` directive this becomes even shorter::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:36
msgid ""
"These three ways of writing this ``Route`` are fully equivalent, the "
"created ``route`` will behave identically in all cases."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:39
msgid ""
"Let's look at a slightly more complicated example to highlight one "
"important point in particular. Consider these two routes::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:52
msgid ""
"The difference between ``a`` and ``b`` is when the ``println`` statement "
"is executed. In the case of ``a`` it is executed *once*, when the route "
"is constructed, whereas in the case of ``b`` it is executed every time "
"the route is *run*."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:56
msgid ""
"Using the :ref:`-complete-` directive the same effects are achieved like "
"this::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:68
msgid ""
"This works because the argument to the :ref:`-complete-` directive is "
"evaluated *by-name*, i.e. it is re-evaluated every time the produced "
"route is run."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:71
msgid "Let's take things one step further::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:80
msgid ""
"Using the :ref:`-get-` and :ref:`-complete-` directives we can write this"
" route like this::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:88
msgid "Again, the produced routes will behave identically in all cases."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:90
msgid ""
"Note that, if you wish, you can also mix the two styles of route "
"creation::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:98
msgid ""
"Here, the inner route of the :ref:`-get-` directive is written as an "
"explicit function literal."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:100
msgid ""
"However, as you can see from these examples, building routes with "
"directives rather than \"manually\" results in code that is a lot more "
"concise and as such more readable and maintainable. In addition it "
"provides for better composability (as you will see in the coming "
"sections). So, when using Akka HTTP's Routing DSL you should almost never"
" have to fall back to creating routes via ``Route`` function literals "
"that directly manipulate the :ref:`RequestContext`."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:107
msgid "Structure"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:109
msgid "The general anatomy of a directive is as follows::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:115
msgid ""
"It has a name, zero or more arguments and optionally an inner route (The "
":ref:`RouteDirectives` are special in that they are always used at the "
"leaf-level and as such cannot have inner routes). Additionally directives"
" can \"extract\" a number of values and make them available to their "
"inner routes as function arguments. When seen \"from the outside\" a "
"directive with its inner route form an expression of type ``Route``."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:122
msgid "What Directives do"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:124
msgid "A directive can do one or more of the following:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:128
msgid ""
"Transform the incoming ``RequestContext`` before passing it on to its "
"inner route (i.e. modify the request)"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:129
msgid ""
"Filter the ``RequestContext`` according to some logic, i.e. only pass on "
"certain requests and reject others"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:130
msgid ""
"Extract values from the ``RequestContext`` and make them available to its"
" inner route as \"extractions\""
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:131
msgid ""
"Chain some logic into the :ref:`RouteResult` future transformation chain "
"(i.e. modify the response or rejection)"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:132
msgid "Complete the request"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:134
msgid ""
"This means a ``Directive`` completely wraps the functionality of its "
"inner route and can apply arbitrarily complex transformations, both (or "
"either) on the request and on the response side."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:139
msgid "Composing Directives"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:141
msgid ""
"Gotcha: forgetting the ``~`` (tilde) character in between directives can "
"result in perfectly valid Scala code that compiles but does not work as "
"expected. What would be intended as a single expression would actually be"
" multiple expressions, and only the final one would be used as the result"
" of the parent directive. Alternatively, you might choose to use the "
"``concat`` combinator. ``concat(a, b, c)`` is the same as ``a ~ b ~ c``."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:144
msgid ""
"As you have seen from the examples presented so far the \"normal\" way of"
" composing directives is nesting. Let's take a look at this concrete "
"example:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:150
msgid ""
"Here the ``get`` and ``put`` directives are chained together with the "
"``~`` operator to form a higher-level route that serves as the inner "
"route of the ``path`` directive. To make this structure more explicit you"
" could also write the whole thing like this:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:157
msgid ""
"What you can't see from this snippet is that directives are not "
"implemented as simple methods but rather as stand-alone objects of type "
"``Directive``. This gives you more flexibility when composing directives."
" For example you can also use the ``|`` operator on directives. Here is "
"yet another way to write the example:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:164
msgid ""
"Or better (without dropping down to writing an explicit ``Route`` "
"function manually):"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:169
msgid ""
"If you have a larger route structure where the ``(get | put)`` snippet "
"appears several times you could also factor it out like this:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:175
msgid ""
"Note that, because ``getOrPut`` doesn't take any parameters, it can be a "
"``val`` here."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:177
msgid "As an alternative to nesting you can also use the `&` operator:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:182
msgid ""
"Here you can see that, when directives producing extractions are combined"
" with ``&``, the resulting \"super-directive\" simply extracts the "
"concatenation of its sub-extractions."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:185
msgid ""
"And once again, you can factor things out if you want, thereby pushing "
"the \"factoring out\" of directive configurations to its extreme:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:191
msgid ""
"This type of combining directives with the ``|`` and ``&`` operators as "
"well as \"saving\" more complex directive configurations as a ``val`` "
"works across the board, with all directives taking inner routes."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:194
msgid ""
"Note that going this far with \"compressing\" several directives into a "
"single one probably doesn't result in the most readable and therefore "
"maintainable routing code. It might even be that the very first of this "
"series of examples is in fact the most readable one."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:198
msgid ""
"Still, the purpose of the exercise presented here is to show you how "
"flexible directives can be and how you can use their power to define your"
" web service behavior at the level of abstraction that is right for "
"**your** application."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:203
msgid "Type Safety of Directives"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:205
msgid ""
"When you combine directives with the ``|`` and ``&`` operators the "
"routing DSL makes sure that all extractions work as expected and logical "
"constraints are enforced at compile-time."
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:208
msgid ""
"For example you cannot ``|`` a directive producing an extraction with one"
" that doesn't::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:212
msgid "Also the number of extractions and their types have to match up::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:217
msgid ""
"When you combine directives producing extractions with the ``&`` operator"
" all extractions will be properly gathered up::"
msgstr ""

#: ../../scala/http/routing-dsl/directives/index.rst:225
msgid ""
"Directives offer a great way of constructing your web service logic from "
"small building blocks in a plug and play fashion while maintaining "
"DRYness and full type-safety. If the large range of :ref:`Predefined "
"Directives` does not fully satisfy your needs you can also easily create "
":ref:`Custom Directives`."
msgstr ""

