# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:4
msgid "entity"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:7
msgid "Signature"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:13
msgid "Description"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:14
msgid ""
"Unmarshalls the request entity to the given type and passes it to its "
"inner Route.  An unmarshaller returns an ``Either`` with ``Right(value)``"
" if successful or ``Left(exception)`` for a failure. The ``entity`` "
"method will either pass the ``value`` to the inner route or map the "
"``exception`` to a ``akka.http.scaladsl.server.Rejection``."
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:19
msgid ""
"The ``entity`` directive works in conjuction with ``as`` and "
"``akka.http.scaladsl.unmarshalling`` to convert some serialized \"wire "
"format\" value into a higher-level object structure. :ref:`The "
"unmarshalling documentation <http-unmarshalling-scala>` explains this "
"process in detail. This directive simplifies extraction and error "
"handling to the specified type from the request."
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:24
msgid ""
"An unmarshaller will return a ``Left(exception)`` in the case of an "
"error.  This is converted to a ``akka.http.scaladsl.server.Rejection`` "
"within the ``entity`` directive.  The following table lists how "
"exceptions are mapped to rejections:"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:29
msgid "Left(exception)"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:29
msgid "Rejection"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:31
msgid "``ContentExpected``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:31
msgid "``RequestEntityExpectedRejection``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:32
msgid "``UnsupportedContentType``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:32
msgid ""
"``UnsupportedRequestContentTypeRejection``, which lists the supported "
"types"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:33
msgid "``MaformedContent``"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:33
msgid "``MalformedRequestContentRejection``, with an error message and cause"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:37
msgid "Examples"
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:39
msgid ""
"The following example uses ``spray-json`` to unmarshall a json request "
"into a simple ``Person`` class.  It utilizes ``SprayJsonSupport`` via the"
" ``PersonJsonSupport`` object as the in-scope unmarshaller."
msgstr ""

#: ../../scala/http/routing-dsl/directives/marshalling-directives/entity.rst:52
msgid ""
"It is also possible to use the ``entity`` directive to obtain raw "
"``JsValue`` ( spray-json_ ) objects, by simply using ``as[JsValue]``, or "
"any other JSON type for which you have marshallers in-scope."
msgstr ""

