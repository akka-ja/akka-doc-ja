# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/http/routing-dsl/routes.rst:4
msgid "Routes"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:6
msgid ""
"The \"Route\" is the central concept of Akka HTTP's Routing DSL. All the "
"structures you build with the DSL, no matter whether they consists of a "
"single line or span several hundred lines, are instances of this type::"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:11
msgid ""
"It's a simple alias for a function turning a ``RequestContext`` into a "
"``Future[RouteResult]``."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:13
msgid ""
"Generally when a route receives a request (or rather a ``RequestContext``"
" for it) it can do one of these things:"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:15
msgid ""
"Complete the request by returning the value of "
"``requestContext.complete(...)``"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:16
msgid ""
"Reject the request by returning the value of "
"``requestContext.reject(...)`` (see :ref:`rejections-scala`)"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:17
msgid ""
"Fail the request by returning the value of ``requestContext.fail(...)`` "
"or by just throwing an exception (see :ref:`exception-handling-scala`)"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:18
msgid ""
"Do any kind of asynchronous processing and instantly return a "
"``Future[RouteResult]`` to be eventually completed later"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:20
msgid ""
"The first case is pretty clear, by calling ``complete`` a given response "
"is sent to the client as reaction to the request. In the second case "
"\"reject\" means that the route does not want to handle the request. "
"You'll see further down in the section about route composition what this "
"is good for."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:24
msgid ""
"A ``Route`` can be \"sealed\" using ``Route.seal``, which relies on the "
"in-scope ``RejectionHandler`` and ``ExceptionHandler`` instances to "
"convert rejections and exceptions into appropriate HTTP responses for the"
" client."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:27
msgid ""
"Using ``Route.handlerFlow`` or ``Route.asyncHandler`` a ``Route`` can be "
"lifted into a handler ``Flow`` or async handler function to be used with "
"a ``bindAndHandleXXX`` call from the :ref:`http-low-level-server-side-"
"api`."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:30
msgid ""
"Note: There is also an implicit conversion from ``Route`` to "
"``Flow[HttpRequest, HttpResponse, Unit]`` defined in the ``RouteResult`` "
"companion, which relies on ``Route.handlerFlow``."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:37
msgid "RequestContext"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:39
msgid ""
"The request context wraps an ``HttpRequest`` instance to enrich it with "
"additional information that are typically required by the routing logic, "
"like an ``ExecutionContext``, ``Materializer``, ``LoggingAdapter`` and "
"the configured ``RoutingSettings``. It also contains the "
"``unmatchedPath``, a value that describes how much of the request URI has"
" not yet been matched by a :ref:`Path Directive <PathDirectives>`."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:44
msgid ""
"The ``RequestContext`` itself is immutable but contains several helper "
"methods which allow for convenient creation of modified copies."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:51
msgid "RouteResult"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:53
msgid ""
"``RouteResult`` is a simple abstract data type (ADT) that models the "
"possible non-error results of a ``Route``. It is defined as such::"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:63
msgid ""
"Usually you don't create any ``RouteResult`` instances yourself, but "
"rather rely on the pre-defined :ref:`RouteDirectives` (like "
":ref:`-complete-`, :ref:`-reject-` or :ref:`-redirect-`) or the "
"respective methods on the :ref:`RequestContext` instead."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:69
msgid "Composing Routes"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:71
msgid ""
"There are three basic operations we need for building more complex routes"
" from simpler ones:"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:73
msgid ""
"Route transformation, which delegates processing to another, \"inner\" "
"route but in the process changes some properties of either the incoming "
"request, the outgoing response or both"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:75
msgid ""
"Route filtering, which only lets requests satisfying a given filter "
"condition pass and rejects all others"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:76
msgid ""
"Route chaining, which tries a second route if a given first one was "
"rejected"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:78
msgid ""
"The last point is achieved with the concatenation operator ``~``, which "
"is an extension method that becomes available when you ``import "
"akka.http.scaladsl.server.Directives._``. The first two points are "
"provided by so-called :ref:`Directives` of which a large number is "
"already predefined by Akka HTTP and which you can also easily create "
"yourself. :ref:`Directives` deliver most of Akka HTTP's power and "
"flexibility."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:88
msgid "The Routing Tree"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:90
msgid ""
"Essentially, when you combine directives and custom routes via nesting "
"and the ``~`` operator, you build a routing structure that forms a tree. "
"When a request comes in it is injected into this tree at the root and "
"flows down through all the branches in a depth-first manner until either "
"some node completes it or it is fully rejected."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:94
msgid "Consider this schematic example::"
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:112
msgid "Here five directives form a routing tree."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:114
msgid ""
"Route 1 will only be reached if directives ``a``, ``b`` and ``c`` all let"
" the request pass through."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:115
msgid "Route 2 will run if ``a`` and ``b`` pass, ``c`` rejects and ``d`` passes."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:116
msgid "Route 3 will run if ``a`` and ``b`` pass, but ``c`` and ``d`` reject."
msgstr ""

#: ../../scala/http/routing-dsl/routes.rst:118
msgid ""
"Route 3 can therefore be seen as a \"catch-all\" route that only kicks "
"in, if routes chained into preceding positions reject. This mechanism can"
" make complex filtering logic quite easy to implement: simply put the "
"most specific cases up front and the most general cases in the back."
msgstr ""

