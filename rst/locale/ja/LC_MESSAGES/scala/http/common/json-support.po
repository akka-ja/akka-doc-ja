# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../scala/http/common/json-support.rst:4
msgid "JSON Support"
msgstr ""

#: ../../scala/http/common/json-support.rst:6
msgid ""
"Akka HTTP's :ref:`marshalling <http-marshalling-scala>` and "
":ref:`unmarshalling <http-unmarshalling-scala>` infrastructure makes it "
"rather easy to seamlessly support specific wire representations of your data"
" objects, like JSON, XML or even binary encodings."
msgstr ""

#: ../../scala/http/common/json-support.rst:10
msgid ""
"For JSON Akka HTTP currently provides support for `spray-json`_ right out of"
" the box through it's ``akka-http-spray-json`` module."
msgstr ""

#: ../../scala/http/common/json-support.rst:13
msgid ""
"Other JSON libraries are supported by the community. See `the list of "
"current community extensions for Akka HTTP`_."
msgstr ""

#: ../../scala/http/common/json-support.rst:19
msgid "spray-json Support"
msgstr ""

#: ../../scala/http/common/json-support.rst:21
msgid ""
"The SprayJsonSupport_ trait provides a ``FromEntityUnmarshaller[T]`` and "
"``ToEntityMarshaller[T]`` for every type ``T`` that an implicit "
"``spray.json.RootJsonReader`` and/or ``spray.json.RootJsonWriter`` "
"(respectively) is available for."
msgstr ""

#: ../../scala/http/common/json-support.rst:24
msgid ""
"This is how you enable automatic support for (un)marshalling from and to "
"JSON with `spray-json`_:"
msgstr ""

#: ../../scala/http/common/json-support.rst:26
msgid ""
"Add a library dependency onto ``\"com.typesafe.akka\" %% \"akka-http-spray-"
"json-experimental\" % \"@version@\"``."
msgstr ""

#: ../../scala/http/common/json-support.rst:28
msgid ""
"``import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._`` or "
"mix in the ``akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport`` "
"trait."
msgstr ""

#: ../../scala/http/common/json-support.rst:31
msgid ""
"Provide a ``RootJsonFormat[T]`` for your type and bring it into scope. Check"
" out the `spray-json`_ documentation for more info on how to do this."
msgstr ""

#: ../../scala/http/common/json-support.rst:34
msgid ""
"Once you have done this (un)marshalling between JSON and your type ``T`` "
"should work nicely and transparently."
msgstr ""

#: ../../scala/http/common/json-support.rst:39
msgid ""
"By default, spray-json marshals your types to pretty printed json by "
"implicit conversion using PrettyPrinter, as defined in ``implicit def "
"sprayJsonMarshallerConverter[T](writer: RootJsonWriter[T])(implicit printer:"
" JsonPrinter = PrettyPrinter): ToEntityMarshaller[T]``. Alternately to "
"marshal your types to compact printed json, bring a ``CompactPrinter`` in "
"scope to perform implicit conversion."
msgstr ""

#: ../../scala/http/common/json-support.rst:46
msgid ""
"To learn more about how spray-json works please refer to its `documentation "
"<https://github.com/spray/spray-json>`_."
msgstr ""
