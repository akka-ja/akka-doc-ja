# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/logging.rst:5
msgid "Logging"
msgstr ""

#: ../../scala/logging.rst:7
msgid ""
"Logging in Akka is not tied to a specific logging backend. By default log"
" messages are printed to STDOUT, but you can plug-in a SLF4J logger or "
"your own logger. Logging is performed asynchronously to ensure that "
"logging has minimal performance impact. Logging generally means IO and "
"locks, which can slow down the operations of your code if it was "
"performed synchronously."
msgstr ""

#: ../../scala/logging.rst:15
msgid "How to Log"
msgstr ""

#: ../../scala/logging.rst:17
msgid ""
"Create a ``LoggingAdapter`` and use the ``error``, ``warning``, ``info``,"
" or ``debug`` methods, as illustrated in this example:"
msgstr ""

#: ../../scala/logging.rst:23
msgid ""
"For convenience you can mixin the ``log`` member into actors, instead of "
"defining it as above."
msgstr ""

#: ../../scala/logging.rst:31
msgid ""
"The second parameter to the ``Logging`` is the source of this logging "
"channel. The source object is translated to a String according to the "
"following rules:"
msgstr ""

#: ../../scala/logging.rst:34
msgid "if it is an Actor or ActorRef, its path is used"
msgstr ""

#: ../../scala/logging.rst:35
msgid "in case of a String it is used as is"
msgstr ""

#: ../../scala/logging.rst:36
msgid "in case of a class an approximation of its simpleName"
msgstr ""

#: ../../scala/logging.rst:37
msgid ""
"and in all other cases a compile error occurs unless and implicit "
":class:`LogSource[T]` is in scope for the type in question."
msgstr ""

#: ../../scala/logging.rst:40
msgid ""
"The log message may contain argument placeholders ``{}``, which will be "
"substituted if the log level is enabled. Giving more arguments as there "
"are placeholders results in a warning being appended to the log statement"
" (i.e. on the same line with the same severity). You may pass a Java "
"array as the only substitution argument to have its elements be treated "
"individually:"
msgstr ""

#: ../../scala/logging.rst:48
msgid ""
"The Java :class:`Class` of the log source is also included in the "
"generated :class:`LogEvent`. In case of a simple string this is replaced "
"with a “marker” class :class:`akka.event.DummyClassForStringSources` in "
"order to allow special treatment of this case, e.g. in the SLF4J event "
"listener which will then use the string instead of the class’ name for "
"looking up the logger instance to use."
msgstr ""

#: ../../scala/logging.rst:56
msgid "Logging of Dead Letters"
msgstr ""

#: ../../scala/logging.rst:58
msgid ""
"By default messages sent to dead letters are logged at info level. "
"Existence of dead letters does not necessarily indicate a problem, but it"
" might be, and therefore they are logged by default. After a few messages"
" this logging is turned off, to avoid flooding the logs. You can disable "
"this logging completely or adjust how many dead letters that are logged. "
"During system shutdown it is likely that you see dead letters, since "
"pending messages in the actor mailboxes are sent to dead letters. You can"
" also disable logging of dead letters during shutdown."
msgstr ""

#: ../../scala/logging.rst:73
msgid ""
"To customize the logging further or take other actions for dead letters "
"you can subscribe to the :ref:`event-stream-scala`."
msgstr ""

#: ../../scala/logging.rst:77
msgid "Auxiliary logging options"
msgstr ""

#: ../../scala/logging.rst:79
msgid ""
"Akka has a couple of configuration options for very low level debugging, "
"that makes most sense in for developers and not for operations."
msgstr ""

#: ../../scala/logging.rst:82
msgid ""
"You almost definitely need to have logging set to DEBUG to use any of the"
" options below:"
msgstr ""

#: ../../scala/logging.rst:90
msgid ""
"This config option is very good if you want to know what config settings "
"are loaded by Akka:"
msgstr ""

#: ../../scala/logging.rst:100
msgid ""
"If you want very detailed logging of user-level messages then wrap your "
"actors' behaviors with ``akka.event.LoggingReceive`` and enable the "
"``receive`` option:"
msgstr ""

#: ../../scala/logging.rst:115
msgid ""
"If you want very detailed logging of all automatically received messages "
"that are processed by Actors:"
msgstr ""

#: ../../scala/logging.rst:129
msgid ""
"If you want very detailed logging of all lifecycle changes of Actors "
"(restarts, deaths etc):"
msgstr ""

#: ../../scala/logging.rst:142
msgid "If you want unhandled messages logged at DEBUG:"
msgstr ""

#: ../../scala/logging.rst:155
msgid ""
"If you want very detailed logging of all events, transitions and timers "
"of FSM Actors that extend LoggingFSM:"
msgstr ""

#: ../../scala/logging.rst:168
msgid ""
"If you want to monitor subscriptions (subscribe/unsubscribe) on the "
"ActorSystem.eventStream:"
msgstr ""

#: ../../scala/logging.rst:182
msgid "Auxiliary remote logging options"
msgstr ""

#: ../../scala/logging.rst:184
msgid ""
"If you want to see all messages that are sent through remoting at DEBUG "
"log level: (This is logged as they are sent by the transport layer, not "
"by the Actor)"
msgstr ""

#: ../../scala/logging.rst:197
msgid ""
"If you want to see all messages that are received through remoting at "
"DEBUG log level: (This is logged as they are received by the transport "
"layer, not by any Actor)"
msgstr ""

#: ../../scala/logging.rst:210
msgid ""
"If you want to see message types with payload size in bytes larger than a"
" specified limit at INFO log level:"
msgstr ""

#: ../../scala/logging.rst:227
msgid "Also see the logging options for TestKit: :ref:`actor.logging-scala`."
msgstr ""

#: ../../scala/logging.rst:230
msgid "Translating Log Source to String and Class"
msgstr ""

#: ../../scala/logging.rst:232
msgid ""
"The rules for translating the source object to the source string and "
"class which are inserted into the :class:`LogEvent` during runtime are "
"implemented using implicit parameters and thus fully customizable: simply"
" create your own instance of :class:`LogSource[T]` and have it in scope "
"when creating the logger."
msgstr ""

#: ../../scala/logging.rst:240
msgid ""
"This example creates a log source which mimics traditional usage of Java "
"loggers, which are based upon the originating object’s class name as log "
"category. The override of :meth:`getClazz` is only included for "
"demonstration purposes as it contains exactly the default behavior."
msgstr ""

#: ../../scala/logging.rst:247
msgid ""
"You may also create the string representation up front and pass that in "
"as the log source, but be aware that then the :class:`Class[_]` which "
"will be put in the :class:`LogEvent` is "
":class:`akka.event.DummyClassForStringSources`."
msgstr ""

#: ../../scala/logging.rst:252
msgid ""
"The SLF4J event listener treats this case specially (using the actual "
"string to look up the logger instance to use instead of the class’ name),"
" and you might want to do this also in case you implement your own "
"logging adapter."
msgstr ""

#: ../../scala/logging.rst:257
msgid "Turn Off Logging"
msgstr ""

#: ../../scala/logging.rst:259
msgid ""
"To turn off logging you can configure the log levels to be ``OFF`` like "
"this."
msgstr ""

#: ../../scala/logging.rst:268
msgid ""
"The ``stdout-loglevel`` is only in effect during system startup and "
"shutdown, and setting it to ``OFF`` as well, ensures that nothing gets "
"logged during system startup or shutdown."
msgstr ""

#: ../../scala/logging.rst:272
msgid "Loggers"
msgstr ""

#: ../../scala/logging.rst:274
msgid ""
"Logging is performed asynchronously through an event bus. Log events are "
"processed by an event handler actor and it will receive the log events in"
" the same order as they were emitted."
msgstr ""

#: ../../scala/logging.rst:278
msgid ""
"The event handler actor does not have a bounded inbox and is run on the "
"default dispatcher. This means that logging extreme amounts of data may "
"affect your application badly. It can be somewhat mitigated by making "
"sure to use an async logging backend though. (See :ref:`slf4j-directly-"
"scala`)"
msgstr ""

#: ../../scala/logging.rst:282
msgid ""
"You can configure which event handlers are created at system start-up and"
" listen to logging events. That is done using the ``loggers`` element in "
"the :ref:`configuration`. Here you can also define the log level. More "
"fine grained filtering based on the log source can be implemented in a "
"custom ``LoggingFilter``, which can be defined in the ``logging-filter`` "
"configuration property."
msgstr ""

#: ../../scala/logging.rst:298
msgid ""
"The default one logs to STDOUT and is registered by default. It is not "
"intended to be used for production. There is also an :ref:`slf4j-scala` "
"logger available in the 'akka-slf4j' module."
msgstr ""

#: ../../scala/logging.rst:302
msgid "Example of creating a listener:"
msgstr ""

#: ../../scala/logging.rst:308
msgid "Logging to stdout during startup and shutdown"
msgstr ""

#: ../../scala/logging.rst:310
msgid ""
"When the actor system is starting up and shutting down the configured "
"``loggers`` are not used. Instead log messages are printed to stdout "
"(System.out). The default log level for this stdout logger is ``WARNING``"
" and it can be silenced completely by setting ``akka.stdout-"
"loglevel=OFF``."
msgstr ""

#: ../../scala/logging.rst:318
msgid "SLF4J"
msgstr ""

#: ../../scala/logging.rst:320
msgid ""
"Akka provides a logger for `SL4FJ <http://www.slf4j.org/>`_. This module "
"is available in the 'akka-slf4j.jar'. It has one single dependency; the "
"slf4j-api jar. In runtime you also need a SLF4J backend, we recommend "
"`Logback <http://logback.qos.ch/>`_:"
msgstr ""

#: ../../scala/logging.rst:328
msgid ""
"You need to enable the Slf4jLogger in the ``loggers`` element in the "
":ref:`configuration`. Here you can also define the log level of the event"
" bus. More fine grained log levels can be defined in the configuration of"
" the SLF4J backend (e.g. logback.xml). You should also define "
"``akka.event.slf4j.Slf4jLoggingFilter`` in the ``logging-filter`` "
"configuration property. It will filter the log events using the backend "
"configuration (e.g. logback.xml) before they are published to the event "
"bus."
msgstr ""

#: ../../scala/logging.rst:336
msgid ""
"If you set the ``loglevel`` to a higher level than \"DEBUG\", any DEBUG "
"events will be filtered out already at the source and will never reach "
"the logging backend, regardless of how the backend is configured."
msgstr ""

#: ../../scala/logging.rst:348
msgid ""
"One gotcha is that the timestamp is attributed in the event handler, not "
"when actually doing the logging."
msgstr ""

#: ../../scala/logging.rst:350
msgid ""
"The SLF4J logger selected for each log event is chosen based on the "
":class:`Class[_]` of the log source specified when creating the "
":class:`LoggingAdapter`, unless that was given directly as a string in "
"which case that string is used (i.e. ``LoggerFactory.getLogger(c: "
"Class[_])`` is used in the first case and ``LoggerFactory.getLogger(s: "
"String)`` in the second)."
msgstr ""

#: ../../scala/logging.rst:358
msgid ""
"Beware that the actor system’s name is appended to a :class:`String` log "
"source if the LoggingAdapter was created giving an :class:`ActorSystem` "
"to the factory. If this is not intended, give a :class:`LoggingBus` "
"instead as shown below:"
msgstr ""

#: ../../scala/logging.rst:370
msgid "Using the SLF4J API directly"
msgstr ""

#: ../../scala/logging.rst:371
msgid ""
"If you use the SLF4J API directly in your application, remember that the "
"logging operations will block while the underlying infrastructure writes "
"the log statements."
msgstr ""

#: ../../scala/logging.rst:374
msgid ""
"This can be avoided by configuring the logging implementation to use a "
"non-blocking appender. Logback provides `AsyncAppender "
"<http://logback.qos.ch/manual/appenders.html#AsyncAppender>`_ that does "
"this. It also contains a feature which will drop ``INFO`` and ``DEBUG`` "
"messages if the logging load is high."
msgstr ""

#: ../../scala/logging.rst:380
msgid "Logging Thread, Akka Source and Actor System in MDC"
msgstr ""

#: ../../scala/logging.rst:382
#, python-format
msgid ""
"Since the logging is done asynchronously the thread in which the logging "
"was performed is captured in Mapped Diagnostic Context (MDC) with "
"attribute name ``sourceThread``. With Logback the thread name is "
"available with ``%X{sourceThread}`` specifier within the pattern layout "
"configuration::"
msgstr ""

#: ../../scala/logging.rst:394
msgid ""
"It will probably be a good idea to use the ``sourceThread`` MDC value "
"also in non-Akka parts of the application in order to have this property "
"consistently available in the logs."
msgstr ""

#: ../../scala/logging.rst:398
msgid ""
"Another helpful facility is that Akka captures the actor’s address when "
"instantiating a logger within it, meaning that the full instance "
"identification is available for associating log messages e.g. with "
"members of a router. This information is available in the MDC with "
"attribute name ``akkaSource``::"
msgstr ""

#: ../../scala/logging.rst:409
msgid ""
"Finally, the actor system in which the logging was performed is available"
" in the MDC with attribute name ``sourceActorSystem``::"
msgstr ""

#: ../../scala/logging.rst:418
msgid ""
"For more details on what this attribute contains—also for non-"
"actors—please see `How to Log`_."
msgstr ""

#: ../../scala/logging.rst:423
msgid "More accurate timestamps for log output in MDC"
msgstr ""

#: ../../scala/logging.rst:425
msgid ""
"Akka's logging is asynchronous which means that the timestamp of a log "
"entry is taken from when the underlying logger implementation is called, "
"which can be surprising at first. If you want to more accurately output "
"the timestamp, use the MDC attribute ``akkaTimestamp``::"
msgstr ""

#: ../../scala/logging.rst:436
msgid "MDC values defined by the application"
msgstr ""

#: ../../scala/logging.rst:438
msgid ""
"One useful feature available in Slf4j is `MDC "
"<http://logback.qos.ch/manual/mdc.html>`_, Akka has a way for let the "
"application specify custom values, you just need to get a specialized "
":class:`LoggingAdapter`, the :class:`DiagnosticLoggingAdapter`. In order "
"to get it you will use the factory receiving an Actor as logSource:"
msgstr ""

#: ../../scala/logging.rst:448
msgid ""
"Once you have the logger, you just need to add the custom values before "
"you log something. This way, the values will be put in the SLF4J MDC "
"right before appending the log and removed after."
msgstr ""

#: ../../scala/logging.rst:453
msgid ""
"The cleanup (removal) should be done in the actor at the end, otherwise, "
"next message will log with same mdc values, if it is not set to a new "
"map. Use ``log.clearMDC()``."
msgstr ""

#: ../../scala/logging.rst:459
msgid ""
"For convenience you can mixin the ``log`` member into actors, instead of "
"defining it as above. This trait also lets you override ``def mdc(msg: "
"Any): MDC`` for specifying MDC values depending on current message and "
"lets you forget about the cleanup as well, since it already does it for "
"you."
msgstr ""

#: ../../scala/logging.rst:466
msgid ""
"Now, the values will be available in the MDC, so you can use them in the "
"layout pattern::"
msgstr ""

