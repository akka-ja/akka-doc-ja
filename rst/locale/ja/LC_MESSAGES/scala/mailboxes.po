# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../scala/mailboxes.rst:4
msgid "Mailboxes"
msgstr ""

#: ../../scala/mailboxes.rst:6
msgid ""
"An Akka ``Mailbox`` holds the messages that are destined for an "
"``Actor``. Normally each ``Actor`` has its own mailbox, but with for "
"example a ``BalancingPool`` all routees will share a single mailbox "
"instance."
msgstr ""

#: ../../scala/mailboxes.rst:11
msgid "Mailbox Selection"
msgstr ""

#: ../../scala/mailboxes.rst:14
msgid "Requiring a Message Queue Type for an Actor"
msgstr ""

#: ../../scala/mailboxes.rst:16
msgid ""
"It is possible to require a certain type of message queue for a certain "
"type of actor by having that actor extend the parameterized trait "
":class:`RequiresMessageQueue`. Here is an example:"
msgstr ""

#: ../../scala/mailboxes.rst:22
msgid ""
"The type parameter to the :class:`RequiresMessageQueue` trait needs to be"
" mapped to a mailbox in configuration like this:"
msgstr ""

#: ../../scala/mailboxes.rst:28
msgid ""
"Now every time you create an actor of type :class:`MyBoundedActor` it "
"will try to get a bounded mailbox. If the actor has a different mailbox "
"configured in deployment, either directly or via a dispatcher with a "
"specified mailbox type, then that will override this mapping."
msgstr ""

#: ../../scala/mailboxes.rst:34
msgid ""
"The type of the queue in the mailbox created for an actor will be checked"
" against the required type in the trait and if the queue doesn't "
"implement the required type then actor creation will fail."
msgstr ""

#: ../../scala/mailboxes.rst:38
msgid "Requiring a Message Queue Type for a Dispatcher"
msgstr ""

#: ../../scala/mailboxes.rst:40
msgid ""
"A dispatcher may also have a requirement for the mailbox type used by the"
" actors running on it. An example is the BalancingDispatcher which "
"requires a message queue that is thread-safe for multiple concurrent "
"consumers. Such a requirement is formulated within the dispatcher "
"configuration section like this::"
msgstr ""

#: ../../scala/mailboxes.rst:50
msgid ""
"The given requirement names a class or interface which will then be "
"ensured to be a supertype of the message queue’s implementation. In case "
"of a conflict—e.g. if the actor requires a mailbox type which does not "
"satisfy this requirement—then actor creation will fail."
msgstr ""

#: ../../scala/mailboxes.rst:56
msgid "How the Mailbox Type is Selected"
msgstr ""

#: ../../scala/mailboxes.rst:58
msgid ""
"When an actor is created, the :class:`ActorRefProvider` first determines "
"the dispatcher which will execute it. Then the mailbox is determined as "
"follows:"
msgstr ""

#: ../../scala/mailboxes.rst:61
msgid ""
"If the actor’s deployment configuration section contains a ``mailbox`` "
"key then that names a configuration section describing the mailbox type "
"to be used."
msgstr ""

#: ../../scala/mailboxes.rst:65
msgid ""
"If the actor’s ``Props`` contains a mailbox selection—i.e. "
"``withMailbox`` was called on it—then that names a configuration section "
"describing the mailbox type to be used."
msgstr ""

#: ../../scala/mailboxes.rst:69
msgid ""
"If the dispatcher’s configuration section contains a ``mailbox-type`` key"
" the same section will be used to configure the mailbox type."
msgstr ""

#: ../../scala/mailboxes.rst:72
msgid ""
"If the actor requires a mailbox type as described above then the mapping "
"for that requirement will be used to determine the mailbox type to be "
"used; if that fails then the dispatcher’s requirement—if any—will be "
"tried instead."
msgstr ""

#: ../../scala/mailboxes.rst:76
msgid ""
"If the dispatcher requires a mailbox type as described above then the "
"mapping for that requirement will be used to determine the mailbox type "
"to be used."
msgstr ""

#: ../../scala/mailboxes.rst:80
msgid "The default mailbox ``akka.actor.default-mailbox`` will be used."
msgstr ""

#: ../../scala/mailboxes.rst:83
msgid "Default Mailbox"
msgstr ""

#: ../../scala/mailboxes.rst:85
msgid ""
"When the mailbox is not specified as described above the default mailbox "
"is used. By default it is an unbounded mailbox, which is backed by a "
"``java.util.concurrent.ConcurrentLinkedQueue``."
msgstr ""

#: ../../scala/mailboxes.rst:89
msgid ""
"``SingleConsumerOnlyUnboundedMailbox`` is an even more efficient mailbox,"
" and it can be used as the default mailbox, but it cannot be used with a "
"BalancingDispatcher."
msgstr ""

#: ../../scala/mailboxes.rst:92
msgid ""
"Configuration of ``SingleConsumerOnlyUnboundedMailbox`` as default "
"mailbox::"
msgstr ""

#: ../../scala/mailboxes.rst:99
msgid "Which Configuration is passed to the Mailbox Type"
msgstr ""

#: ../../scala/mailboxes.rst:101
msgid ""
"Each mailbox type is implemented by a class which extends "
":class:`MailboxType` and takes two constructor arguments: a "
":class:`ActorSystem.Settings` object and a :class:`Config` section. The "
"latter is computed by obtaining the named configuration section from the "
"actor system’s configuration, overriding its ``id`` key with the "
"configuration path of the mailbox type and adding a fall-back to the "
"default mailbox configuration section."
msgstr ""

#: ../../scala/mailboxes.rst:109
msgid "Builtin Mailbox Implementations"
msgstr ""

#: ../../scala/mailboxes.rst:111
msgid "Akka comes shipped with a number of mailbox implementations:"
msgstr ""

#: ../../scala/mailboxes.rst:113
msgid "**UnboundedMailbox** (default)"
msgstr ""

#: ../../scala/mailboxes.rst:115
msgid "The default mailbox"
msgstr ""

#: ../../scala/mailboxes.rst:117
msgid "Backed by a ``java.util.concurrent.ConcurrentLinkedQueue``"
msgstr ""

#: ../../scala/mailboxes.rst:119 ../../scala/mailboxes.rst:131
#: ../../scala/mailboxes.rst:153 ../../scala/mailboxes.rst:165
#: ../../scala/mailboxes.rst:177
msgid "Blocking: No"
msgstr ""

#: ../../scala/mailboxes.rst:121 ../../scala/mailboxes.rst:133
#: ../../scala/mailboxes.rst:155 ../../scala/mailboxes.rst:167
#: ../../scala/mailboxes.rst:179
msgid "Bounded: No"
msgstr ""

#: ../../scala/mailboxes.rst:123
msgid ""
"Configuration name: ``\"unbounded\"`` or "
"``\"akka.dispatch.UnboundedMailbox\"``"
msgstr ""

#: ../../scala/mailboxes.rst:125
msgid "**SingleConsumerOnlyUnboundedMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:127
msgid ""
"This queue may or may not be faster than the default one depending on "
"your use-case—be sure to benchmark properly!"
msgstr ""

#: ../../scala/mailboxes.rst:129
msgid ""
"Backed by a Multiple-Producer Single-Consumer queue, cannot be used with "
"``BalancingDispatcher``"
msgstr ""

#: ../../scala/mailboxes.rst:135
msgid ""
"Configuration name: "
"``\"akka.dispatch.SingleConsumerOnlyUnboundedMailbox\"``"
msgstr ""

#: ../../scala/mailboxes.rst:137
msgid "**NonBlockingBoundedMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:139
msgid "Backed by a very efficient Multiple-Producer Single-Consumer queue"
msgstr ""

#: ../../scala/mailboxes.rst:141
msgid "Blocking: No (discards overflowing messages into deadLetters)"
msgstr ""

#: ../../scala/mailboxes.rst:143 ../../scala/mailboxes.rst:194
#: ../../scala/mailboxes.rst:206 ../../scala/mailboxes.rst:218
#: ../../scala/mailboxes.rst:230
msgid "Bounded: Yes"
msgstr ""

#: ../../scala/mailboxes.rst:145
msgid "Configuration name: ``\"akka.dispatch.NonBlockingBoundedMailbox\"``"
msgstr ""

#: ../../scala/mailboxes.rst:147
msgid "**UnboundedControlAwareMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:149 ../../scala/mailboxes.rst:224
msgid ""
"Delivers messages that extend ``akka.dispatch.ControlMessage`` with "
"higher priority"
msgstr ""

#: ../../scala/mailboxes.rst:151
msgid "Backed by two ``java.util.concurrent.ConcurrentLinkedQueue``"
msgstr ""

#: ../../scala/mailboxes.rst:157
msgid "Configuration name: \"akka.dispatch.UnboundedControlAwareMailbox\""
msgstr ""

#: ../../scala/mailboxes.rst:159
msgid "**UnboundedPriorityMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:161
msgid "Backed by a ``java.util.concurrent.PriorityBlockingQueue``"
msgstr ""

#: ../../scala/mailboxes.rst:163
msgid ""
"Delivery order for messages of equal priority is undefined - contrast "
"with the UnboundedStablePriorityMailbox"
msgstr ""

#: ../../scala/mailboxes.rst:169
msgid "Configuration name: \"akka.dispatch.UnboundedPriorityMailbox\""
msgstr ""

#: ../../scala/mailboxes.rst:171
msgid "**UnboundedStablePriorityMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:173
msgid ""
"Backed by a ``java.util.concurrent.PriorityBlockingQueue`` wrapped in an "
"``akka.util.PriorityQueueStabilizer``"
msgstr ""

#: ../../scala/mailboxes.rst:175
msgid ""
"FIFO order is preserved for messages of equal priority - contrast with "
"the UnboundedPriorityMailbox"
msgstr ""

#: ../../scala/mailboxes.rst:181
msgid "Configuration name: \"akka.dispatch.UnboundedStablePriorityMailbox\""
msgstr ""

#: ../../scala/mailboxes.rst:183
msgid ""
"Other bounded mailbox implementations which will block the sender if the "
"capacity is reached and configured with non-zero ``mailbox-push-timeout-"
"time``."
msgstr ""

#: ../../scala/mailboxes.rst:186
msgid ""
"The following mailboxes should only be used with zero ``mailbox-push-"
"timeout-time``."
msgstr ""

#: ../../scala/mailboxes.rst:188
msgid "**BoundedMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:190
msgid "Backed by a ``java.util.concurrent.LinkedBlockingQueue``"
msgstr ""

#: ../../scala/mailboxes.rst:192 ../../scala/mailboxes.rst:204
#: ../../scala/mailboxes.rst:216 ../../scala/mailboxes.rst:228
msgid ""
"Blocking: Yes if used with non-zero ``mailbox-push-timeout-time``, "
"otherwise No"
msgstr ""

#: ../../scala/mailboxes.rst:196
msgid "Configuration name: \"bounded\" or \"akka.dispatch.BoundedMailbox\""
msgstr ""

#: ../../scala/mailboxes.rst:198
msgid "**BoundedPriorityMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:200
msgid ""
"Backed by a ``java.util.PriorityQueue`` wrapped in an "
"``akka.util.BoundedBlockingQueue``"
msgstr ""

#: ../../scala/mailboxes.rst:202
msgid ""
"Delivery order for messages of equal priority is undefined - contrast "
"with the ``BoundedStablePriorityMailbox``"
msgstr ""

#: ../../scala/mailboxes.rst:208
msgid "Configuration name: ``\"akka.dispatch.BoundedPriorityMailbox\"``"
msgstr ""

#: ../../scala/mailboxes.rst:210
msgid "**BoundedStablePriorityMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:212
msgid ""
"Backed by a ``java.util.PriorityQueue`` wrapped in an "
"``akka.util.PriorityQueueStabilizer`` and an "
"``akka.util.BoundedBlockingQueue``"
msgstr ""

#: ../../scala/mailboxes.rst:214
msgid ""
"FIFO order is preserved for messages of equal priority - contrast with "
"the BoundedPriorityMailbox"
msgstr ""

#: ../../scala/mailboxes.rst:220
msgid "Configuration name: \"akka.dispatch.BoundedStablePriorityMailbox\""
msgstr ""

#: ../../scala/mailboxes.rst:222
msgid "**BoundedControlAwareMailbox**"
msgstr ""

#: ../../scala/mailboxes.rst:226
msgid ""
"Backed by two ``java.util.concurrent.ConcurrentLinkedQueue`` and blocking"
" on enqueue if capacity has been reached"
msgstr ""

#: ../../scala/mailboxes.rst:232
msgid "Configuration name: \"akka.dispatch.BoundedControlAwareMailbox\""
msgstr ""

#: ../../scala/mailboxes.rst:236
msgid "Mailbox configuration examples"
msgstr ""

#: ../../scala/mailboxes.rst:239
msgid "PriorityMailbox"
msgstr ""

#: ../../scala/mailboxes.rst:241
msgid "How to create a PriorityMailbox:"
msgstr ""

#: ../../scala/mailboxes.rst:245
msgid "And then add it to the configuration:"
msgstr ""

#: ../../scala/mailboxes.rst:249 ../../scala/mailboxes.rst:280
msgid "And then an example on how you would use it:"
msgstr ""

#: ../../scala/mailboxes.rst:253
msgid "It is also possible to configure a mailbox type directly like this:"
msgstr ""

#: ../../scala/mailboxes.rst:258
msgid "And then use it either from deployment like this:"
msgstr ""

#: ../../scala/mailboxes.rst:262
msgid "Or code like this:"
msgstr ""

#: ../../scala/mailboxes.rst:267
msgid "ControlAwareMailbox"
msgstr ""

#: ../../scala/mailboxes.rst:269
msgid ""
"A ``ControlAwareMailbox`` can be very useful if an actor needs to be able"
" to receive control messages immediately no matter how many other "
"messages are already in its mailbox."
msgstr ""

#: ../../scala/mailboxes.rst:272
msgid "It can be configured like this:"
msgstr ""

#: ../../scala/mailboxes.rst:276
msgid "Control messages need to extend the ``ControlMessage`` trait:"
msgstr ""

#: ../../scala/mailboxes.rst:285
msgid "Creating your own Mailbox type"
msgstr ""

#: ../../scala/mailboxes.rst:287
msgid "An example is worth a thousand quacks:"
msgstr ""

#: ../../scala/mailboxes.rst:291
msgid ""
"And then you just specify the FQCN of your MailboxType as the value of "
"the \"mailbox-type\" in the dispatcher configuration, or the mailbox "
"configuration."
msgstr ""

#: ../../scala/mailboxes.rst:296
msgid ""
"Make sure to include a constructor which takes "
"``akka.actor.ActorSystem.Settings`` and ``com.typesafe.config.Config`` "
"arguments, as this constructor is invoked reflectively to construct your "
"mailbox type. The config passed in as second argument is that section "
"from the configuration which describes the dispatcher or mailbox setting "
"using this mailbox type; the mailbox type will be instantiated once for "
"each dispatcher or mailbox setting using it."
msgstr ""

#: ../../scala/mailboxes.rst:304
msgid "You can also use the mailbox as a requirement on the dispatcher like this:"
msgstr ""

#: ../../scala/mailboxes.rst:309
msgid "Or by defining the requirement on your actor class like this:"
msgstr ""

#: ../../scala/mailboxes.rst:315
msgid "Special Semantics of ``system.actorOf``"
msgstr ""

#: ../../scala/mailboxes.rst:317
msgid ""
"In order to make ``system.actorOf`` both synchronous and non-blocking "
"while keeping the return type :class:`ActorRef` (and the semantics that "
"the returned ref is fully functional), special handling takes place for "
"this case. Behind the scenes, a hollow kind of actor reference is "
"constructed, which is sent to the system’s guardian actor who actually "
"creates the actor and its context and puts those inside the reference. "
"Until that has happened, messages sent to the :class:`ActorRef` will be "
"queued locally, and only upon swapping the real filling in will they be "
"transferred into the real mailbox. Thus,"
msgstr ""

#: ../../scala/mailboxes.rst:333
msgid ""
"will probably fail; you will have to allow for some time to pass and "
"retry the check à la :meth:`TestKit.awaitCond`."
msgstr ""

