# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../scala/routing.rst:5
msgid "Routing"
msgstr ""

#: ../../scala/routing.rst:7
msgid ""
"Messages can be sent via a router to efficiently route them to destination "
"actors, known as its *routees*. A ``Router`` can be used inside or outside "
"of an actor, and you can manage the routees yourselves or use a self "
"contained router actor with configuration capabilities."
msgstr ""

#: ../../scala/routing.rst:11
msgid ""
"Different routing strategies can be used, according to your application's "
"needs. Akka comes with several useful routing strategies right out of the "
"box. But, as you will see in this chapter, it is also possible to "
":ref:`create your own <custom-router-scala>`."
msgstr ""

#: ../../scala/routing.rst:18
msgid "A Simple Router"
msgstr ""

#: ../../scala/routing.rst:20
msgid ""
"The following example illustrates how to use a ``Router`` and manage the "
"routees from within an actor."
msgstr ""

#: ../../scala/routing.rst:24
msgid ""
"We create a ``Router`` and specify that it should use "
"``RoundRobinRoutingLogic`` when routing the messages to the routees."
msgstr ""

#: ../../scala/routing.rst:27
msgid "The routing logic shipped with Akka are:"
msgstr ""

#: ../../scala/routing.rst:29
msgid "``akka.routing.RoundRobinRoutingLogic``"
msgstr ""

#: ../../scala/routing.rst:30
msgid "``akka.routing.RandomRoutingLogic``"
msgstr ""

#: ../../scala/routing.rst:31
msgid "``akka.routing.SmallestMailboxRoutingLogic``"
msgstr ""

#: ../../scala/routing.rst:32
msgid "``akka.routing.BroadcastRoutingLogic``"
msgstr ""

#: ../../scala/routing.rst:33
msgid "``akka.routing.ScatterGatherFirstCompletedRoutingLogic``"
msgstr ""

#: ../../scala/routing.rst:34
msgid "``akka.routing.TailChoppingRoutingLogic``"
msgstr ""

#: ../../scala/routing.rst:35
msgid "``akka.routing.ConsistentHashingRoutingLogic``"
msgstr ""

#: ../../scala/routing.rst:37
msgid ""
"We create the routees as ordinary child actors wrapped in "
"``ActorRefRoutee``. We watch the routees to be able to replace them if they "
"are terminated."
msgstr ""

#: ../../scala/routing.rst:40
msgid ""
"Sending messages via the router is done with the ``route`` method, as is "
"done for the ``Work`` messages in the example above."
msgstr ""

#: ../../scala/routing.rst:43
msgid ""
"The ``Router`` is immutable and the ``RoutingLogic`` is thread safe; meaning"
" that they can also be used outside of actors."
msgstr ""

#: ../../scala/routing.rst:48
msgid ""
"In general, any message sent to a router will be sent onwards to its "
"routees, but there is one exception. The special :ref:`broadcast-messages-"
"scala` will send to *all* of a router's routees. However, do not use :ref"
":`broadcast-messages-scala` when you use :ref:`balancing-pool-scala` for "
"routees as described in :ref:`router-special-messages-scala`."
msgstr ""

#: ../../scala/routing.rst:55
msgid "A Router Actor"
msgstr ""

#: ../../scala/routing.rst:57
msgid ""
"A router can also be created as a self contained actor that manages the "
"routees itself and loads routing logic and other settings from "
"configuration."
msgstr ""

#: ../../scala/routing.rst:60
msgid "This type of router actor comes in two distinct flavors:"
msgstr ""

#: ../../scala/routing.rst:62
msgid ""
"Pool - The router creates routees as child actors and removes them from the "
"router if they terminate."
msgstr ""

#: ../../scala/routing.rst:65
msgid ""
"Group - The routee actors are created externally to the router and the "
"router sends messages to the specified path using actor selection, without "
"watching for termination."
msgstr ""

#: ../../scala/routing.rst:68
msgid ""
"The settings for a router actor can be defined in configuration or "
"programmatically. In order to make an actor to make use of an externally "
"configurable router the ``FromConfig`` props wrapper must be used to denote "
"that the actor accepts routing settings from configuration. This is in "
"contrast with Remote Deployment where such marker props is not necessary. If"
" the props of an actor is NOT wrapped in FromConfig it will ignore the "
"router section of the deployment configuration."
msgstr ""

#: ../../scala/routing.rst:74
msgid ""
"You send messages to the routees via the router actor in the same way as for"
" ordinary actors, i.e. via its ``ActorRef``. The router actor forwards "
"messages onto its routees without changing the original sender. When a "
"routee replies to a routed message, the reply will be sent to the original "
"sender, not to the router actor."
msgstr ""

#: ../../scala/routing.rst:81
msgid ""
"In general, any message sent to a router will be sent onwards to its "
"routees, but there are a few exceptions. These are documented in the :ref"
":`router-special-messages-scala` section below."
msgstr ""

#: ../../scala/routing.rst:85
msgid "Pool"
msgstr ""

#: ../../scala/routing.rst:87
msgid ""
"The following code and configuration snippets show how to create a :ref"
":`round-robin <round-robin-router-scala>` router that forwards messages to "
"five ``Worker`` routees. The routees will be created as the router's "
"children."
msgstr ""

#: ../../scala/routing.rst:95 ../../scala/routing.rst:179
msgid ""
"Here is the same example, but with the router configuration provided "
"programmatically instead of from configuration."
msgstr ""

#: ../../scala/routing.rst:101
msgid "Remote Deployed Routees"
msgstr ""

#: ../../scala/routing.rst:103
msgid ""
"In addition to being able to create local actors as routees, you can "
"instruct the router to deploy its created children on a set of remote hosts."
" Routees will be deployed in round-robin fashion. In order to deploy routees"
" remotely, wrap the router configuration in a ``RemoteRouterConfig``, "
"attaching the remote addresses of the nodes to deploy to. Remote deployment "
"requires the ``akka-remote`` module to be included in the classpath."
msgstr ""

#: ../../scala/routing.rst:112
msgid "Senders"
msgstr ""

#: ../../scala/routing.rst:114
msgid ""
"By default, when a routee sends a message, it will :ref:`implicitly set "
"itself as the sender <actors-tell-sender-scala>`."
msgstr ""

#: ../../scala/routing.rst:119
msgid ""
"However, it is often useful for routees to set the *router* as a sender. For"
" example, you might want to set the router as the sender if you want to hide"
" the details of the routees behind the router. The following code snippet "
"shows how to set the parent router as sender."
msgstr ""

#: ../../scala/routing.rst:127
msgid "Supervision"
msgstr ""

#: ../../scala/routing.rst:129
msgid ""
"Routees that are created by a pool router will be created as the router's "
"children. The router is therefore also the children's supervisor."
msgstr ""

#: ../../scala/routing.rst:132
msgid ""
"The supervision strategy of the router actor can be configured with the "
"``supervisorStrategy`` property of the Pool. If no configuration is "
"provided, routers default to a strategy of “always escalate”. This means "
"that errors are passed up to the router's supervisor for handling. The "
"router's supervisor will decide what to do about any errors."
msgstr ""

#: ../../scala/routing.rst:137
msgid ""
"Note the router's supervisor will treat the error as an error with the "
"router itself. Therefore a directive to stop or restart will cause the "
"router *itself* to stop or restart. The router, in turn, will cause its "
"children to stop and restart."
msgstr ""

#: ../../scala/routing.rst:141
msgid ""
"It should be mentioned that the router's restart behavior has been "
"overridden so that a restart, while still re-creating the children, will "
"still preserve the same number of actors in the pool."
msgstr ""

#: ../../scala/routing.rst:144
msgid ""
"This means that if you have not specified :meth:`supervisorStrategy` of the "
"router or its parent a failure in a routee will escalate to the parent of "
"the router, which will by default restart the router, which will restart all"
" routees (it uses Escalate and does not stop routees during restart). The "
"reason is to make the default behave such that adding :meth:`.withRouter` to"
" a child’s definition does not change the supervision strategy applied to "
"the child. This might be an inefficiency that you can avoid by specifying "
"the strategy when defining the router."
msgstr ""

#: ../../scala/routing.rst:151
msgid "Setting the strategy is easily done:"
msgstr ""

#: ../../scala/routing.rst:159
msgid ""
"If the child of a pool router terminates, the pool router will not "
"automatically spawn a new child. In the event that all children of a pool "
"router have terminated the router will terminate itself unless it is a "
"dynamic router, e.g. using a resizer."
msgstr ""

#: ../../scala/routing.rst:165
msgid "Group"
msgstr ""

#: ../../scala/routing.rst:167
msgid ""
"Sometimes, rather than having the router actor create its routees, it is "
"desirable to create routees separately and provide them to the router for "
"its use. You can do this by passing an paths of the routees to the router's "
"configuration. Messages will be sent with ``ActorSelection`` to these paths."
msgstr ""

#: ../../scala/routing.rst:172
msgid ""
"The example below shows how to create a router by providing it with the path"
" strings of three routee actors."
msgstr ""

#: ../../scala/routing.rst:184
msgid "The routee actors are created externally from the router:"
msgstr ""

#: ../../scala/routing.rst:190
msgid ""
"The paths may contain protocol and address information for actors running on"
" remote hosts. Remoting requires the ``akka-remote`` module to be included "
"in the classpath."
msgstr ""

#: ../../scala/routing.rst:196
msgid "Router usage"
msgstr ""

#: ../../scala/routing.rst:198
msgid ""
"In this section we will describe how to create the different types of router"
" actors."
msgstr ""

#: ../../scala/routing.rst:200
msgid ""
"The router actors in this section are created from within a top level actor "
"named ``parent``. Note that deployment paths in the configuration starts "
"with ``/parent/`` followed by the name of the router actor."
msgstr ""

#: ../../scala/routing.rst:209
msgid "RoundRobinPool and RoundRobinGroup"
msgstr ""

#: ../../scala/routing.rst:211
msgid ""
"Routes in a `round-robin <http://en.wikipedia.org/wiki/Round-robin>`_ "
"fashion to its routees."
msgstr ""

#: ../../scala/routing.rst:213
msgid "RoundRobinPool defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:219
msgid "RoundRobinPool defined in code:"
msgstr ""

#: ../../scala/routing.rst:223
msgid "RoundRobinGroup defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:229
msgid "RoundRobinGroup defined in code:"
msgstr ""

#: ../../scala/routing.rst:235
msgid "RandomPool and RandomGroup"
msgstr ""

#: ../../scala/routing.rst:237
msgid "This router type selects one of its routees randomly for each message."
msgstr ""

#: ../../scala/routing.rst:239
msgid "RandomPool defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:245
msgid "RandomPool defined in code:"
msgstr ""

#: ../../scala/routing.rst:249
msgid "RandomGroup defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:255
msgid "RandomGroup defined in code:"
msgstr ""

#: ../../scala/routing.rst:263
msgid "BalancingPool"
msgstr ""

#: ../../scala/routing.rst:265
msgid ""
"A Router that will try to redistribute work from busy routees to idle "
"routees. All routees share the same mailbox."
msgstr ""

#: ../../scala/routing.rst:270
msgid ""
"The BalancingPool has the property that its routees do not have truly "
"distinct identity: they have different names, but talking to them will not "
"end up at the right actor in most cases. Therefore you cannot use it for "
"workflows that require state to be kept within the routee, you would in this"
" case have to include the whole state in the messages."
msgstr ""

#: ../../scala/routing.rst:276
msgid ""
"With a `SmallestMailboxPool`_ you can have a vertically scaling service that"
" can interact in a stateful fashion with other services in the back-end "
"before replying to the original client. The other advantage is that it does "
"not place a restriction on the message queue implementation as BalancingPool"
" does."
msgstr ""

#: ../../scala/routing.rst:282
msgid ""
"Do not use :ref:`broadcast-messages-scala` when you use :ref:`balancing-"
"pool-scala` for routers. as described in :ref:`router-special-messages-"
"scala`,"
msgstr ""

#: ../../scala/routing.rst:286
msgid "BalancingPool defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:292
msgid "BalancingPool defined in code:"
msgstr ""

#: ../../scala/routing.rst:296
msgid ""
"Addition configuration for the balancing dispatcher, which is used by the "
"pool, can be configured in the ``pool-dispatcher`` section of the router "
"deployment configuration."
msgstr ""

#: ../../scala/routing.rst:302
msgid ""
"The ``BalancingPool`` automatically uses a special ``BalancingDispatcher`` "
"for its routees - disregarding any dispatcher that is set on the routee "
"Props object. This is needed in order to implement the balancing semantics "
"via sharing the same mailbox by all the routees."
msgstr ""

#: ../../scala/routing.rst:307
msgid ""
"While it is not possible to change the dispatcher used by the routees, it is"
" possible to fine tune the used *executor*. By default the ``fork-join-"
"dispatcher`` is used and can be configured as explained in :ref"
":`dispatchers-scala`. In situations where the routees are expected to "
"perform blocking operations it may be useful to replace it with a ``thread-"
"pool-executor`` hinting the number of allocated threads explicitly:"
msgstr ""

#: ../../scala/routing.rst:315
msgid ""
"It is also possible to change the ``mailbox`` used by the balancing "
"dispatcher for scenarios where the default unbounded mailbox is not well "
"suited. An example of such a scenario could arise whether there exists the "
"need to manage priority for each message. You can then implement a priority "
"mailbox and configure your dispatcher:"
msgstr ""

#: ../../scala/routing.rst:324
msgid ""
"Bear in mind that ``BalancingDispatcher`` requires a message queue that must"
" be thread-safe for multiple concurrent consumers. So it is mandatory for "
"the message queue backing a custom mailbox for this kind of dispatcher to "
"implement akka.dispatch.MultipleConsumerSemantics. See details on how to "
"implement your custom mailbox in :ref:`mailboxes-scala`."
msgstr ""

#: ../../scala/routing.rst:329
msgid "There is no Group variant of the BalancingPool."
msgstr ""

#: ../../scala/routing.rst:332
msgid "SmallestMailboxPool"
msgstr ""

#: ../../scala/routing.rst:334
msgid ""
"A Router that tries to send to the non-suspended child routee with fewest "
"messages in mailbox. The selection is done in this order:"
msgstr ""

#: ../../scala/routing.rst:337
msgid "pick any idle routee (not processing message) with empty mailbox"
msgstr ""

#: ../../scala/routing.rst:338
msgid "pick any routee with empty mailbox"
msgstr ""

#: ../../scala/routing.rst:339
msgid "pick routee with fewest pending messages in mailbox"
msgstr ""

#: ../../scala/routing.rst:340
msgid ""
"pick any remote routee, remote actors are consider lowest priority, since "
"their mailbox size is unknown"
msgstr ""

#: ../../scala/routing.rst:343
msgid "SmallestMailboxPool defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:349
msgid "SmallestMailboxPool defined in code:"
msgstr ""

#: ../../scala/routing.rst:353
msgid ""
"There is no Group variant of the SmallestMailboxPool because the size of the"
" mailbox and the internal dispatching state of the actor is not practically "
"available from the paths of the routees."
msgstr ""

#: ../../scala/routing.rst:358
msgid "BroadcastPool and BroadcastGroup"
msgstr ""

#: ../../scala/routing.rst:360
msgid ""
"A broadcast router forwards the message it receives to *all* its routees."
msgstr ""

#: ../../scala/routing.rst:362
msgid "BroadcastPool defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:368
msgid "BroadcastPool defined in code:"
msgstr ""

#: ../../scala/routing.rst:372
msgid "BroadcastGroup defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:378
msgid "BroadcastGroup defined in code:"
msgstr ""

#: ../../scala/routing.rst:385
msgid ""
"Broadcast routers always broadcast *every* message to their routees. If you "
"do not want to broadcast every message, then you can use a non-broadcasting "
"router and use :ref:`broadcast-messages-scala` as needed."
msgstr ""

#: ../../scala/routing.rst:391
msgid "ScatterGatherFirstCompletedPool and ScatterGatherFirstCompletedGroup"
msgstr ""

#: ../../scala/routing.rst:393
msgid ""
"The ScatterGatherFirstCompletedRouter will send the message on to all its "
"routees. It then waits for first reply it gets back. This result will be "
"sent back to original sender. Other replies are discarded."
msgstr ""

#: ../../scala/routing.rst:397
msgid ""
"It is expecting at least one reply within a configured duration, otherwise "
"it will reply with ``akka.pattern.AskTimeoutException`` in a "
"``akka.actor.Status.Failure``."
msgstr ""

#: ../../scala/routing.rst:400
msgid "ScatterGatherFirstCompletedPool defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:406
msgid "ScatterGatherFirstCompletedPool defined in code:"
msgstr ""

#: ../../scala/routing.rst:410
msgid "ScatterGatherFirstCompletedGroup defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:416
msgid "ScatterGatherFirstCompletedGroup defined in code:"
msgstr ""

#: ../../scala/routing.rst:422
msgid "TailChoppingPool and TailChoppingGroup"
msgstr ""

#: ../../scala/routing.rst:424
msgid ""
"The TailChoppingRouter will first send the message to one, randomly picked, "
"routee and then after a small delay to a second routee (picked randomly from"
" the remaining routees) and so on. It waits for first reply it gets back and"
" forwards it back to original sender. Other replies are discarded."
msgstr ""

#: ../../scala/routing.rst:428
msgid ""
"The goal of this router is to decrease latency by performing redundant "
"queries to multiple routees, assuming that one of the other actors may still"
" be faster to respond than the initial one."
msgstr ""

#: ../../scala/routing.rst:431
msgid ""
"This optimisation was described nicely in a blog post by Peter Bailis: "
"`Doing redundant work to speed up distributed queries "
"<http://www.bailis.org/blog/doing-redundant-work-to-speed-up-distributed-"
"queries/>`_."
msgstr ""

#: ../../scala/routing.rst:434
msgid "TailChoppingPool defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:440
msgid "TailChoppingPool defined in code:"
msgstr ""

#: ../../scala/routing.rst:444
msgid "TailChoppingGroup defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:450
msgid "TailChoppingGroup defined in code:"
msgstr ""

#: ../../scala/routing.rst:456
msgid "ConsistentHashingPool and ConsistentHashingGroup"
msgstr ""

#: ../../scala/routing.rst:458
msgid ""
"The ConsistentHashingPool uses `consistent hashing "
"<http://en.wikipedia.org/wiki/Consistent_hashing>`_ to select a routee based"
" on the sent message. This `article "
"<http://weblogs.java.net/blog/tomwhite/archive/2007/11/consistent_hash.html>`_"
" gives good insight into how consistent hashing is implemented."
msgstr ""

#: ../../scala/routing.rst:463
msgid ""
"There is 3 ways to define what data to use for the consistent hash key."
msgstr ""

#: ../../scala/routing.rst:465
msgid ""
"You can define ``hashMapping`` of the router to map incoming messages to "
"their consistent hash key. This makes the decision transparent for the "
"sender."
msgstr ""

#: ../../scala/routing.rst:469
msgid ""
"The messages may implement "
"``akka.routing.ConsistentHashingRouter.ConsistentHashable``. The key is part"
" of the message and it's convenient to define it together with the message "
"definition."
msgstr ""

#: ../../scala/routing.rst:473
msgid ""
"The messages can be wrapped in a "
"``akka.routing.ConsistentHashingRouter.ConsistentHashableEnvelope`` to "
"define what data to use for the consistent hash key. The sender knows the "
"key to use."
msgstr ""

#: ../../scala/routing.rst:477
msgid ""
"These ways to define the consistent hash key can be use together and at the "
"same time for one router. The ``hashMapping`` is tried first."
msgstr ""

#: ../../scala/routing.rst:481
msgid "Code example:"
msgstr ""

#: ../../scala/routing.rst:487
msgid ""
"In the above example you see that the ``Get`` message implements "
"``ConsistentHashable`` itself, while the ``Entry`` message is wrapped in a "
"``ConsistentHashableEnvelope``. The ``Evict`` message is handled by the "
"``hashMapping`` partial function."
msgstr ""

#: ../../scala/routing.rst:491
msgid "ConsistentHashingPool defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:497
msgid "ConsistentHashingPool defined in code:"
msgstr ""

#: ../../scala/routing.rst:501
msgid "ConsistentHashingGroup defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:507
msgid "ConsistentHashingGroup defined in code:"
msgstr ""

#: ../../scala/routing.rst:513
msgid ""
"``virtual-nodes-factor`` is the number of virtual nodes per routee that is "
"used in the consistent hash node ring to make the distribution more uniform."
msgstr ""

#: ../../scala/routing.rst:519
msgid "Specially Handled Messages"
msgstr ""

#: ../../scala/routing.rst:521
msgid ""
"Most messages sent to router actors will be forwarded according to the "
"routers' routing logic. However there are a few types of messages that have "
"special behavior."
msgstr ""

#: ../../scala/routing.rst:524
msgid ""
"Note that these special messages, except for the ``Broadcast`` message, are "
"only handled by self contained router actors and not by the "
"``akka.routing.Router`` component described in :ref:`simple-router-scala`."
msgstr ""

#: ../../scala/routing.rst:531
msgid "Broadcast Messages"
msgstr ""

#: ../../scala/routing.rst:533
msgid ""
"A ``Broadcast`` message can be used to send a message to *all* of a router's"
" routees. When a router receives a ``Broadcast`` message, it will broadcast "
"that message's *payload* to all routees, no matter how that router would "
"normally route its messages."
msgstr ""

#: ../../scala/routing.rst:537
msgid ""
"The example below shows how you would use a ``Broadcast`` message to send a "
"very important message to every routee of a router."
msgstr ""

#: ../../scala/routing.rst:542
msgid ""
"In this example the router receives the ``Broadcast`` message, extracts its "
"payload (``\"Watch out for Davy Jones' locker\"``), and then sends the "
"payload on to all of the router's routees. It is up to each routee actor to "
"handle the received payload message."
msgstr ""

#: ../../scala/routing.rst:547
msgid ""
"Do not use :ref:`broadcast-messages-scala` when you use :ref:`balancing-"
"pool-scala` for routers. Routees on :ref:`balancing-pool-scala` shares the "
"same mailbox instance, thus some routees can possibly get the broadcast "
"message multiple times, while other routees get no broadcast message."
msgstr ""

#: ../../scala/routing.rst:553
msgid "PoisonPill Messages"
msgstr ""

#: ../../scala/routing.rst:555
msgid ""
"A ``PoisonPill`` message has special handling for all actors, including for "
"routers. When any actor receives a ``PoisonPill`` message, that actor will "
"be stopped. See the :ref:`poison-pill-scala` documentation for details."
msgstr ""

#: ../../scala/routing.rst:561
msgid ""
"For a router, which normally passes on messages to routees, it is important "
"to realise that ``PoisonPill`` messages are processed by the router only. "
"``PoisonPill`` messages sent to a router will *not* be sent on to routees."
msgstr ""

#: ../../scala/routing.rst:565
msgid ""
"However, a ``PoisonPill`` message sent to a router may still affect its "
"routees, because it will stop the router and when the router stops it also "
"stops its children. Stopping children is normal actor behavior. The router "
"will stop routees that it has created as children. Each child will process "
"its current message and then stop. This may lead to some messages being "
"unprocessed. See the documentation on :ref:`stopping-actors-scala` for more "
"information."
msgstr ""

#: ../../scala/routing.rst:571
msgid ""
"If you wish to stop a router and its routees, but you would like the routees"
" to first process all the messages currently in their mailboxes, then you "
"should not send a ``PoisonPill`` message to the router. Instead you should "
"wrap a ``PoisonPill`` message inside a ``Broadcast`` message so that each "
"routee will receive the ``PoisonPill`` message. Note that this will stop all"
" routees, even if the routees aren't children of the router, i.e. even "
"routees programmatically provided to the router."
msgstr ""

#: ../../scala/routing.rst:579
msgid ""
"With the code shown above, each routee will receive a ``PoisonPill`` "
"message. Each routee will continue to process its messages as normal, "
"eventually processing the ``PoisonPill``. This will cause the routee to "
"stop. After all routees have stopped the router will itself be :ref:`stopped"
" automatically <note-router-terminated-children-scala>` unless it is a "
"dynamic router, e.g. using a resizer."
msgstr ""

#: ../../scala/routing.rst:587
msgid ""
"Brendan W McAdams' excellent blog post `Distributing Akka Workloads - And "
"Shutting Down Afterwards "
"<http://bytes.codes/2013/01/17/Distributing_Akka_Workloads_And_Shutting_Down_After/>`_"
" discusses in more detail how ``PoisonPill`` messages can be used to shut "
"down routers and routees."
msgstr ""

#: ../../scala/routing.rst:592
msgid "Kill Messages"
msgstr ""

#: ../../scala/routing.rst:594
msgid ""
"``Kill`` messages are another type of message that has special handling. See"
" :ref:`killing-actors-scala` for general information about how actors handle"
" ``Kill`` messages."
msgstr ""

#: ../../scala/routing.rst:597
msgid ""
"When a ``Kill`` message is sent to a router the router processes the message"
" internally, and does *not* send it on to its routees. The router will throw"
" an ``ActorKilledException`` and fail. It will then be either resumed, "
"restarted or terminated, depending how it is supervised."
msgstr ""

#: ../../scala/routing.rst:601
msgid ""
"Routees that are children of the router will also be suspended, and will be "
"affected by the supervision directive that is applied to the router. Routees"
" that are not the routers children, i.e. those that were created externally "
"to the router, will not be affected."
msgstr ""

#: ../../scala/routing.rst:607
msgid ""
"As with the ``PoisonPill`` message, there is a distinction between killing a"
" router, which indirectly kills its children (who happen to be routees), and"
" killing routees directly (some of whom may not be children.) To kill "
"routees directly the router should be sent a ``Kill`` message wrapped in a "
"``Broadcast`` message."
msgstr ""

#: ../../scala/routing.rst:615
msgid "Management Messages"
msgstr ""

#: ../../scala/routing.rst:617
msgid ""
"Sending ``akka.routing.GetRoutees`` to a router actor will make it send back"
" its currently used routees in a ``akka.routing.Routees`` message."
msgstr ""

#: ../../scala/routing.rst:619
msgid ""
"Sending ``akka.routing.AddRoutee`` to a router actor will add that routee to"
" its collection of routees."
msgstr ""

#: ../../scala/routing.rst:620
msgid ""
"Sending ``akka.routing.RemoveRoutee`` to a router actor will remove that "
"routee to its collection of routees."
msgstr ""

#: ../../scala/routing.rst:621
msgid ""
"Sending ``akka.routing.AdjustPoolSize`` to a pool router actor will add or "
"remove that number of routees to its collection of routees."
msgstr ""

#: ../../scala/routing.rst:624
msgid ""
"These management messages may be handled after other messages, so if you "
"send ``AddRoutee`` immediately followed by an ordinary message you are not "
"guaranteed that the routees have been changed when the ordinary message is "
"routed. If you need to know when the change has been applied you can send "
"``AddRoutee`` followed by ``GetRoutees`` and when you receive the "
"``Routees`` reply you know that the preceding change has been applied."
msgstr ""

#: ../../scala/routing.rst:632
msgid "Dynamically Resizable Pool"
msgstr ""

#: ../../scala/routing.rst:634
msgid ""
"Most pools can be used with a fixed number of routees or with a resize "
"strategy to adjust the number of routees dynamically."
msgstr ""

#: ../../scala/routing.rst:637
msgid ""
"There are two types of resizers: the default ``Resizer`` and the "
"``OptimalSizeExploringResizer``."
msgstr ""

#: ../../scala/routing.rst:640
msgid "Default Resizer"
msgstr ""

#: ../../scala/routing.rst:642
msgid ""
"The default resizer ramps up and down pool size based on pressure, measured "
"by the percentage of busy routees in the pool. It ramps up pool size if the "
"pressure is higher than a certain threshold and backs off if the pressure is"
" lower than certain threshold. Both thresholds are configurable."
msgstr ""

#: ../../scala/routing.rst:646
msgid "Pool with default resizer defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:652
msgid ""
"Several more configuration options are available and described in "
"``akka.actor.deployment.default.resizer`` section of the reference "
":ref:`configuration`."
msgstr ""

#: ../../scala/routing.rst:655
msgid "Pool with resizer defined in code:"
msgstr ""

#: ../../scala/routing.rst:659
msgid ""
"*It is also worth pointing out that if you define the ``router`` in the "
"configuration file then this value will be used instead of any "
"programmatically sent parameters.*"
msgstr ""

#: ../../scala/routing.rst:664
msgid "Optimal Size Exploring Resizer"
msgstr ""

#: ../../scala/routing.rst:666
msgid ""
"The ``OptimalSizeExploringResizer`` resizes the pool to an optimal size that"
" provides the most message throughput."
msgstr ""

#: ../../scala/routing.rst:668
msgid ""
"This resizer works best when you expect the pool size to performance "
"function to be a convex function. For example, when you have a CPU bound "
"tasks, the optimal size is bound to the number of CPU cores. When your task "
"is IO bound, the optimal size is bound to optimal number of concurrent "
"connections to that IO service - e.g. a 4 node elastic search cluster may "
"handle 4-8 concurrent requests at optimal speed."
msgstr ""

#: ../../scala/routing.rst:673
msgid ""
"It achieves this by keeping track of message throughput at each pool size "
"and performing the following three resizing operations (one at a time) "
"periodically:"
msgstr ""

#: ../../scala/routing.rst:676
msgid ""
"Downsize if it hasn't seen all routees ever fully utilized for a period of "
"time."
msgstr ""

#: ../../scala/routing.rst:677
msgid ""
"Explore to a random nearby pool size to try and collect throughput metrics."
msgstr ""

#: ../../scala/routing.rst:678
msgid ""
"Optimize to a nearby pool size with a better (than any other nearby sizes) "
"throughput metrics."
msgstr ""

#: ../../scala/routing.rst:680
msgid ""
"When the pool is fully-utilized (i.e. all routees are busy), it randomly "
"choose between exploring and optimizing. When the pool has not been fully-"
"utilized for a period of time, it will downsize the pool to the last seen "
"max utilization multiplied by a configurable ratio."
msgstr ""

#: ../../scala/routing.rst:684
msgid ""
"By constantly exploring and optimizing, the resizer will eventually walk to "
"the optimal size and remain nearby. When the optimal size changes it will "
"start walking towards the new one."
msgstr ""

#: ../../scala/routing.rst:687
msgid ""
"It keeps a performance log so it's stateful as well as having a larger "
"memory footprint than the default ``Resizer``. The memory usage is O(n) "
"where n is the number of sizes you allow, i.e. upperBound - lowerBound."
msgstr ""

#: ../../scala/routing.rst:690
msgid "Pool with ``OptimalSizeExploringResizer`` defined in configuration:"
msgstr ""

#: ../../scala/routing.rst:696
msgid ""
"Several more configuration options are available and described in "
"``akka.actor.deployment.default.optimal-size-exploring-resizer`` section of "
"the reference :ref:`configuration`."
msgstr ""

#: ../../scala/routing.rst:701
msgid ""
"Resizing is triggered by sending messages to the actor pool, but it is not "
"completed synchronously; instead a message is sent to the “head” "
"``RouterActor`` to perform the size change. Thus you cannot rely on resizing"
" to instantaneously create new workers when all others are busy, because the"
" message just sent will be queued to the mailbox of a busy actor. To remedy "
"this, configure the pool to use a balancing dispatcher, see `Configuring "
"Dispatchers`_ for more information."
msgstr ""

#: ../../scala/routing.rst:713
msgid "How Routing is Designed within Akka"
msgstr ""

#: ../../scala/routing.rst:715
msgid ""
"On the surface routers look like normal actors, but they are actually "
"implemented differently. Routers are designed to be extremely efficient at "
"receiving messages and passing them quickly on to routees."
msgstr ""

#: ../../scala/routing.rst:719
msgid ""
"A normal actor can be used for routing messages, but an actor's single-"
"threaded processing can become a bottleneck. Routers can achieve much higher"
" throughput with an optimization to the usual message-processing pipeline "
"that allows concurrent routing. This is achieved by embedding routers' "
"routing logic directly in their ``ActorRef`` rather than in the router "
"actor. Messages sent to a router's ``ActorRef`` can be immediately routed to"
" the routee, bypassing the single-threaded router actor entirely."
msgstr ""

#: ../../scala/routing.rst:726
msgid ""
"The cost to this is, of course, that the internals of routing code are more "
"complicated than if routers were implemented with normal actors. Fortunately"
" all of this complexity is invisible to consumers of the routing API. "
"However, it is something to be aware of when implementing your own routers."
msgstr ""

#: ../../scala/routing.rst:734
msgid "Custom Router"
msgstr ""

#: ../../scala/routing.rst:736
msgid ""
"You can create your own router should you not find any of the ones provided "
"by Akka sufficient for your needs. In order to roll your own router you have"
" to fulfill certain criteria which are explained in this section."
msgstr ""

#: ../../scala/routing.rst:739
msgid ""
"Before creating your own router you should consider whether a normal actor "
"with router-like behavior might do the job just as well as a full-blown "
"router. As explained :ref:`above <router-design-scala>`, the primary benefit"
" of routers over normal actors is their higher performance. But they are "
"somewhat more complicated to write than normal actors. Therefore if lower "
"maximum throughput is acceptable in your application you may wish to stick "
"with traditional actors. This section, however, assumes that you wish to get"
" maximum performance and so demonstrates how you can create your own router."
msgstr ""

#: ../../scala/routing.rst:747
msgid ""
"The router created in this example is replicating each message to a few "
"destinations."
msgstr ""

#: ../../scala/routing.rst:749
msgid "Start with the routing logic:"
msgstr ""

#: ../../scala/routing.rst:753
msgid ""
"``select`` will be called for each message and in this example pick a few "
"destinations by round-robin, by reusing the existing "
"``RoundRobinRoutingLogic`` and wrap the result in a ``SeveralRoutees`` "
"instance.  ``SeveralRoutees`` will send the message to all of the supplied "
"routes."
msgstr ""

#: ../../scala/routing.rst:757
msgid ""
"The implementation of the routing logic must be thread safe, since it might "
"be used outside of actors."
msgstr ""

#: ../../scala/routing.rst:759
msgid "A unit test of the routing logic:"
msgstr ""

#: ../../scala/routing.rst:763
msgid ""
"You could stop here and use the ``RedundancyRoutingLogic`` with a "
"``akka.routing.Router`` as described in :ref:`simple-router-scala`."
msgstr ""

#: ../../scala/routing.rst:766
msgid ""
"Let us continue and make this into a self contained, configurable, router "
"actor."
msgstr ""

#: ../../scala/routing.rst:768
msgid ""
"Create a class that extends ``Pool``, ``Group`` or ``CustomRouterConfig``. "
"That class is a factory for the routing logic and holds the configuration "
"for the router. Here we make it a ``Group``."
msgstr ""

#: ../../scala/routing.rst:773
msgid "This can be used exactly as the router actors provided by Akka."
msgstr ""

#: ../../scala/routing.rst:777
msgid ""
"Note that we added a constructor in ``RedundancyGroup`` that takes a "
"``Config`` parameter. That makes it possible to define it in configuration."
msgstr ""

#: ../../scala/routing.rst:782
msgid ""
"Note the fully qualified class name in the ``router`` property. The router "
"class must extend ``akka.routing.RouterConfig`` (``Pool``, ``Group`` or "
"``CustomRouterConfig``) and have constructor with one "
"``com.typesafe.config.Config`` parameter. The deployment section of the "
"configuration is passed to the constructor."
msgstr ""

#: ../../scala/routing.rst:790
msgid "Configuring Dispatchers"
msgstr ""

#: ../../scala/routing.rst:792
msgid ""
"The dispatcher for created children of the pool will be taken from ``Props``"
" as described in :ref:`dispatchers-scala`."
msgstr ""

#: ../../scala/routing.rst:795
msgid ""
"To make it easy to define the dispatcher of the routees of the pool you can "
"define the dispatcher inline in the deployment section of the config."
msgstr ""

#: ../../scala/routing.rst:800
msgid ""
"That is the only thing you need to do enable a dedicated dispatcher for a "
"pool."
msgstr ""

#: ../../scala/routing.rst:805
msgid ""
"If you use a group of actors and route to their paths, then they will still "
"use the same dispatcher that was configured for them in their ``Props``, it "
"is not possible to change an actors dispatcher after it has been created."
msgstr ""

#: ../../scala/routing.rst:809
msgid ""
"The “head” router cannot always run on the same dispatcher, because it does "
"not process the same type of messages, hence this special actor does not use"
" the dispatcher configured in ``Props``, but takes the ``routerDispatcher`` "
"from the :class:`RouterConfig` instead, which defaults to the actor system’s"
" default dispatcher. All standard routers allow setting this property in "
"their constructor or factory method, custom routers have to implement the "
"method in a suitable way."
msgstr ""

#: ../../scala/routing.rst:821
msgid ""
"It is not allowed to configure the ``routerDispatcher`` to be a "
":class:`akka.dispatch.BalancingDispatcherConfigurator` since the messages "
"meant for the special router actor cannot be processed by any other actor."
msgstr ""
