# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-03 22:29+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../common/circuitbreaker.rst:5
msgid "Circuit Breaker"
msgstr ""

#: ../../common/circuitbreaker.rst:9
msgid "Why are they used?"
msgstr ""

#: ../../common/circuitbreaker.rst:10
msgid ""
"A circuit breaker is used to provide stability and prevent cascading "
"failures in distributed systems.  These should be used in conjunction "
"with judicious timeouts at the interfaces between remote systems to "
"prevent the failure of a single component from bringing down all "
"components."
msgstr ""

#: ../../common/circuitbreaker.rst:14
msgid ""
"As an example, we have a web application interacting with a remote third "
"party web service. Let's say the third party has oversold their capacity "
"and their database melts down under load. Assume that the database fails "
"in such a way that it takes a very long time to hand back an error to the"
" third party web service.  This in turn makes calls fail after a long "
"period of time.  Back to our web application, the users have noticed that"
" their form submissions take much longer seeming to hang.  Well the users"
" do what they know to do which is use the refresh button, adding more "
"requests to their already running requests.  This eventually causes the "
"failure of the web application due to resource exhaustion.  This will "
"affect all users, even those who are not using functionality dependent on"
" this third party web service."
msgstr ""

#: ../../common/circuitbreaker.rst:24
msgid ""
"Introducing circuit breakers on the web service call would cause the "
"requests to begin to fail-fast, letting the user know that something is "
"wrong and that they need not refresh their request.  This also confines "
"the failure behavior to only those users that are using functionality "
"dependent on the third party, other users are no longer affected as there"
" is no resource exhaustion.  Circuit breakers can also allow savvy "
"developers to mark portions of the site that use the functionality "
"unavailable, or perhaps show some cached content as appropriate while the"
" breaker is open."
msgstr ""

#: ../../common/circuitbreaker.rst:32
msgid ""
"The Akka library provides an implementation of a circuit breaker called "
":class:`akka.pattern.CircuitBreaker` which has the behavior described "
"below."
msgstr ""

#: ../../common/circuitbreaker.rst:37
msgid "What do they do?"
msgstr ""

#: ../../common/circuitbreaker.rst:40
msgid "During normal operation, a circuit breaker is in the `Closed` state:"
msgstr ""

#: ../../common/circuitbreaker.rst:39
msgid ""
"Exceptions or calls exceeding the configured `callTimeout` increment a "
"failure counter"
msgstr ""

#: ../../common/circuitbreaker.rst:40
msgid "Successes reset the failure count to zero"
msgstr ""

#: ../../common/circuitbreaker.rst:41
msgid ""
"When the failure counter reaches a `maxFailures` count, the breaker is "
"tripped into `Open` state"
msgstr ""

#: ../../common/circuitbreaker.rst:43
msgid "While in `Open` state:"
msgstr ""

#: ../../common/circuitbreaker.rst:43
msgid "All calls fail-fast with a :class:`CircuitBreakerOpenException`"
msgstr ""

#: ../../common/circuitbreaker.rst:44
msgid ""
"After the configured `resetTimeout`, the circuit breaker enters a `Half-"
"Open` state"
msgstr ""

#: ../../common/circuitbreaker.rst:48
msgid "In `Half-Open` state:"
msgstr ""

#: ../../common/circuitbreaker.rst:46
msgid "The first call attempted is allowed through without failing fast"
msgstr ""

#: ../../common/circuitbreaker.rst:47
msgid "All other calls fail-fast with an exception just as in `Open` state"
msgstr ""

#: ../../common/circuitbreaker.rst:48
msgid "If the first call succeeds, the breaker is reset back to `Closed` state"
msgstr ""

#: ../../common/circuitbreaker.rst:49
msgid ""
"If the first call fails, the breaker is tripped again into the `Open` "
"state for another full `resetTimeout`"
msgstr ""

#: ../../common/circuitbreaker.rst:52
msgid "State transition listeners:"
msgstr ""

#: ../../common/circuitbreaker.rst:51
msgid ""
"Callbacks can be provided for every state entry via `onOpen`, `onClose`, "
"and `onHalfOpen`"
msgstr ""

#: ../../common/circuitbreaker.rst:52
msgid "These are executed in the :class:`ExecutionContext` provided."
msgstr ""

#: ../../common/circuitbreaker.rst:58
msgid "Examples"
msgstr ""

#: ../../common/circuitbreaker.rst:62
msgid "Initialization"
msgstr ""

#: ../../common/circuitbreaker.rst:67
msgid "Here's how a :class:`CircuitBreaker` would be configured for:"
msgstr ""

#: ../../common/circuitbreaker.rst:65
msgid "5 maximum failures"
msgstr ""

#: ../../common/circuitbreaker.rst:66
msgid "a call timeout of 10 seconds"
msgstr ""

#: ../../common/circuitbreaker.rst:67
msgid "a reset timeout of 1 minute"
msgstr ""

#: ../../common/circuitbreaker.rst:71 ../../common/circuitbreaker.rst:92
msgid "Scala"
msgstr ""

#: ../../common/circuitbreaker.rst:78 ../../common/circuitbreaker.rst:99
msgid "Java"
msgstr ""

#: ../../common/circuitbreaker.rst:85
msgid "Call Protection"
msgstr ""

#: ../../common/circuitbreaker.rst:87
msgid ""
"Here's how the :class:`CircuitBreaker` would be used to protect an "
"asynchronous call as well as a synchronous one:"
msgstr ""

#: ../../common/circuitbreaker.rst:106
msgid ""
"Using the :class:`CircuitBreaker` companion object's `apply` or `create` "
"methods will return a :class:`CircuitBreaker` where callbacks are "
"executed in the caller's thread. This can be useful if the asynchronous "
":class:`Future` behavior is unnecessary, for example invoking a "
"synchronous-only API."
msgstr ""

