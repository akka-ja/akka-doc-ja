# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016, Lightbend Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka @version@\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-04 02:13+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Japanese (https://www.transifex.com/akka-ja/teams/67802/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../common/binary-compatibility-rules.rst:4
msgid "Binary Compatibility Rules"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:6
msgid ""
"Akka maintains and verifies *backwards binary compatibility* across versions"
" of modules."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:8
msgid ""
"In the rest of this document whenever *binary compatibility* is mentioned "
"\"*backwards binary compatibility*\" is meant (as opposed to forward "
"compatibility)."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:11
msgid ""
"This means that the new JARs are a drop-in replacement for the old one (but "
"not the other way around) as long as your build does not enable the inliner "
"(Scala-only restriction)."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:15
msgid "Binary compatibility rules explained"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:16
msgid "Binary compatibility is maintained between:"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:18
msgid ""
"**minor** and **patch** versions - please note that the meaning of \"minor\""
" has shifted to be more restrictive with Akka ``2.4.0``, read "
":ref:`24versioningChange` for details."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:20
msgid "Binary compatibility is **NOT** maintained between:"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:22
msgid "**major** versions"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:23
msgid ""
"any versions of **experimental** modules â€“ read :ref:`meaning-of-"
"experimental` for details"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:24
msgid "a few notable exclusions explained below"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:26
msgid ""
"Specific examples (please read :ref:`24versioningChange` to understand the "
"difference in \"before 2.4 era\" and \"after 2.4 era\")::"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:43
msgid "Cases where binary compatibility is not retained"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:44
msgid ""
"Some modules are excluded from the binary compatibility guarantees, such as:"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:46
msgid ""
"``*-testkit`` modules - since these are to be used only in tests, which "
"usually are re-compiled and run on demand"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:48
msgid ""
"``*-tck`` modules     - since they may want to add new tests (or force "
"configuring something), in order to discover possible"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:48
msgid ""
"failures in an existing implementation that the TCK is supposed to be "
"testing. Compatibility here is not *guaranteed*, however it is attempted to "
"make the upgrade prosess as smooth as possible."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:50
msgid ""
"all :ref:`experimental <meaning-of-experimental>` modules - which by "
"definition are subject to rapid iteration and change. Read more about them "
"in :ref:`meaning-of-experimental`"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:55
msgid "Change in versioning scheme, stronger compatibility since 2.4"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:56
msgid ""
"Since the release of Akka ``2.4.0`` a new versioning scheme is in effect."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:58
msgid ""
"Historically, Akka has been following the Java or Scala style of versioning "
"where as the first number would mean \"**epoch**\", the second one would "
"mean **major**, and third be the **minor**, thus: ``epoch.major.minor`` "
"(versioning scheme followed until and during ``2.3.x``)."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:61
msgid ""
"**Currently**, since Akka ``2.4.0``, the new versioning applies which is "
"closer to semantic versioning many have come to expect, in which the version"
" number is deciphered as ``major.minor.patch``."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:64
msgid ""
"In addition to that, Akka ``2.4.x`` has been made binary compatible with the"
" ``2.3.x`` series, so there is no reason to remain on Akka 2.3.x, since "
"upgrading is completely compatible (and many issues have been fixed ever "
"since)."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:69
msgid "Mixed versioning is not allowed"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:71
msgid ""
"Modules that are released together under the Akka project are intended to be"
" upgraded together. For example, it is not legal to mix Akka Actor ``2.4.2``"
" with Akka Cluster ``2.4.5`` even though \"Akka ``2.4.2``\" and \"Akka "
"``2.4.5``\" *are* binary compatible."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:75
msgid ""
"This is because modules may assume internals changes across module "
"boundaries, for example some feature in Clustering may have required an "
"internals change in Actor, however it is not public API, thus such change is"
" considered safe."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:80
msgid ""
"We recommend keeping an ``akkaVersion`` variable in your build file, and re-"
"use it for all included modules, so when you upgrade you can simply change "
"it in this one place."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:86
msgid "The meaning of \"experimental\""
msgstr ""

#: ../../common/binary-compatibility-rules.rst:87
msgid ""
"**Experimental** is a keyword used in module descriptions as well as their "
"artifact names, in order to signify that the API that they contain is "
"subject to change without any prior warning."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:90
msgid ""
"Experimental modules are are not covered by Lightbend's Commercial Support, "
"unless specifically stated otherwise. The purpose of releasing them early, "
"as experimental, is to make them easily available and improve based on "
"feedback, or even discover that the module wasn't useful."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:95
msgid ""
"An experimental module doesn't have to obey the rule of staying binary "
"compatible between micro releases. Breaking API changes may be introduced in"
" minor releases without notice as we refine and simplify based on your "
"feedback. An experimental module may be dropped in minor releases without "
"prior deprecation."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:101
msgid ""
"Best effort migration guides may be provided, but this is decided on a case-"
"by-case basis for **experimental** modules."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:104
msgid "The meaning of INTERNAL API"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:105
msgid ""
"When browsing the source code and/or looking for methods available to be "
"called, especially from Java which does not have as rich of an access "
"protection system as Scala has, you may sometimes find methods or classes "
"annotated with the ``/** INTERNAL API */`` comment."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:109
msgid ""
"No compatibility guarantees are given about these classes, they may change "
"or even disapear in minor versions, and user code is not supposed to be "
"calling (or even touching) them."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:112
msgid ""
"Side-note on JVM representation details of the Scala ``private[akka]`` "
"pattern that Akka is using extensively in it's internals: Such methods or "
"classes, which act as \"accessible only from the given package\" in Scala, "
"are compiled down to ``public`` (!) in raw Java bytecode, and the access "
"restriction, that Scala understands is carried along as metadata stored in "
"the classfile. Thus, such methods are safely guarded from being accessed "
"from Scala, however Java users will not be warned about this fact by the "
"``javac`` compiler. Please be aware of this and do not call into Internal "
"APIs, as they are subject to change without any warning."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:120
msgid "Binary Compatibility Checking Toolchain"
msgstr ""

#: ../../common/binary-compatibility-rules.rst:121
msgid ""
"Akka uses the Lightbend maintained `Migration Manager "
"<https://github.com/typesafehub/migration-manager>`_, called ``MiMa`` for "
"short, for enforcing binary compatibility is kept where it was promised."
msgstr ""

#: ../../common/binary-compatibility-rules.rst:124
msgid ""
"All Pull Requests must pass MiMa validation (which happens automatically), "
"and if failures are detected, manual exception overrides may be put in place"
" if the change happened to be in an Internal API for example."
msgstr ""
